{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, formatDateAllValues, M } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport GoogleMapReact from 'google-map-react';\n\nconst polyline = require(\"@mapbox/polyline\");\n\nimport { BiCurrentLocation } from 'react-icons/bi';\nimport * as turf from '@turf/turf'; //for encoding polylines\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default class CancelledTrips extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"loadResult\", () => {\n      firebase.database().ref(`cancelled_UNRESOLVED`).once('value', snapshot => {\n        //console.log(snapshot.val());\n        let r = [];\n\n        for (let key in snapshot.val()) r.push(snapshot.val()[key]);\n\n        this.setState({\n          result: r\n        });\n      }).catch(error => {\n        alert(error.message);\n      });\n    });\n\n    _defineProperty(this, \"getMapBounds\", (map, maps, legs) => {\n      const bounds = new maps.LatLngBounds();\n      const r = [...legs //[this.props.location.latitude, this.props.location.longitude], //USER LOCATION SHOULD BE HERE\n      //[this.props.destination.latitude, this.props.destination.longitude] //DRIVER LOCATION SHOULD BE HERE\n      ];\n      const line = turf.lineString(r);\n      turf.bboxPolygon(turf.bbox(line)).geometry.coordinates[0].forEach(v => {\n        bounds.extend(new maps.LatLng(v[0], v[1]));\n      });\n      map.fitBounds(bounds);\n    });\n\n    _defineProperty(this, \"renderPolylines\", (map, maps, fitToBoundsOnly) => {\n      function geodesicPolyline(polyline_, m, color) {\n        const poly = polyline.decode(polyline_);\n\n        for (let i = 0; i < poly.length; i++) m.push({\n          lat: poly[i][0],\n          lng: poly[i][1]\n        });\n\n        if (!fitToBoundsOnly) {\n          let geodesicPolyliner = new maps.Polyline({\n            path: m,\n            options: {\n              strokeColor: color,\n              strokeOpacity: 1,\n              strokeWeight: 4\n            }\n          });\n          geodesicPolyliner.setMap(map);\n        }\n      }\n\n      ;\n      const {\n        polylines\n      } = this.state.currentData;\n      let markers1 = [],\n          markers2 = [],\n          markers3 = [];\n      if (polylines !== null && polylines !== void 0 && polylines.firstLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.firstLeg, markers1, colors.GREEN);\n      if (polylines !== null && polylines !== void 0 && polylines.secondLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.secondLeg, markers2, colors.BLUE);\n      if (polylines !== null && polylines !== void 0 && polylines.thirdLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.thirdLeg, markers3, colors.PURPLE);\n      let newArray = [...markers1, ...markers2, ...markers3];\n      this.getMapBounds(map, maps, newArray.map(v => {\n        return [v.lat, v.lng];\n      }));\n    });\n\n    _defineProperty(this, \"renderDriverMarkers\", tripDetails => {\n      let driverMarkers = [];\n\n      for (let key in tripDetails) {\n        let image = '';\n\n        switch (key) {\n          case '_1':\n            {\n              image = '/greenCarIcon.svg';\n            }\n            break;\n\n          case '_2':\n            {\n              image = '/blueCarIcon.svg';\n            }\n            break;\n\n          case '_3':\n            {\n              image = '/purpleCarIcon.svg';\n            }\n            break;\n        }\n\n        ;\n        driverMarkers.push( /*#__PURE__*/_jsx(\"img\", {\n          lat: tripDetails[key].location.latitude,\n          lng: tripDetails[key].location.longitude,\n          src: image,\n          className: styles.mapIcon\n        }, key));\n      }\n\n      ;\n      return driverMarkers;\n    });\n\n    this.state = {\n      idRiderSearch: '',\n      idDriverSearch: '',\n      result: [],\n      currentData: null,\n      key: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.loadResult();\n    firebase.database().ref('GOOGLE_KEY').once('value', key => {\n      this.setState({\n        key: key.val()\n      });\n    }).catch(error => console.log(error.message));\n  }\n\n  render() {\n    let results = [];\n    const keys = Object.keys(this.state.result).sort((a, b) => b - a);\n\n    for (let k = 0; k < keys.length; k++) {\n      const data = this.state.result[k];\n      const {\n        startAt\n      } = data;\n      const displayDate = formatDateAllValues(new Date(startAt.year, M.indexOf(startAt.month), startAt.day, startAt.hour, startAt.min, startAt.sec));\n      results.push( /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.previousMessageSum,\n          onClick: () => {\n            this.setState({\n              currentData: data\n            });\n          },\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            style: {\n              width: '90px',\n              height: '30px',\n              backgroundColor: data.canceller == 'rider' ? colors.GREEN : colors.BLUE,\n              borderRadius: '5px',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.readOrUnreadText,\n              style: {\n                color: '#ffffff',\n                fontFamily: 'Gilroy-ExtraBold'\n              },\n              children: data.canceller == 'rider' ? 'Rider' : 'Driver'\n            })\n          }), /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontSize: '105%',\n              fontFamily: 'Gilroy-Bold',\n              color: colors.GREEN\n            },\n            children: /*#__PURE__*/_jsx(\"span\", {\n              style: {\n                color: colors.GREY\n              },\n              children: displayDate\n            })\n          })]\n        }), k == keys.length - 1 ? /*#__PURE__*/_jsx(_Fragment, {}) : /*#__PURE__*/_jsx(\"div\", {\n          className: styles.sharedLine,\n          style: {\n            marginTop: '5px'\n          }\n        })]\n      }));\n    }\n\n    ;\n    const defaultProps = {\n      center: {\n        lat: 53.631611,\n        lng: -113.323975\n      },\n      zoom: 11\n    };\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.cont,\n      children: this.state.currentData ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.container,\n          style: {\n            backgroundColor: colors.WHITE,\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            className: styles.title,\n            style: {\n              color: colors.BLACK\n            },\n            children: \"Cancelled Trip\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              width: '90%',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              marginBottom: '20px'\n            }\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.mapBox,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.mapBoxCenter,\n              onClick: () => {\n                this.renderPolylines(this.map.map_, this.map.maps_, true);\n              },\n              children: /*#__PURE__*/_jsx(BiCurrentLocation, {\n                color: colors.GREEN,\n                size: 25\n              })\n            }), /*#__PURE__*/_jsxs(GoogleMapReact, {\n              ref: map => this.map = map,\n              bootstrapURLKeys: {\n                key: this.state.key\n              },\n              defaultCenter: defaultProps.center,\n              defaultZoom: defaultProps.zoom,\n              options: {\n                fullscreenControl: false,\n                disableDefaultUI: true\n              },\n              onGoogleApiLoaded: ({\n                map,\n                maps\n              }) => this.renderPolylines(map, maps),\n              children: [this.state.currentData.userLocation && /*#__PURE__*/_jsx(\"img\", {\n                lat: this.state.currentData.userLocation.latitude,\n                lng: this.state.currentData.userLocation.longitude,\n                src: '/userIcon.svg',\n                className: styles.mapIcon\n              }), this.renderDriverMarkers(this.state.currentData.tripDetails)]\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY\n              },\n              children: \"Breakdown of trip cancellation\"\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.breakdownSpreadApart,\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                children: \"Canceller\"\n              }), /*#__PURE__*/_jsx(\"div\", {\n                style: {\n                  width: '90px',\n                  height: '30px',\n                  backgroundColor: this.state.currentData.canceller == 'rider' ? colors.GREEN : colors.BLUE,\n                  borderRadius: '5px',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                },\n                children: /*#__PURE__*/_jsx(\"p\", {\n                  className: styles.readOrUnreadText,\n                  style: {\n                    color: '#ffffff',\n                    fontFamily: 'Gilroy-ExtraBold'\n                  },\n                  children: this.state.currentData.canceller == 'rider' ? 'Rider' : 'Driver'\n                })\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.enterKilometerDiv,\n          style: {\n            marginTop: '20px',\n            marginBottom: '150px',\n            marginLeft: '2.5%',\n            width: '95%'\n          },\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: styles.button2,\n            style: {\n              backgroundColor: colors.RED\n            },\n            id: styles.buttonBottom,\n            onClick: () => {\n              this.setState({\n                currentData: null\n              });\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              children: \"Cancel\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.button2,\n            style: {\n              backgroundColor: colors.GREEN\n            },\n            id: styles.buttonBottom,\n            onClick: () => {},\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              children: \"Refund Amount\"\n            })\n          })]\n        })]\n      }) : /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.container,\n        style: {\n          backgroundColor: colors.WHITE,\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          className: styles.title,\n          style: {\n            color: colors.BLACK\n          },\n          children: \"Cancelled Trips\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '90%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            marginBottom: '20px'\n          }\n        }), results]\n      })\n    });\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/ugo/Documents/Perch_Projects/Perch-Website/functions/panels/adminPanels/cancelledTrips.js"],"names":["React","colors","formatDateAllValues","M","styles","firebase","GoogleMapReact","polyline","require","BiCurrentLocation","turf","CancelledTrips","Component","constructor","props","database","ref","once","snapshot","r","key","val","push","setState","result","catch","error","alert","message","map","maps","legs","bounds","LatLngBounds","line","lineString","bboxPolygon","bbox","geometry","coordinates","forEach","v","extend","LatLng","fitBounds","fitToBoundsOnly","geodesicPolyline","polyline_","m","color","poly","decode","i","length","lat","lng","geodesicPolyliner","Polyline","path","options","strokeColor","strokeOpacity","strokeWeight","setMap","polylines","state","currentData","markers1","markers2","markers3","firstLeg","GREEN","secondLeg","BLUE","thirdLeg","PURPLE","newArray","getMapBounds","tripDetails","driverMarkers","image","location","latitude","longitude","mapIcon","idRiderSearch","idDriverSearch","componentDidMount","loadResult","console","log","render","results","keys","Object","sort","a","b","k","data","startAt","displayDate","Date","year","indexOf","month","day","hour","min","sec","previousMessageSum","width","height","backgroundColor","canceller","borderRadius","display","justifyContent","alignItems","readOrUnreadText","fontFamily","fontSize","GREY","sharedLine","marginTop","defaultProps","center","zoom","cont","container","WHITE","title","BLACK","flexDirection","marginBottom","mapBox","mapBoxCenter","renderPolylines","map_","maps_","fullscreenControl","disableDefaultUI","userLocation","renderDriverMarkers","text","breakdownSpreadApart","enterKilometerDiv","marginLeft","button2","RED","buttonBottom","buttonText1"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, formatDateAllValues, M } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport GoogleMapReact from 'google-map-react';\nconst polyline = require(\"@mapbox/polyline\");\nimport { BiCurrentLocation } from 'react-icons/bi';\nimport * as turf from '@turf/turf'; //for encoding polylines\n\nexport default class CancelledTrips extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            idRiderSearch: '',\n            idDriverSearch: '',\n            result: [],\n            currentData: null,\n            key: \"\",\n        };\n    }\n    componentDidMount() {\n        this.loadResult();\n        firebase.database().ref('GOOGLE_KEY').once('value', key => {\n            this.setState({ key: key.val() })\n        }).catch(error => console.log(error.message));\n    }\n    loadResult = () => {\n        firebase.database().ref(`cancelled_UNRESOLVED`).once('value', snapshot => {\n            //console.log(snapshot.val());\n            let r = [];\n            for (let key in snapshot.val())\n                r.push(snapshot.val()[key]);\n            this.setState({ result: r })\n        }).catch(error => { alert(error.message) })\n    };\n    getMapBounds = (map, maps, legs) => {\n        const bounds = new maps.LatLngBounds();\n        const r = [\n            ...legs,\n            //[this.props.location.latitude, this.props.location.longitude], //USER LOCATION SHOULD BE HERE\n            //[this.props.destination.latitude, this.props.destination.longitude] //DRIVER LOCATION SHOULD BE HERE\n        ];\n        const line = turf.lineString(r);\n        turf.bboxPolygon(turf.bbox(line)).geometry.coordinates[0].forEach((v => {\n            bounds.extend(new maps.LatLng(\n                v[0],\n                v[1],\n            ));\n        }));\n        map.fitBounds(bounds);\n    };\n    renderPolylines = (map, maps, fitToBoundsOnly) => {\n        function geodesicPolyline(polyline_, m, color) {\n            const poly = polyline.decode(polyline_)\n            for (let i = 0; i < poly.length; i++)\n                m.push({\n                    lat: poly[i][0],\n                    lng: poly[i][1],\n                });\n            if (!fitToBoundsOnly) {\n                let geodesicPolyliner = new maps.Polyline({\n                    path: m,\n                    options: {\n                        strokeColor: color,\n                        strokeOpacity: 1,\n                        strokeWeight: 4,\n                    },\n                })\n                geodesicPolyliner.setMap(map);\n            }\n        };\n        const { polylines } = this.state.currentData;\n        let markers1 = [], markers2 = [], markers3 = [];\n\n        if (polylines?.firstLeg)\n            geodesicPolyline(polylines?.firstLeg, markers1, colors.GREEN);\n        if (polylines?.secondLeg)\n            geodesicPolyline(polylines?.secondLeg, markers2, colors.BLUE);\n        if (polylines?.thirdLeg)\n            geodesicPolyline(polylines?.thirdLeg, markers3, colors.PURPLE);\n\n        let newArray = [...markers1, ...markers2, ...markers3];\n        this.getMapBounds(map, maps, newArray.map(v => { return [v.lat, v.lng] }))\n\n    };\n    renderDriverMarkers = (tripDetails) => {\n        let driverMarkers = [];\n        for (let key in tripDetails) {\n            let image = '';\n            switch (key) {\n                case '_1': { image = '/greenCarIcon.svg'; } break;\n                case '_2': { image = '/blueCarIcon.svg'; } break;\n                case '_3': { image = '/purpleCarIcon.svg'; } break;\n            };\n            driverMarkers.push(\n                <img\n                    key={key}\n                    lat={tripDetails[key].location.latitude}\n                    lng={tripDetails[key].location.longitude}\n                    src={image}\n                    className={styles.mapIcon}\n                />);\n        };\n        return driverMarkers;\n    };\n    render() {\n        let results = [];\n        const keys = Object.keys(this.state.result).sort((a, b) => b - a);\n        for (let k = 0; k < keys.length; k++) {\n            const data = this.state.result[k];\n            const { startAt } = data;\n            const displayDate = formatDateAllValues(new Date(startAt.year, M.indexOf(startAt.month), startAt.day, startAt.hour, startAt.min, startAt.sec))\n            results.push(\n                <>\n                    <div className={styles.previousMessageSum} onClick={() => {\n                        this.setState({ currentData: data })\n                    }}>\n                        <div style={{ width: '90px', height: '30px', backgroundColor: data.canceller == 'rider' ? colors.GREEN : colors.BLUE, borderRadius: '5px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                            <p className={styles.readOrUnreadText} style={{ color: '#ffffff', fontFamily: 'Gilroy-ExtraBold' }}>{data.canceller == 'rider' ? 'Rider' : 'Driver'}</p>\n                        </div>\n                        <p style={{ fontSize: '105%', fontFamily: 'Gilroy-Bold', color: colors.GREEN }}>\n                            {/* {`$ ${data.cost.total}   `}-  */}\n                            <span style={{ color: colors.GREY }}>{displayDate}</span></p>\n                    </div>\n                    {\n                        k == keys.length - 1 ?\n                            <></> :\n                            <div className={styles.sharedLine} style={{ marginTop: '5px' }}></div>\n                    }\n                </>\n            )\n        };\n\n        const defaultProps = {\n            center: {\n                lat: 53.631611,\n                lng: -113.323975\n            },\n            zoom: 11\n        };\n\n        return (\n            <div className={styles.cont}>\n                {\n                    this.state.currentData ?\n                        <>\n                            <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                                <p className={styles.title} style={{ color: colors.BLACK }}>Cancelled Trip</p>\n                                <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '20px' }}>\n                                </div>\n                                <div className={styles.mapBox}>\n                                    <div className={styles.mapBoxCenter}\n                                        onClick={() => {\n                                            this.renderPolylines(this.map.map_, this.map.maps_, true);\n                                        }}\n                                    >\n                                        <BiCurrentLocation color={colors.GREEN} size={25} />\n                                    </div>\n                                    <GoogleMapReact\n                                        ref={(map) => this.map = map}\n                                        bootstrapURLKeys={{ key: this.state.key }}\n                                        defaultCenter={defaultProps.center}\n                                        defaultZoom={defaultProps.zoom}\n                                        options={{\n                                            fullscreenControl: false,\n                                            disableDefaultUI: true,\n                                        }}\n                                        onGoogleApiLoaded={({ map, maps }) => this.renderPolylines(map, maps)}\n                                    >\n                                        {this.state.currentData.userLocation &&\n                                            <img\n                                                lat={this.state.currentData.userLocation.latitude}\n                                                lng={this.state.currentData.userLocation.longitude}\n                                                src={'/userIcon.svg'}\n                                                className={styles.mapIcon}\n                                            />}\n                                        {this.renderDriverMarkers(this.state.currentData.tripDetails)}\n                                    </GoogleMapReact>\n                                    <p className={styles.text} style={{ color: colors.GREY }}>\n                                        Breakdown of trip cancellation\n                                    </p>\n                                    <div className={styles.breakdownSpreadApart}>\n                                        <p>Canceller</p>\n                                        <div style={{ width: '90px', height: '30px', backgroundColor: this.state.currentData.canceller == 'rider' ? colors.GREEN : colors.BLUE, borderRadius: '5px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                            <p className={styles.readOrUnreadText} style={{ color: '#ffffff', fontFamily: 'Gilroy-ExtraBold' }}>{this.state.currentData.canceller == 'rider' ? 'Rider' : 'Driver'}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className={styles.enterKilometerDiv} style={{ marginTop: '20px', marginBottom: '150px', marginLeft: '2.5%', width: '95%' }}>\n                                <div\n                                    className={styles.button2}\n                                    style={{ backgroundColor: colors.RED }}\n                                    id={styles.buttonBottom}\n                                    onClick={() => { this.setState({ currentData: null }) }}>\n                                    <p className={styles.buttonText1}>Cancel</p>\n                                </div>\n                                <div\n                                    className={styles.button2}\n                                    style={{ backgroundColor: colors.GREEN }}\n                                    id={styles.buttonBottom}\n                                    onClick={() => {\n\n                                    }}>\n                                    <p className={styles.buttonText1}>Refund Amount</p>\n                                </div>\n                            </div>\n                        </>\n                        :\n                        <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                            <p className={styles.title} style={{ color: colors.BLACK }}>Cancelled Trips</p>\n                            <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '20px' }}>\n                                {/* <input\n                            type=\"text\"\n                            placeholder=\"Search riders by email / userID\"\n                            className={styles.searchInput}\n                            style={{ width: '48%' }}\n                            value={this.state.idRiderSearch}\n                            onChange={event => {\n                                this.setState({ idRiderSearch: event.target.value });\n                            }}\n                        />\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search drivers by email / userID\"\n                            className={styles.searchInput}\n                            style={{ width: '48%' }}\n                            value={this.state.idRiderSearch}\n                            onChange={event => {\n                                this.setState({ idRiderSearch: event.target.value });\n                            }}\n                        /> */}\n                            </div>\n\n                            {results}\n\n                        </div>}\n            </div>\n        );\n    };\n};"]},"metadata":{},"sourceType":"module"}