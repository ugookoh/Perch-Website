{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from 'firebase';\nimport Router from 'next/router';\nimport axios from 'axios';\nexport function signIn(email, password, type) {\n  this.setState({\n    error: false,\n    errorMessage: '',\n    loading: true\n  }, () => {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL).then(() => {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n        if (type == 'user') {\n          const userID = firebase.auth().currentUser.uid;\n          firebase.database().ref(`users/${userID}`).once('value', snapshot => {\n            if (snapshot.val().summarizedHistory.phoneVerified == true) Router.push('/s/db/udash').then(() => window.scrollTo(0, 0));else this.setState({\n              displayVerification: true,\n              loading: false,\n              userDetails: snapshot.val(),\n              error: false\n            }, () => {\n              //send a verification phonenumber\n              sendVerification(userID, 'phoneNumber', 'storeAndSend', 'nocode', snapshot.val().phoneNumber, snapshot.val().email, snapshot.val().firstName);\n              firebase.auth().signOut().catch(error => {\n                console.log(error.message);\n              });\n            });\n          }).catch(error => {\n            this.setState({\n              error: true,\n              errorMessage: error.message,\n              loading: false\n            });\n          });\n        } else if (type == 'driver') {\n          const userID = firebase.auth().currentUser.uid;\n          firebase.database().ref(`users/${userID}`).once('value', snapshot => {\n            if (snapshot.val().summarizedHistory.phoneVerified == true && snapshot.val().summarizedHistory.emailVerified == true) firebase.database().ref(`users/${userID}/driverVerified`).once('value', snap => {\n              if (snap.val() == 'VERIFIED') Router.push('/s/db/ddash').then(() => window.scrollTo(0, 0));else Router.push('/s/db/d_app_dash').then(() => window.scrollTo(0, 0));\n            }).catch(error => {\n              console.log(error.message);\n            });else {\n              this.setState({\n                displayVerification: true,\n                loading: false,\n                userDetails: snapshot.val(),\n                phoneVerified: snapshot.val().summarizedHistory.phoneVerified,\n                emailVerified: snapshot.val().summarizedHistory.emailVerified,\n                error: false\n              }, () => {\n                //send an email or phonenumber verification\n                if (!snapshot.val().summarizedHistory.phoneVerified) sendVerification(userID, 'phoneNumber', 'storeAndSend', 'nocode', snapshot.val().phoneNumber, snapshot.val().email, snapshot.val().firstName);\n                if (!snapshot.val().summarizedHistory.emailVerified) sendVerification(userID, 'email', 'storeAndSend', 'nocode', snapshot.val().phoneNumber, snapshot.val().email, snapshot.val().firstName);\n                firebase.auth().signOut().catch(error => {\n                  console.log(error.message);\n                });\n              });\n            }\n          }).catch(error => {\n            console.log(error.message);\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          error: true,\n          errorMessage: error.message,\n          loading: false\n        });\n      });\n    }).catch(error => {\n      this.setState({\n        error: true,\n        errorMessage: error.message,\n        loading: false\n      });\n    });\n  });\n}\n;\nexport function adminSignIn(email, password) {\n  this.setState({\n    error: false,\n    errorMessage: '',\n    loading: true\n  }, () => {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL).then(() => {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n        const userID = firebase.auth().currentUser.uid;\n        firebase.database().ref(`adminAuthorized/${userID}`).once('value', snapshot => {\n          if (snapshot.val()) Router.push('/admin/dash').then(() => window.scrollTo(0, 0));else this.setState({\n            error: true,\n            errorMessage: 'You do not have access to this portion of the site. Please contact us for help. Excess unauthorized logins might result in an IP block.',\n            loading: false\n          }, () => {\n            firebase.auth().signOut().catch(error => {\n              console.log(error.message);\n            });\n          });\n        }).catch(error => {\n          console.log(error.message);\n        });\n      }).catch(error => {\n        this.setState({\n          error: true,\n          errorMessage: error.message,\n          loading: false\n        });\n      });\n    }).catch(error => {\n      this.setState({\n        error: true,\n        errorMessage: error.message,\n        loading: false\n      });\n    });\n  });\n}\n;\nexport function signUp(firstName, lastName, email, countryCode, phoneNumber, password, isDriver, referralCode) {\n  this.setState({\n    error: false,\n    errorMessage: '',\n    loading: true\n  }, () => {\n    axios.post(`https://us-central1-perch-01.cloudfunctions.net/checkIfPhoneNumberIsFree`, {\n      phoneNumber: `+${countryCode}${phoneNumber}`\n    }).then(r => {\n      if (r.data) {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(() => {\n          const userID = firebase.auth().currentUser.uid;\n          axios.post('https://us-central1-perch-01.cloudfunctions.net/createUserDetails', {\n            firstName: firstName,\n            lastName: lastName,\n            email: email,\n            phoneNumber: `+${countryCode}${phoneNumber}`,\n            userID: userID,\n            isDriver: isDriver,\n            referralCode: referralCode\n          }).then(() => {\n            firebase.database().ref(`users/${userID}`).once('value', snapshot => {\n              firebase.auth().signOut().catch(error => {\n                console.log(error.message);\n              });\n              this.setState({\n                displayVerification: true,\n                loading: false,\n                error: false,\n                userDetails: snapshot.val()\n              });\n            }).catch(error => {\n              this.setState({\n                error: true,\n                errorMessage: error.message\n              });\n            });\n          }).catch(error => {\n            this.setState({\n              errorMessage: error.message,\n              loading: false\n            });\n          });\n        }).catch(error => {\n          this.setState({\n            error: true,\n            errorMessage: error.message,\n            loading: false\n          });\n        });\n      } else this.setState({\n        error: true,\n        errorMessage: 'This phone number is currently registered with another account, contact us for help',\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        error: true,\n        errorMessage: error.message,\n        loading: false\n      });\n    });\n  });\n}\n;\nexport function signOut(doNotReroute) {\n  firebase.auth().signOut().then(() => {\n    if (!doNotReroute) Router.push('/');\n  }).catch(error => {\n    console.log(error.message);\n  });\n}\n;\nexport function sendVerification(userID, type, action, code, phoneNumber, email, name) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/sendVerificationCode`, {\n    userID: userID,\n    type: type,\n    action: action,\n    code: code,\n    phoneNumber: phoneNumber,\n    email: email,\n    name: name\n  }).then(r => {\n    const result = r.data;\n\n    if (action == 'check') {\n      if (result) {\n        if (type == 'phoneNumber') this.setState({\n          phoneVerified: true,\n          verificationPhoneLoader: false\n        });else if (type == 'email') this.setState({\n          emailVerified: true,\n          verificationEmailLoader: false\n        });\n      } else {\n        if (type == 'phoneNumber') this.setState({\n          verificationPhoneLoader: false\n        });else if (type == 'email') this.setState({\n          verificationEmailLoader: false\n        });\n        this.setState({\n          error: true,\n          errorMessage: 'The verification code was not correct. Please check again or click resend.'\n        });\n      }\n    }\n  }); //.catch((error) => { this.setState({ error: true, errorMessage: error.message }) })\n}\n;\nexport function changeEmailOrPhoneNumber(type, userID, phoneNumber, email) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/changeEmailOrPhoneNumber`, {\n    userID: userID,\n    email: email,\n    type: type,\n    phoneNumber: phoneNumber\n  }).then(r => {\n    this.setState({\n      userDetails: r.data,\n      changeEmail_PhoneNumber: false,\n      error: false,\n      errorMessage: '',\n      changeEmailLoader: false,\n      changePhoneLoader: false\n    });\n  }).catch(error => {\n    this.setState({\n      error: true,\n      errorMessage: `${error.message}, this field might already be in use by another user`\n    });\n  });\n}\n;\nexport function sendFeedback() {\n  if (this.state.topic == 'unselected') this.setState({\n    errorMessage: 'A topic is needed. Please pick a topic to contact us about. If you do not have one, please pick \"Other\"'\n  });else if (this.state.message == '') this.setState({\n    errorMessage: 'Please enter a message'\n  });else {\n    this.setState({\n      loading: true\n    }, () => {\n      if (this.state.userDetails) {\n        const ref = this.state.userDetails.driverID ? `driverFeedback/${this.state.userDetails.driverID}` : `userFeedback/${this.state.userDetails.userID}`;\n        firebase.database().ref(ref).update({\n          [new Date().getTime()]: {\n            body: this.state.message,\n            subject: this.state.topic,\n            status: 'UNPROCESSED',\n            date: getDate(),\n            timestamp: new Date().getTime()\n          }\n        }).then(() => {\n          this.setState({\n            topic: 'unselected',\n            message: '',\n            loading: false\n          }, () => {\n            this.loadResult();\n          });\n        }).catch(error => {\n          console.log(error.message);\n        });\n      } else axios.post(`https://us-central1-perch-01.cloudfunctions.net/guestSendFeedback`, {\n        body: this.state.message,\n        subject: this.state.topic,\n        status: 'UNPROCESSED',\n        date: getDate(),\n        email: this.state.userEmail,\n        timestamp: new Date().getTime(),\n        nonUser: true,\n        case: 'send'\n      }).then(() => {\n        this.setState({\n          topic: 'unselected',\n          message: '',\n          loading: false\n        });\n      }).catch(error => {\n        console.log(error.message);\n      });\n    });\n  }\n}\n;\nexport function changePassword(email_, oldPassword, newPassword) {\n  this.setState({\n    loading: true\n  }, () => {\n    const email = email_;\n    const password = oldPassword;\n    firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n      firebase.auth().currentUser.updatePassword(newPassword).then(() => {\n        this.setState({\n          loading: false,\n          toShow: 'default',\n          currentPassword: '',\n          newPassword: '',\n          confirmNewPassword: ''\n        });\n      }).catch(error => this.setState({\n        errorMessage: error.message,\n        loading: false,\n        newPassword: '',\n        confirmNewPassword: ''\n      }));\n    }).catch(error => this.setState({\n      errorMessage: error.message,\n      loading: false,\n      newPassword: '',\n      confirmNewPassword: ''\n    }));\n  });\n}\n;\nexport function deleteAccount(email, password) {\n  this.setState({\n    loading: true\n  }, () => {\n    firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n      const user = firebase.auth().currentUser;\n      const userID = user.uid;\n      user.delete().then(() => {\n        axios.post(`https://us-central1-perch-01.cloudfunctions.net/deleteUser`, {\n          deleteAccountReason: this.state.deleteAccountReason,\n          userDetails: this.state.userDetails\n        }).catch(error => {\n          alert(error.message);\n        });\n      }).catch(error => this.setState({\n        errorMessage: error.message,\n        loading: false,\n        password1: ''\n      }));\n    }).catch(error => this.setState({\n      errorMessage: error.message,\n      loading: false,\n      password1: ''\n    }));\n  });\n}\n;\nexport function sendPasswordResetLink(email) {\n  firebase.auth().sendPasswordResetEmail(email).then(() => {\n    this.setState({\n      error: false,\n      errorMessage: '',\n      forgotPassword: false\n    });\n  }).catch(error => {\n    this.setState({\n      error: true,\n      errorMessage: error.message\n    });\n  });\n}\n;\nexport function sendEmail(name, email, type, subject) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/sendVerificationEmail`, {\n    name: name,\n    email: email,\n    type: type,\n    subject: subject\n  }).catch(error => {\n    console.log(error.message);\n  });\n}\n;\nexport function resetPassword(code, newPassword, email) {\n  this.setState({\n    errorMessage: '',\n    loading: true\n  }, () => {\n    firebase.auth().confirmPasswordReset(code, newPassword).then(() => {\n      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL).then(() => {\n        firebase.auth().signInWithEmailAndPassword(email, newPassword).then(() => {\n          const userID = firebase.auth().currentUser.uid;\n          firebase.database().ref(`users/${userID}/firstName`).once('value', snap => {\n            sendEmail(snap.val(), email, 'passwordHasBeenReset', 'Password has been reset');\n          }).catch(error => {\n            console.log(error.message);\n          });\n        }).catch(error => {\n          console.log(error.message);\n        });\n      }).catch(error => {\n        console.log(error.message);\n      });\n      Router.push('/'); //send an email that password has been set \n    }).catch(() => {\n      this.setState({\n        errorMessage: 'The link is no longer valid, please go to the login page and request a new password reset link',\n        loading: false\n      });\n    });\n  });\n}\n;\nexport function validateVehicle(userID, timestamp, dateFormat) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/validateVehicle`, {\n    userID: userID,\n    timestamp: timestamp,\n    dateFormat: dateFormat\n  }).catch(error => {\n    alert(error.message);\n  });\n}\n;\nexport function replyFeedback(response, riderOrDriver, senderID, timestamp) {\n  const ref = riderOrDriver == 'Rider' ? `userFeedback/${senderID}/${timestamp}` : `driverFeedback/${senderID}/${timestamp}`;\n  const nonUser = this.state.toShow.nonUser;\n  if (nonUser) axios.post(`https://us-central1-perch-01.cloudfunctions.net/guestSendFeedback`, {\n    email: this.state.toShow.email,\n    subject: `Re:[${this.state.toShow.subject}]`,\n    response: response,\n    case: 'reply'\n  }).catch(error => {\n    alert(error.message);\n  });\n  firebase.database().ref(ref).update({\n    response: response,\n    status: 'PROCESSED',\n    responseDate: getDate()\n  }).then(() => {\n    this.setState({\n      responseDate: new Date().getTime(),\n      showResponse: true\n    });\n  }).catch(error => {\n    alert(error.message);\n  });\n}\n;\nexport function sendUserEmail(email, subject, text) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/sendEmail`, {\n    email: email,\n    subject: subject,\n    text: text\n  }).then(() => {\n    this.setState({\n      email: '',\n      subject: '',\n      text: '',\n      loading: false\n    });\n  }).catch(error => {\n    alert(error.message);\n    this.setState({\n      loading: false\n    });\n  });\n}\nexport function validateDriver(userID, timestamp, dateFormat) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/validateDriver`, {\n    userID: userID,\n    timestamp: timestamp,\n    dateFormat: dateFormat\n  }).then(() => {\n    this.loadResult();\n    this.setState({\n      showDocs: false,\n      vehicle: {},\n      verified: []\n    });\n  }).catch(error => {\n    alert(error.message);\n  });\n}\n; //MAKE A RANDOMID\n\nexport function makeid(length) {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}\n;\nexport function driverApplicationAdvance(uID, dateFormat, maxSeatNumber) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/vehicleMaxSeatNumber`, {\n    userID: uID,\n    dateFormat: dateFormat,\n    maxSeatNumber: maxSeatNumber\n  }).then(() => {\n    const {\n      selected\n    } = this.state;\n\n    switch (selected.stage) {\n      case 'three':\n        {\n          firebase.database().ref(`driverApplications/${selected.userID}`).update({\n            progress: JSON.stringify([\"done\", \"done\", \"done\", \"ongoing\", \"undone\"]),\n            stage: \"four\"\n          }).then(() => {\n            //MAKE ARRANGEMENTS TO SEND DRIVER AN OFFER LETTER\n            this.setState({\n              showDocs: false\n            }, () => {\n              this.loadResult();\n            });\n          }).catch(error => {\n            alert(error.message);\n          });\n        }\n        break;\n\n      case 'four':\n        {\n          //THE INDEPENNDENT CONTRACTOR DOCUMENT HAS BEEN SIGNED AND WE ARE GOOD TO GO\n          firebase.database().ref(`driverApplications/${selected.userID}`).update({\n            progress: JSON.stringify([\"done\", \"done\", \"done\", \"done\", \"done\"]),\n            stage: \"five\"\n          }).then(() => {\n            this.setState({\n              showDocs: false\n            }, () => {\n              this.loadResult();\n            });\n          }).catch(error => {\n            alert(error.message);\n          });\n        }\n        break;\n    }\n\n    ;\n  }).catch(error => console.log(error.message));\n}\nexport function getDate() {\n  const DAY = new Date().getDate();\n  const MONTH = new Date().getMonth();\n  const YEAR = new Date().getFullYear();\n  const HOUR = new Date().getHours();\n  const MIN = new Date().getMinutes();\n  const SECOND = new Date().getSeconds();\n  return `${YEAR}-${MONTH}-${DAY}-${HOUR}-${MIN}-${SECOND}`;\n}\n;\nexport function dateformat(time) {\n  let slash1 = 0,\n      slash2 = 0,\n      slash3 = 0;\n\n  for (let k = 0; k < time.length; k++) {\n    if (time.charAt(k) == '-') slash1 == 0 ? slash1 = k : slash2 == 0 ? slash2 = k : slash3 = k;\n    if (slash3 != 0) break;\n  }\n\n  ;\n  const y = time.substring(0, slash1);\n  const m = time.substring(slash1 + 1, slash2);\n  const d = time.substring(slash2 + 1, slash3);\n  return `${d}/${Number(m) + 1}/${y}`;\n}\n;\nexport function polylineLenght(data) {\n  let distance = 0;\n\n  for (let k = 0; k < data.length - 1; k++) distance += distanceCalculator(data[k][0], data[k][1], data[k + 1][0], data[k + 1][1]);\n\n  return distance;\n}\n;\nexport function timeAndDate(time, month, year) {\n  let slash1 = 0,\n      slash2 = 0,\n      slash3 = 0;\n\n  for (let k = 0; k < time.length; k++) {\n    if (time.charAt(k) == '-') slash1 == 0 ? slash1 = k : slash2 == 0 ? slash2 = k : slash3 = k;\n  }\n\n  const HOUR = Number(time.substring(slash1 + 1, slash2)) == 0 ? 12 : Number(time.substring(slash1 + 1, slash2)) > 12 ? Number(time.substring(slash1 + 1, slash2)) - 12 : Number(time.substring(slash1 + 1, slash2));\n  const MIN = Number(time.substring(slash2 + 1, slash3)) < 10 ? `0` + time.substring(slash2 + 1, slash3) : Number(time.substring(slash2 + 1, slash3));\n  const MERIDIAN = Number(time.substring(slash1 + 1, slash2)) < 12 ? 'AM' : 'PM';\n  const DAY = time.substring(0, slash1);\n  const MONTH = M.indexOf(month) + 1;\n  const formattedDate = `${DAY}/${MONTH}/${year}, ${HOUR}:${MIN} ${MERIDIAN}`;\n  return formattedDate;\n}\n;\nexport function distanceCalculator(lat1, lon1, lat2, lon2) {\n  let R = 6371 * 1000; // Radius of the earth in m\n\n  let dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n  let dLon = deg2rad(lon2 - lon1);\n  let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  let d = R * c; // Distance in m\n\n  return d;\n}\n;\nexport function emailFormat(email, type) {\n  //@ is stored as -(hyphen)\n  //. is stored as _(underscore)\n  switch (type) {\n    case 'emailToString':\n      {\n        return email.replace('@', '-').replace('.', '_');\n      }\n      break;\n\n    case 'stringToEmail':\n      {\n        return email.replace('-', '@').replace('_', '.');\n      }\n      break;\n  }\n}\n;\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\n;\n\nfunction formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n\n;\nexport function dateOfQuery(timestamp) {\n  return `${formatAMPM(new Date(timestamp)).toUpperCase()} ${('0' + new Date(timestamp).getDate()).slice(-2)}/${('0' + (new Date(timestamp).getMonth() + 1)).slice(-2)}/${new Date(timestamp).getFullYear()}`;\n}\n;\nexport const M = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nexport const colors = {\n  GREEN: \"#4EB848\",\n  WHITE: \"#FFFFFF\",\n  GREY: \"#959AAC\",\n  BLACK: \"#000000\",\n  RED: \"#FF0000\",\n  BLUE_TEXT: \"#284ED6\",\n  BLUE: \"#1970A7\",\n  PURPLE: \"#A031AF\",\n  YELLOW: \"#F0E23D\",\n  GOLD: \"#FFAA00\"\n};\nexport function isNumber(n) {\n  return !isNaN(parseFloat(n)) && !isNaN(n - 0);\n}\n;\nexport function deleteCard(userID, last4, selected) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/deleteStripeCard`, {\n    userID: userID,\n    last4: last4,\n    selected: selected\n  }).catch(error => {\n    console.log(error.message);\n  });\n}\n;\nexport function storeCard(userID, cardObject, setLoading, setErrorMessage, cancel) {\n  let c = cardObject;\n  c.card.cardId = cardObject.card.id;\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/storeStripeCard`, {\n    userID: userID,\n    cardObject: c\n  }).then(() => {\n    cancel();\n  }).catch(error => {\n    setLoading(false);\n    setErrorMessage(error.message);\n  });\n}\n;\nexport function buyKilometers(toSend) {\n  this.setState({\n    paymentLoading: true\n  }, () => {\n    axios.post(`https://us-central1-perch-01.cloudfunctions.net/buyPerchKilometers`, _objectSpread(_objectSpread({}, toSend), {}, {\n      status: 'initial'\n    })).then(result => {\n      const {\n        status,\n        client_secret,\n        id\n      } = result.data;\n      toSend.paymentIntentId = id;\n      toSend.status = 'confirm_payment';\n\n      if (status == 'succeeded') {\n        this.setState({\n          paymentCompleted: true\n        });\n      } else if (status == 'requires_action') {\n        stripe.authenticatePaymentIntent({\n          clientSecret: client_secret\n        }).then(data => {\n          if (data.status == 'requires_confirmation') {\n            axios.post(`https://us-central1-perch-01.cloudfunctions.net/buyPerchKilometers`, _objectSpread(_objectSpread({}, toSend), {}, {\n              paymentIntentId: id,\n              status: 'confirm_payment'\n            })).then(result_ => {\n              const status_ = result_.data.status;\n\n              if (status_ == 'succeeded') {\n                this.setState({\n                  paymentCompleted: true\n                });\n              }\n            }).catch(error => {\n              this.setState({\n                paymentError: true,\n                paymentErrorMessage: error.message\n              });\n            });\n          }\n        }).catch(error => {\n          this.setState({\n            paymentError: true,\n            paymentErrorMessage: error.message\n          });\n        });\n      }\n    }).catch(error => {\n      this.setState({\n        paymentError: true,\n        paymentErrorMessage: error.message\n      });\n    });\n  });\n}\n;\nexport function formatDateAllValues(d) {\n  return d.getFullYear().toString() + \"/\" + ((d.getMonth() + 1).toString().length == 2 ? (d.getMonth() + 1).toString() : \"0\" + (d.getMonth() + 1).toString()) + \"/\" + (d.getDate().toString().length == 2 ? d.getDate().toString() : \"0\" + d.getDate().toString()) + \" - \" + formatAMPM(d).toUpperCase();\n}\n;\nexport function millisToMinutesAndSeconds(millis) {\n  var minutes = Math.floor(millis / 60000);\n  var seconds = (millis % 60000 / 1000).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n}\n;\nexport function cancelledTripResolver(toSend) {\n  axios.post(`https://us-central1-perch-01.cloudfunctions.net/cancelledTripResolver`, toSend).then(() => {\n    let newResult = this.state.result;\n    delete newResult[toSend.cancelled_UNRESOLVED_KEY];\n    this.setState({\n      currentData: null,\n      refundRiderAmount: '',\n      refundRiderPerchKms: '',\n      payFirstDriver: '',\n      paySecondDriver: '',\n      payThirdDriver: '',\n      adminCut: '',\n      result: newResult,\n      loading: false\n    });\n  }).catch(error => {\n    alert(error.message);\n  });\n}\n;\nexport function pendingProcessesFunction(toSend) {\n  this.setState({\n    loading: true,\n    errorMessage: ''\n  }, () => {\n    axios.post(`https://us-central1-perch-01.cloudfunctions.net/pendingProcesses`, toSend).then(data => {\n      let newV = toSend.isNewProcess ? [] : this.state.listOfProcesses;\n      const time = new Date().getTime();\n      newV.push({\n        title: toSend.title,\n        details: toSend.details,\n        timeCreated: time\n      });\n      this.setState({\n        addProcess: false,\n        isNewProcess: false,\n        viewList: true,\n        pushId: data.data,\n        title: '',\n        details: '',\n        loading: false,\n        listOfProcesses: newV\n      }, () => {\n        if (toSend.isNewProcess) this.setState({\n          timeCreated: time\n        });\n      });\n    }).catch(error => {\n      alert(error.message);\n    });\n  });\n}\n;\nexport function pendingProcessesFunctionDelete(pushId) {\n  this.setState({\n    loading1: true\n  }, () => {\n    axios.post(`https://us-central1-perch-01.cloudfunctions.net/pendingProcessesDelete`, {\n      pushId: pushId\n    }).then(() => {\n      let newV = _objectSpread({}, this.state.result);\n\n      delete newV[pushId];\n      this.setState({\n        result: newV,\n        loading1: false,\n        addProcess: false,\n        isNewProcess: false,\n        viewList: false,\n        pushId: '',\n        userID: '',\n        type: '',\n        listOfProcesses: [],\n        mainTopic: '',\n        title: '',\n        details: '',\n        errorMessage: ''\n      });\n    }).catch(error => {\n      alert(error.message);\n    });\n  });\n}\n;\nexport function adminDeleteUser(userDetails) {\n  this.setState({\n    loading1: true\n  }, () => {\n    axios.post(`https://us-central1-perch-01.cloudfunctions.net/deleteUser`, {\n      userDetails: userDetails,\n      adminDelete: true\n    }).then(() => {\n      this.setState({\n        idSearch: '',\n        result: null,\n        loading: false,\n        loading1: false,\n        deleteUser: false,\n        analytics: {}\n      });\n    }).catch(error => {\n      console.log(error.message);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}