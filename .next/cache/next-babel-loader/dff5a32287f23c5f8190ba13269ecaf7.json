{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { AiOutlineClose, AiOutlineRight } from 'react-icons/ai';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, storeCard, deleteCard, buyKilometers } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport { loadStripe } from '@stripe/stripe-js';\nimport Loader from 'react-loader-spinner';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst stripePromise = loadStripe('pk_test_RjADdW2vGwFAgOOk7ws1juNB002JV727O8');\nexport default class PerchWallet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"loadCards\", () => {\n      const {\n        userID\n      } = this.state.userDetails;\n      firebase.database().ref(`cards/${userID}`).once('value', snapshot => {\n        if (!!snapshot) {\n          let arrayOfLast4 = [],\n              i = 0;\n\n          for (let key in snapshot.val()) {\n            if (key != 'selected') arrayOfLast4[i] = {\n              last4: snapshot.val()[key].card.last4,\n              brand: snapshot.val()[key].card.brand,\n              cardId: snapshot.val()[key].card.cardId\n            };else if (key == 'selected') this.setState({\n              selected: snapshot.val()[key]\n            });\n            i++;\n          }\n\n          this.setState({\n            cards: arrayOfLast4\n          });\n        }\n\n        ;\n      });\n    });\n\n    _defineProperty(this, \"setSelected\", value => {\n      const {\n        userID\n      } = this.state.userDetails;\n      firebase.database().ref(`cards/${userID}`).update({\n        selected: value\n      }).then(() => {\n        this.setState({\n          selected: value\n        });\n      }).catch(error => {\n        this.setState({\n          errorMessage: error.message\n        });\n      });\n    });\n\n    _defineProperty(this, \"removeCard\", index => {\n      let {\n        cards\n      } = this.state;\n      cards.splice(index, 1);\n      this.setState({\n        cards: cards\n      });\n    });\n\n    this.state = {\n      buyKilometers: true,\n      //false,\n      addCard: false,\n      userDetails: this.props.userDetails,\n      quantity: 0,\n      cards: [],\n      selected: null,\n      name: '',\n      cardNumber: '',\n      expiryDate: '',\n      ccv: '',\n      errorMessage: '',\n      loading: false,\n      rate: 0,\n      kms: '',\n      cost: 0,\n      paymentLoading: false,\n      paymentCompleted: false,\n      paymentError: false,\n      paymentErrorMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    const {\n      userID\n    } = this.state.userDetails;\n    firebase.database().ref(`perchKilometers/${userID}/quantity`).on('value', snapshot => {\n      if (!!snapshot) this.setState({\n        quantity: snapshot.val()\n      });\n    });\n    firebase.database().ref(`costPerPerchKM`).on('value', snapshot => {\n      this.setState({\n        rate: snapshot.val()\n      });\n    });\n    this.loadCards();\n  }\n\n  render() {\n    var _this$state$rate, _this$state$cost;\n\n    let cards = [];\n\n    for (let i = 0; i < this.state.cards.length; i++) cards.push( /*#__PURE__*/_jsx(PaymentCard, {\n      userID: this.state.userDetails.userID,\n      card: this.state.cards[i],\n      index: i,\n      removeCard: this.removeCard,\n      setSelected: this.setSelected,\n      selectedCard: this.state.selected,\n      selected: this.state.selected === this.state.cards[i].last4,\n      type: this.state.buyKilometers ? 'pickPayment' : 'listOfCards'\n    }, this.state.cards[i].last4));\n\n    return /*#__PURE__*/_jsx(Elements, {\n      stripe: stripePromise,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: styles.cont,\n        children: this.state.buyKilometers ? //buy kilometers\n        this.state.paymentLoading ? /*#__PURE__*/_jsx(_Fragment, {\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [!this.state.paymentCompleted && /*#__PURE__*/_jsx(Loader, {\n              type: \"TailSpin\",\n              color: colors.GREEN,\n              height: '100px',\n              width: '100px',\n              style: {\n                marginTop: 25\n              }\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.GREY,\n                width: 'initial',\n                marginTop: 20,\n                marginBottom: 30,\n                paddingRight: 15,\n                paddingLeft: 15,\n                textAlign: 'center'\n              },\n              children: this.state.paymentCompleted ? `Your payment has been processed. Thank you.` : this.state.paymentError ? `Your payment failed. ${this.state.paymentErrorMessage} ` : `Your payment is currently processing. Please wait.`\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.button1,\n              style: {\n                marginTop: 0\n              },\n              onClick: () => {\n                this.setState({\n                  buyKilometers: false,\n                  addCard: false,\n                  errorMessage: '',\n                  paymentError: false,\n                  paymentErrorMessage: '',\n                  paymentCompleted: false,\n                  paymentLoading: false\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Go back\"\n              })\n            })]\n          })\n        }) : /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Enter the amount of kilometers you would like to purchase\"\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter amount of kilometers\",\n              value: this.state.kms,\n              onChange: e => {\n                const value = e.target.value;\n\n                if (value.length <= 3) {\n                  const cost = Number(value) * this.state.rate;\n                  this.setState({\n                    kms: value,\n                    cost: cost\n                  });\n                }\n              },\n              className: styles.inputPaymentPanel\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.enterKilometerDiv,\n              style: {\n                marginTop: '20px'\n              },\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Medium',\n                  color: colors.GREY\n                },\n                className: styles.text,\n                children: \"Cost per kilometer\"\n              }), /*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Medium'\n                },\n                className: styles.text,\n                children: `$ ${(_this$state$rate = this.state.rate) === null || _this$state$rate === void 0 ? void 0 : _this$state$rate.toFixed(2)}`\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.sharedLine,\n              style: {\n                marginTop: '20px',\n                width: '90%'\n              }\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.enterKilometerDiv,\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Bold',\n                  fontSize: '120%'\n                },\n                className: styles.text,\n                children: \"Total\"\n              }), /*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Bold',\n                  color: colors.GREEN,\n                  fontSize: '120%'\n                },\n                className: styles.text,\n                children: `$ ${(_this$state$cost = this.state.cost) === null || _this$state$cost === void 0 ? void 0 : _this$state$cost.toFixed(2)}`\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Payment Methods\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                marginBottom: '20px'\n              },\n              children: \"List of available payment methods. New payment methods can also be added.\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.paymentCont,\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.paymentItem,\n                children: [cards, /*#__PURE__*/_jsxs(\"div\", {\n                  className: styles.paymentRow,\n                  id: styles.addCardPayment,\n                  children: [/*#__PURE__*/_jsxs(\"div\", {\n                    style: {\n                      flexDirection: 'row',\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"img\", {\n                      src: \"/PayPalLogo.svg\",\n                      alt: \"Perch Payment\",\n                      className: styles.visaIcon,\n                      style: {\n                        marginRight: '15px',\n                        marginLeft: '0px'\n                      }\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: styles.paymentCardNumber,\n                      id: styles.paymentCardNumber_,\n                      children: \"PayPal\"\n                    })]\n                  }), /*#__PURE__*/_jsx(AiOutlineRight, {\n                    color: colors.BLACK\n                  })]\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: styles.sharedLine,\n                  style: {\n                    marginTop: '0px',\n                    width: '100%'\n                  }\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: styles.paymentRow,\n                  id: styles.addCardPayment,\n                  onClick: () => {\n                    this.setState({\n                      addCard: true,\n                      buyKilometers: false,\n                      errorMessage: ''\n                    });\n                  },\n                  children: [/*#__PURE__*/_jsxs(\"div\", {\n                    style: {\n                      flexDirection: 'row',\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"img\", {\n                      src: \"/addPaymentCardIcon.svg\",\n                      alt: \"Perch Payment\",\n                      className: styles.visaIcon,\n                      style: {\n                        marginRight: '15px'\n                      }\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: styles.paymentCardNumber,\n                      id: styles.paymentCardNumber_,\n                      children: \"Add Debit / Credit Card\"\n                    })]\n                  }), /*#__PURE__*/_jsx(AiOutlineRight, {\n                    color: colors.BLACK\n                  })]\n                })]\n              })\n            }), this.state.errorMessage && /*#__PURE__*/_jsx(\"p\", {\n              className: styles.em,\n              style: {\n                textAlign: 'initial'\n              },\n              children: this.state.errorMessage\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.enterKilometerDiv,\n            style: {\n              marginTop: '20px',\n              marginBottom: '150px',\n              marginLeft: '2.5%',\n              width: '95%'\n            },\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.RED\n              },\n              id: styles.buttonBottom,\n              onClick: () => {\n                this.setState({\n                  buyKilometers: false,\n                  addCard: false,\n                  errorMessage: ''\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Cancel\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              onClick: () => {\n                if (this.state.kms < 20) this.setState({\n                  errorMessage: 'You can get a minimum of 20 kilometers'\n                });else if (this.state.kms > 100) this.setState({\n                  errorMessage: 'You can get a maximum of 100 kilometers'\n                });else buyKilometers.call(this, {\n                  cardId: this.state.cardDetails.card.cardId,\n                  customerID: this.state.userDetails.stripeCustomerID,\n                  quantity: Number(this.state.kms),\n                  userID: this.state.userDetails.userID,\n                  timestamp: new Date().getTime()\n                });\n              },\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.GREEN\n              },\n              id: styles.buttonBottom,\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Buy Kilometers\"\n              })\n            })]\n          })]\n        }) : this.state.addCard ?\n        /*#__PURE__*/\n        //add card\n        _jsx(_Fragment, {\n          children: /*#__PURE__*/_jsx(AddCardForm, {\n            userID: this.state.userDetails.userID,\n            cancel: () => {\n              this.loadCards();\n              this.setState({\n                errorMessage: '',\n                addCard: false,\n                buyKilometers: false\n              });\n            }\n          })\n        }) :\n        /*#__PURE__*/\n        //main page\n        _jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Kilometers\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY\n              },\n              children: \"You can make kilometer purchases from this panel. Also remeber that sharing your code with friends who book their first ride automatically gives you free kilometers.\"\n            }), /*#__PURE__*/_jsx(\"img\", {\n              src: \"/walletImage.svg\",\n              alt: \"Purchase Perch Kilometers\",\n              className: styles.walletImage\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                width: 'initial',\n                marginTop: '20px'\n              },\n              children: `${this.state.quantity.toFixed(1)} kilometers`\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.button1,\n              style: {},\n              onClick: () => {\n                this.setState({\n                  buyKilometers: true,\n                  addCard: false,\n                  errorMessage: ''\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Buy kilometers\"\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px',\n              marginBottom: '150px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Payment Methods\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                marginBottom: '20px'\n              },\n              children: \"List of available payment methods. New payment methods can also be added.\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.paymentCont,\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.paymentItem,\n                children: [cards, /*#__PURE__*/_jsxs(\"div\", {\n                  className: styles.paymentRow,\n                  id: styles.addCardPayment,\n                  onClick: () => {\n                    this.setState({\n                      addCard: true,\n                      buyKilometers: false,\n                      errorMessage: ''\n                    });\n                  },\n                  children: [/*#__PURE__*/_jsxs(\"div\", {\n                    style: {\n                      flexDirection: 'row',\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"img\", {\n                      src: \"/addPaymentCardIcon.svg\",\n                      alt: \"Perch Payment\",\n                      className: styles.visaIcon,\n                      style: {\n                        marginRight: '15px'\n                      }\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: styles.paymentCardNumber,\n                      id: styles.paymentCardNumber_,\n                      children: \"Add Debit / Credit Card\"\n                    })]\n                  }), /*#__PURE__*/_jsx(AiOutlineRight, {\n                    color: colors.BLACK\n                  })]\n                })]\n              })\n            })]\n          })]\n        })\n      })\n    });\n  }\n\n}\n;\n\nclass PaymentCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deleteCard: false,\n      loading: false\n    };\n  }\n\n  render() {\n    const {\n      selected,\n      setSelected,\n      card,\n      userID,\n      removeCard,\n      index,\n      selectedCard\n    } = this.props;\n    const {\n      last4,\n      brand\n    } = card;\n    if (this.props.type == 'listOfCards') return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.paymentRow,\n        id: styles.paymentRow_,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            flexDirection: 'row',\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg',\n            alt: \"Perch Payment\",\n            className: brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            className: styles.paymentCardNumber,\n            id: styles.paymentCardNumber_,\n            children: [\"XXXX XXXX XXXX \", last4]\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          id: styles.paymentRowButton,\n          children: this.state.deleteCard ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.RED,\n                width: '80%'\n              },\n              onClick: () => {\n                deleteCard.call(this, userID, last4, selectedCard);\n                removeCard(index);\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                id: styles.paymentCardNumber_,\n                children: \"Delete this card?\"\n              })\n            }), /*#__PURE__*/_jsx(AiOutlineClose, {\n              className: styles.closeDeletePayment,\n              onClick: () => {\n                this.setState({\n                  deleteCard: false\n                });\n              }\n            })]\n          }) : /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: selected ? styles.buttonSelected : styles.button2,\n              style: {\n                backgroundColor: colors.GREEN\n              },\n              onClick: () => {\n                setSelected(last4);\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                id: styles.paymentCardNumber_,\n                children: selected ? 'Selected' : 'Select card'\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.RED\n              },\n              onClick: () => {\n                this.setState({\n                  deleteCard: true\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                id: styles.paymentCardNumber_,\n                children: \"Delete Card\"\n              })\n            })]\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.sharedLine,\n        style: {\n          marginTop: '20px',\n          width: '100%'\n        }\n      })]\n    });else if (this.props.type == 'pickPayment') return (\n      /*#__PURE__*/\n      //TO MAKE A SELECTED ONE, THE PARENT COMPONENT SHOULD HAVE A SELECTED ITEM ID AND WE COMPARE ID HERE TO SHOW IF IT IS CONFIRMED OR NOT\n      _jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.paymentRow,\n          id: styles.addCardPayment_,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            style: {\n              flexDirection: 'row',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              src: brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg',\n              alt: \"Perch Payment\",\n              className: brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard\n            }), /*#__PURE__*/_jsxs(\"p\", {\n              className: styles.paymentCardNumber,\n              id: styles.paymentCardNumber_,\n              children: [\"\\u2022\\u2022\\u2022\\u2022 \", last4]\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.pickPaymentSelected,\n            id: selected ? styles.selectedID : styles.selectID,\n            style: {\n              backgroundColor: colors.GREEN\n            },\n            onClick: () => {\n              setSelected(last4);\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              id: styles.paymentCardNumber_,\n              children: selected ? 'Selected' : 'Select'\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.sharedLine,\n          style: {\n            marginTop: '0px',\n            width: '100%'\n          }\n        })]\n      })\n    );\n  }\n\n}\n\n;\n\nconst AddCardForm = ({\n  cancel,\n  userID\n}) => {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const createTokenWithCard = async () => {\n    setLoading(true);\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    ; // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      token\n    } = await stripe.createToken(cardElement);\n\n    if (error) {\n      setErrorMessage(error.message);\n      setLoading(false);\n    } else {\n      storeCard.call(this, userID, token, setLoading, setErrorMessage, cancel);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      style: {\n        backgroundColor: colors.WHITE,\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsx(\"p\", {\n        className: styles.title,\n        style: {\n          color: colors.BLACK\n        },\n        children: \"Add card\"\n      }), /*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        placeholder: \"Name on Card\",\n        className: styles.inputPaymentPanel,\n        id: styles.inputPaymentPanel_ADD,\n        style: {\n          marginTop: '10px'\n        },\n        value: name,\n        onChange: e => {\n          const value = e.target.value;\n          setName(value);\n        }\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.inputPaymentPanel,\n        children: /*#__PURE__*/_jsx(CardElement, {\n          options: {\n            hidePostalCode: true,\n            style: {\n              base: {\n                color: '#303238',\n                fontSize: '16px',\n                fontFamily: '\"Gill Sans\", sans-serif',\n                fontSmoothing: 'antialiased',\n                '::placeholder': {\n                  color: '#757575'\n                }\n              },\n              invalid: {\n                color: '#e5424d',\n                ':focus': {\n                  color: '#303238'\n                }\n              }\n            }\n          }\n        })\n      }), errorMessage && /*#__PURE__*/_jsx(\"p\", {\n        className: styles.em,\n        style: {\n          textAlign: 'initial'\n        },\n        children: errorMessage\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.enterKilometerDiv,\n      style: {\n        marginTop: '20px',\n        marginBottom: '150px',\n        marginLeft: '2.5%',\n        width: '95%'\n      },\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: styles.button2,\n        style: {\n          backgroundColor: colors.RED\n        },\n        id: styles.buttonBottom,\n        onClick: cancel,\n        children: /*#__PURE__*/_jsx(\"p\", {\n          className: styles.buttonText1,\n          children: \"Cancel\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.button2,\n        style: {\n          backgroundColor: colors.GREEN\n        },\n        id: styles.buttonBottom,\n        onClick: () => {\n          if (name.length <= 3) setErrorMessage('Please enter the full name on the card');else createTokenWithCard();\n        },\n        children: loading ? /*#__PURE__*/_jsx(Loader, {\n          type: \"TailSpin\",\n          color: colors.WHITE,\n          height: '20px',\n          width: '20px'\n        }) : /*#__PURE__*/_jsx(\"p\", {\n          className: styles.buttonText1,\n          children: \"Add Card\"\n        })\n      })]\n    })]\n  });\n};","map":{"version":3,"sources":["/Users/ugo/Documents/Perch_Projects/Perch-Website/functions/panels/userPanels/perchWallet.js"],"names":["React","useState","AiOutlineClose","AiOutlineRight","colors","storeCard","deleteCard","buyKilometers","styles","firebase","loadStripe","Loader","CardElement","Elements","useElements","useStripe","stripePromise","PerchWallet","Component","constructor","props","userID","state","userDetails","database","ref","once","snapshot","arrayOfLast4","i","key","val","last4","card","brand","cardId","setState","selected","cards","value","update","then","catch","error","errorMessage","message","index","splice","addCard","quantity","name","cardNumber","expiryDate","ccv","loading","rate","kms","cost","paymentLoading","paymentCompleted","paymentError","paymentErrorMessage","componentDidMount","on","loadCards","render","length","push","removeCard","setSelected","cont","container","backgroundColor","WHITE","marginTop","GREEN","title","color","GREY","width","marginBottom","paddingRight","paddingLeft","textAlign","button1","buttonText1","BLACK","e","target","Number","inputPaymentPanel","enterKilometerDiv","margin","fontFamily","text","toFixed","sharedLine","fontSize","paymentCont","paymentItem","paymentRow","addCardPayment","flexDirection","display","alignItems","visaIcon","marginRight","marginLeft","paymentCardNumber","paymentCardNumber_","em","button2","RED","buttonBottom","call","cardDetails","customerID","stripeCustomerID","timestamp","Date","getTime","walletImage","PaymentCard","selectedCard","type","paymentRow_","masterCardIcon","genericCard","paymentRowButton","closeDeletePayment","buttonSelected","addCardPayment_","pickPaymentSelected","selectedID","selectID","AddCardForm","cancel","setName","setErrorMessage","setLoading","stripe","elements","createTokenWithCard","cardElement","getElement","token","createToken","inputPaymentPanel_ADD","hidePostalCode","style","base","fontSmoothing","invalid"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { AiOutlineClose, AiOutlineRight } from 'react-icons/ai';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, storeCard, deleteCard, buyKilometers, } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport { loadStripe } from '@stripe/stripe-js';\nimport Loader from 'react-loader-spinner';\nimport {\n    CardElement,\n    Elements,\n    useElements,\n    useStripe\n} from '@stripe/react-stripe-js';\nconst stripePromise = loadStripe('pk_test_RjADdW2vGwFAgOOk7ws1juNB002JV727O8');\n\nexport default class PerchWallet extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            buyKilometers: true,//false,\n            addCard: false,\n            userDetails: this.props.userDetails,\n            quantity: 0,\n            cards: [],\n            selected: null,\n\n            name: '',\n            cardNumber: '',\n            expiryDate: '',\n            ccv: '',\n            errorMessage: '',\n\n            loading: false,\n\n            rate: 0,\n            kms: '',\n            cost: 0,\n\n            paymentLoading: false,\n            paymentCompleted: false,\n            paymentError: false,\n            paymentErrorMessage: '',\n\n        };\n    };\n    componentDidMount() {\n        const { userID } = this.state.userDetails;\n        firebase.database().ref(`perchKilometers/${userID}/quantity`).on('value', snapshot => {\n            if (!!snapshot)\n                this.setState({ quantity: snapshot.val() });\n        });\n        firebase.database().ref(`costPerPerchKM`).on('value', snapshot => {\n            this.setState({ rate: snapshot.val() });\n        });\n        this.loadCards();\n    };\n    loadCards = () => {\n        const { userID } = this.state.userDetails;\n        firebase.database().ref(`cards/${userID}`).once('value', snapshot => {\n            if (!!snapshot) {\n                let arrayOfLast4 = [], i = 0;\n                for (let key in snapshot.val()) {\n                    if (key != 'selected')\n                        arrayOfLast4[i] = {\n                            last4: snapshot.val()[key].card.last4,\n                            brand: snapshot.val()[key].card.brand,\n                            cardId: snapshot.val()[key].card.cardId,\n                        };\n                    else if (key == 'selected')\n                        this.setState({ selected: snapshot.val()[key] })\n                    i++;\n                }\n                this.setState({ cards: arrayOfLast4 });\n            };\n        });\n    };\n    setSelected = (value) => {\n        const { userID } = this.state.userDetails;\n        firebase.database().ref(`cards/${userID}`).update({\n            selected: value\n        }).then(() => {\n            this.setState({ selected: value })\n        }).catch(error => { this.setState({ errorMessage: error.message }) })\n    }\n    removeCard = (index) => {\n        let { cards } = this.state;\n        cards.splice(index, 1);\n        this.setState({ cards: cards })\n    };\n    render() {\n        let cards = [];\n        for (let i = 0; i < this.state.cards.length; i++)\n            cards.push(\n                <PaymentCard\n                    userID={this.state.userDetails.userID}\n                    key={this.state.cards[i].last4}\n                    card={this.state.cards[i]}\n                    index={i}\n                    removeCard={this.removeCard}\n                    setSelected={this.setSelected}\n                    selectedCard={this.state.selected}\n                    selected={this.state.selected === this.state.cards[i].last4}\n                    type={this.state.buyKilometers ? 'pickPayment' : 'listOfCards'} />\n            );\n        return (\n            <Elements stripe={stripePromise}>\n                <div className={styles.cont}>\n                    {\n                        this.state.buyKilometers ?//buy kilometers\n\n                            (\n                                this.state.paymentLoading ?\n                                    <>\n                                        <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                                            {!this.state.paymentCompleted && <Loader\n                                                type=\"TailSpin\"\n                                                color={colors.GREEN}\n                                                height={'100px'}\n                                                width={'100px'}\n                                                style={{ marginTop: 25 }}\n                                            />}\n                                            <p className={styles.title}\n                                                style={{ color: colors.GREY, width: 'initial', marginTop: 20, marginBottom: 30, paddingRight: 15, paddingLeft: 15, textAlign: 'center' }}>\n                                                {this.state.paymentCompleted ?\n                                                    `Your payment has been processed. Thank you.` :\n                                                    this.state.paymentError ?\n                                                        `Your payment failed. ${this.state.paymentErrorMessage} ` :\n                                                        `Your payment is currently processing. Please wait.`}\n                                            </p>\n                                            <div\n                                                className={styles.button1}\n                                                style={{ marginTop: 0 }}\n                                                onClick={() => {\n                                                    this.setState({\n                                                        buyKilometers: false,\n                                                        addCard: false,\n                                                        errorMessage: '',\n                                                        paymentError: false,\n                                                        paymentErrorMessage: '',\n                                                        paymentCompleted: false,\n                                                        paymentLoading: false,\n                                                    })\n                                                }}>\n                                                <p className={styles.buttonText1}>Go back</p>\n                                            </div>\n                                        </div>\n                                    </> :\n                                    <>\n                                        <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                                            <p className={styles.title} style={{ color: colors.BLACK }}>Enter the amount of kilometers you would like to purchase</p>\n                                            <input\n                                                type=\"text\"\n                                                placeholder=\"Enter amount of kilometers\"\n                                                value={this.state.kms}\n                                                onChange={(e) => {\n                                                    const value = e.target.value;\n                                                    if (value.length <= 3) {\n                                                        const cost = Number(value) * this.state.rate;\n                                                        this.setState({ kms: value, cost: cost });\n                                                    }\n                                                }}\n                                                className={styles.inputPaymentPanel} />\n                                            <div className={styles.enterKilometerDiv} style={{ marginTop: '20px' }}>\n                                                <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', color: colors.GREY }} className={styles.text}>Cost per kilometer</p>\n                                                <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', }} className={styles.text}>{`$ ${this.state.rate?.toFixed(2)}`}</p>\n                                            </div>\n                                            {/* <div className={styles.enterKilometerDiv}>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', color: colors.GREY }} className={styles.text}>Total cost of kilometers</p>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', }} className={styles.text}>{`$ ${this.state.cost?.toFixed(2)}`}</p>\n                                </div>\n                                 <div className={styles.enterKilometerDiv}>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', color: colors.GREY }} className={styles.text}>Taxes</p>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', }} className={styles.text}>{`$ 1.99`}</p>\n                                </div> */}\n                                            <div className={styles.sharedLine} style={{ marginTop: '20px', width: '90%' }}></div>\n                                            <div className={styles.enterKilometerDiv}>\n                                                <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Bold', fontSize: '120%' }} className={styles.text}>Total</p>\n                                                <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Bold', color: colors.GREEN, fontSize: '120%' }} className={styles.text}>{`$ ${this.state.cost?.toFixed(2)}`}</p>\n                                            </div>\n\n                                        </div>\n\n                                        <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px', }}>\n                                            <p className={styles.title} style={{ color: colors.BLACK }}>\n                                                Payment Methods\n                                            </p>\n                                            <p className={styles.text} style={{ color: colors.GREY, marginBottom: '20px' }}>\n                                                List of available payment methods. New payment methods can also be added.\n                                            </p>\n\n                                            <div className={styles.paymentCont}>\n                                                <div className={styles.paymentItem}>\n                                                    {cards}\n                                                    <div className={styles.paymentRow} id={styles.addCardPayment}>\n                                                        <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                                                            <img src=\"/PayPalLogo.svg\" alt=\"Perch Payment\" className={styles.visaIcon} style={{ marginRight: '15px', marginLeft: '0px' }} />\n                                                            <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>PayPal</p>\n                                                        </div>\n                                                        <AiOutlineRight color={colors.BLACK} />\n                                                    </div>\n                                                    <div className={styles.sharedLine} style={{ marginTop: '0px', width: '100%' }}></div>\n                                                    <div className={styles.paymentRow} id={styles.addCardPayment} onClick={() => { this.setState({ addCard: true, buyKilometers: false, errorMessage: '' }) }}>\n                                                        <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                                                            <img src=\"/addPaymentCardIcon.svg\" alt=\"Perch Payment\" className={styles.visaIcon} style={{ marginRight: '15px' }} />\n                                                            <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>Add Debit / Credit Card</p>\n                                                        </div>\n                                                        <AiOutlineRight color={colors.BLACK} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            {this.state.errorMessage && <p className={styles.em} style={{ textAlign: 'initial' }}>{this.state.errorMessage}</p>}\n                                        </div>\n\n                                        <div className={styles.enterKilometerDiv} style={{ marginTop: '20px', marginBottom: '150px', marginLeft: '2.5%', width: '95%' }}>\n                                            <div className={styles.button2} style={{ backgroundColor: colors.RED }} id={styles.buttonBottom}\n                                                onClick={() => { this.setState({ buyKilometers: false, addCard: false, errorMessage: '' }) }}>\n                                                <p className={styles.buttonText1}>Cancel</p>\n                                            </div>\n                                            <div\n                                                onClick={() => {\n                                                    if (this.state.kms < 20)\n                                                        this.setState({ errorMessage: 'You can get a minimum of 20 kilometers' })\n                                                    else if (this.state.kms > 100)\n                                                        this.setState({ errorMessage: 'You can get a maximum of 100 kilometers' })\n                                                    else\n                                                        buyKilometers.call(this, {\n                                                            cardId: this.state.cardDetails.card.cardId,\n                                                            customerID: this.state.userDetails.stripeCustomerID,\n                                                            quantity: Number(this.state.kms),\n                                                            userID: this.state.userDetails.userID,\n                                                            timestamp: new Date().getTime(),\n                                                        })\n                                                }}\n                                                className={styles.button2}\n                                                style={{ backgroundColor: colors.GREEN }}\n                                                id={styles.buttonBottom}>\n                                                <p className={styles.buttonText1}>Buy Kilometers</p>\n                                            </div>\n                                        </div>\n                                    </>) :\n                            this.state.addCard ?//add card\n                                <>\n                                    <AddCardForm\n                                        userID={this.state.userDetails.userID}\n                                        cancel={() => {\n                                            this.loadCards();\n                                            this.setState({ errorMessage: '', addCard: false, buyKilometers: false, })\n                                        }}\n                                    />\n                                </>\n                                ://main page\n                                <>\n                                    <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                                        <p className={styles.title} style={{ color: colors.BLACK }}>Kilometers</p>\n                                        <p className={styles.text} style={{ color: colors.GREY }}>\n                                            You can make kilometer purchases from this panel. Also remeber that sharing your code with friends who book their first ride automatically gives you free kilometers.\n                                        </p>\n                                        <img src=\"/walletImage.svg\" alt=\"Purchase Perch Kilometers\" className={styles.walletImage} />\n                                        <p className={styles.title} style={{ width: 'initial', marginTop: '20px' }}>{`${this.state.quantity.toFixed(1)} kilometers`}</p>\n                                        <div className={styles.button1} style={{}} onClick={() => { this.setState({ buyKilometers: true, addCard: false, errorMessage: '' }) }}>\n                                            <p className={styles.buttonText1}>Buy kilometers</p>\n                                        </div>\n                                    </div>\n\n                                    <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px', marginBottom: '150px' }}>\n                                        <p className={styles.title} style={{ color: colors.BLACK }}>\n                                            Payment Methods\n                                        </p>\n                                        <p className={styles.text} style={{ color: colors.GREY, marginBottom: '20px' }}>\n                                            List of available payment methods. New payment methods can also be added.\n                                        </p>\n\n                                        <div className={styles.paymentCont}>\n                                            <div className={styles.paymentItem}>\n                                                {cards}\n                                                <div className={styles.paymentRow} id={styles.addCardPayment} onClick={() => { this.setState({ addCard: true, buyKilometers: false, errorMessage: '' }) }}>\n                                                    <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                                                        <img src=\"/addPaymentCardIcon.svg\" alt=\"Perch Payment\" className={styles.visaIcon} style={{ marginRight: '15px' }} />\n                                                        <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>Add Debit / Credit Card</p>\n                                                    </div>\n                                                    <AiOutlineRight color={colors.BLACK} />\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </>\n                    }\n                </div >\n            </Elements>\n        )\n\n    }\n};\nclass PaymentCard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deleteCard: false,\n            loading: false,\n        }\n    }\n    render() {\n        const { selected, setSelected, card, userID, removeCard, index, selectedCard } = this.props;\n        const { last4, brand } = card;\n        if (this.props.type == 'listOfCards')\n            return (\n                <>\n                    <div className={styles.paymentRow} id={styles.paymentRow_}>\n                        <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                            <img\n                                src={brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg'} alt=\"Perch Payment\"\n                                className={brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard} />\n                            <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>XXXX XXXX XXXX {last4}</p>\n                        </div>\n                        <div id={styles.paymentRowButton}>\n                            {\n                                this.state.deleteCard ?\n                                    <>\n                                        <div className={styles.button2} style={{ backgroundColor: colors.RED, width: '80%' }}\n                                            onClick={() => {\n                                                deleteCard.call(this, userID, last4, selectedCard);\n                                                removeCard(index);\n                                            }}\n                                        >\n                                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>Delete this card?</p>\n                                        </div>\n                                        <AiOutlineClose className={styles.closeDeletePayment} onClick={() => { this.setState({ deleteCard: false }) }} />\n                                    </> :\n                                    <>\n                                        <div\n                                            className={selected ? styles.buttonSelected : styles.button2}\n                                            style={{ backgroundColor: colors.GREEN }}\n                                            onClick={() => {\n                                                setSelected(last4)\n                                            }}>\n                                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>{selected ? 'Selected' : 'Select card'}</p>\n                                        </div>\n                                        <div className={styles.button2} style={{ backgroundColor: colors.RED }} onClick={() => { this.setState({ deleteCard: true }) }}>\n                                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>Delete Card</p>\n                                        </div>\n                                    </>}\n                        </div>\n                    </div>\n                    <div className={styles.sharedLine} style={{ marginTop: '20px', width: '100%' }}></div>\n                </>\n            );\n        else if (this.props.type == 'pickPayment')\n            return (//TO MAKE A SELECTED ONE, THE PARENT COMPONENT SHOULD HAVE A SELECTED ITEM ID AND WE COMPARE ID HERE TO SHOW IF IT IS CONFIRMED OR NOT\n                <>\n                    <div className={styles.paymentRow} id={styles.addCardPayment_} >\n                        <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                            <img\n                                src={brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg'} alt=\"Perch Payment\"\n                                className={brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard} />\n                            <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>•••• {last4}</p>\n                        </div>\n                        <div className={styles.pickPaymentSelected}\n                            id={selected ? styles.selectedID : styles.selectID}\n                            style={{ backgroundColor: colors.GREEN, }}\n                            onClick={() => {\n                                setSelected(last4)\n                            }}>\n                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>{selected ? 'Selected' : 'Select'}</p>\n                        </div>\n                    </div>\n                    <div className={styles.sharedLine} style={{ marginTop: '0px', width: '100%' }}></div>\n                </>\n            );\n    }\n};\nconst AddCardForm = ({ cancel, userID }) => {\n    const [name, setName] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [loading, setLoading] = useState(false);\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const createTokenWithCard = async () => {\n        setLoading(true);\n        if (!stripe || !elements) {\n            // Stripe.js has not loaded yet. Make sure to disable\n            // form submission until Stripe.js has loaded.\n            return;\n        };\n\n        // Get a reference to a mounted CardElement. Elements knows how\n        // to find your CardElement because there can only ever be one of\n        // each type of element.\n        const cardElement = elements.getElement(CardElement);\n        // Use your card Element with other Stripe.js APIs\n        const { error, token } = await stripe.createToken(cardElement);\n\n        if (error) {\n            setErrorMessage(error.message);\n            setLoading(false);\n        } else {\n            storeCard.call(this, userID, token, setLoading, setErrorMessage, cancel);\n        }\n    };\n    return (\n        <>\n            <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                <p className={styles.title} style={{ color: colors.BLACK }}>Add card</p>\n                <input type=\"text\"\n                    placeholder=\"Name on Card\"\n                    className={styles.inputPaymentPanel}\n                    id={styles.inputPaymentPanel_ADD}\n                    style={{ marginTop: '10px' }}\n                    value={name}\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        setName(value);\n                    }}\n                />\n                <div className={styles.inputPaymentPanel}>\n                    <CardElement\n                        options={{\n                            hidePostalCode: true,\n                            style: {\n                                base: {\n                                    color: '#303238',\n                                    fontSize: '16px',\n                                    fontFamily: '\"Gill Sans\", sans-serif',\n                                    fontSmoothing: 'antialiased',\n                                    '::placeholder': {\n                                        color: '#757575',\n                                    },\n                                },\n                                invalid: {\n                                    color: '#e5424d',\n                                    ':focus': {\n                                        color: '#303238',\n                                    },\n                                },\n                            }\n                        }}\n                    />\n                </div>\n\n                {errorMessage && <p className={styles.em} style={{ textAlign: 'initial' }}>{errorMessage}</p>}\n            </div>\n            <div className={styles.enterKilometerDiv} style={{ marginTop: '20px', marginBottom: '150px', marginLeft: '2.5%', width: '95%' }}>\n                <div className={styles.button2} style={{ backgroundColor: colors.RED }} id={styles.buttonBottom}\n                    onClick={cancel}>\n                    <p className={styles.buttonText1}>Cancel</p>\n                </div>\n                <div\n                    className={styles.button2}\n                    style={{ backgroundColor: colors.GREEN }}\n                    id={styles.buttonBottom}\n                    onClick={() => {\n                        if (name.length <= 3)\n                            setErrorMessage('Please enter the full name on the card');\n                        else\n                            createTokenWithCard();\n                    }}>\n                    {loading ?\n                        <Loader\n                            type=\"TailSpin\"\n                            color={colors.WHITE}\n                            height={'20px'}\n                            width={'20px'}\n                        /> :\n                        <p className={styles.buttonText1}>Add Card</p>}\n                </div>\n            </div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}