{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from 'firebase';\nimport React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, formatDateAllValues, pendingProcessesFunction } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport Loader from 'react-loader-spinner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default class PendingProcesses extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"renderFunctionToSubmit\", () => {\n      const {\n        addProcess\n      } = this.state;\n\n      if (addProcess) {}\n    });\n\n    this.state = {\n      result: {},\n      listOfProcesses: [],\n      loading: false,\n      addProcess: false,\n      isNewProcess: false,\n      userID: '',\n      type: '',\n      mainTopic: '',\n      timeCreated: null,\n      title: '',\n      details: '',\n      errorMessage: ''\n    };\n  }\n\n  componentDidMount() {}\n\n  stringIsNotEmpty(s) {\n    return s.length >= 4;\n  }\n\n  render() {\n    let results = [];\n    const keys = Object.keys(this.state.result).sort((a, b) => b - a);\n\n    for (let k = 0; k < keys.length; k++) {\n      const data = this.state.result[keys[k]];\n      results.push( /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.previousMessageSum,\n          onClick: () => {//this.setState({ currentData: data, index: k })\n          },\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            style: {\n              width: '90px',\n              height: '30px',\n              backgroundColor: data.type == 'rider' ? colors.GREEN : colors.BLUE,\n              borderRadius: '5px',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.readOrUnreadText,\n              style: {\n                color: '#ffffff',\n                fontFamily: 'Gilroy-ExtraBold'\n              },\n              children: data.type == 'rider' ? 'Rider' : 'Driver'\n            })\n          }), /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontSize: '105%',\n              fontFamily: 'Gilroy-Bold',\n              color: colors.GREEN\n            },\n            children: /*#__PURE__*/_jsx(\"span\", {\n              style: {\n                color: colors.GREY\n              },\n              children: displayDate\n            })\n          })]\n        }), k == keys.length - 1 ? /*#__PURE__*/_jsx(_Fragment, {}) : /*#__PURE__*/_jsx(\"div\", {\n          className: styles.sharedLine,\n          style: {\n            marginTop: '5px'\n          }\n        })]\n      }));\n    }\n\n    ;\n    const {\n      addProcess,\n      errorMessage,\n      isNewProcess\n    } = this.state;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.cont,\n      children: [!addProcess && !isNewProcess && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.enterKilometerDiv,\n        style: {\n          marginTop: '20px',\n          marginBottom: '0px',\n          marginLeft: '2.5%',\n          width: '95%'\n        },\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: styles.button2,\n          style: {\n            backgroundColor: colors.GREEN,\n            width: '100%',\n            maxWidth: 'initial'\n          },\n          id: styles.buttonBottom,\n          onClick: () => {\n            this.setState({\n              addProcess: true,\n              isNewProcess: true,\n              userID: '',\n              type: '',\n              mainTopic: '',\n              title: '',\n              details: '',\n              errorMessage: ''\n            });\n          },\n          children: this.state.loading ? /*#__PURE__*/_jsx(Loader, {\n            type: \"TailSpin\",\n            color: colors.WHITE,\n            height: '20px',\n            width: '20px'\n          }) : /*#__PURE__*/_jsx(\"p\", {\n            className: styles.buttonText1,\n            children: \"Add New Process\"\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.container,\n        style: {\n          backgroundColor: colors.WHITE,\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          className: styles.title,\n          style: {\n            color: colors.BLACK\n          },\n          children: \"List of pending processes\"\n        }), addProcess ? /*#__PURE__*/_jsxs(_Fragment, {\n          children: [isNewProcess ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              style: {\n                width: '90%',\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                marginBottom: '0px'\n              },\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                placeholder: \"User ID\",\n                className: styles.searchInput,\n                style: {\n                  width: '67%'\n                },\n                value: this.state.userID,\n                onChange: event => {\n                  this.setState({\n                    userID: event.target.value\n                  });\n                }\n              }), /*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                placeholder: \"Type\",\n                className: styles.searchInput,\n                style: {\n                  width: '32%'\n                },\n                value: this.state.type,\n                onChange: event => {\n                  this.setState({\n                    type: event.target.value.toLowerCase()\n                  });\n                }\n              })]\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"text\",\n              placeholder: \"Main topic\",\n              className: styles.searchInput,\n              style: {\n                width: '90%',\n                marginTop: '15px'\n              },\n              value: this.state.mainTopic,\n              onChange: event => {\n                this.setState({\n                  mainTopic: event.target.value\n                });\n              }\n            })]\n          }) : /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              style: {\n                width: '90%',\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                marginBottom: '0px'\n              },\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                className: styles.mainText,\n                children: `• User ID - ${this.state.userID}`\n              }), /*#__PURE__*/_jsx(\"div\", {\n                style: {\n                  width: '90px',\n                  height: '30px',\n                  backgroundColor: this.state.type == 'rider' ? colors.GREEN : colors.BLUE,\n                  borderRadius: '5px',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                },\n                children: /*#__PURE__*/_jsx(\"p\", {\n                  className: styles.readOrUnreadText,\n                  style: {\n                    color: '#ffffff',\n                    fontFamily: 'Gilroy-ExtraBold'\n                  },\n                  children: this.state.type == 'rider' ? 'Rider' : 'Driver'\n                })\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              style: {\n                width: '90%',\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                marginBottom: '0px'\n              },\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                className: styles.mainText,\n                children: `• Topic - ${this.state.mainTopic}`\n              }), /*#__PURE__*/_jsx(\"p\", {\n                className: styles.mainText,\n                children: `Created at  ( ${formatDateAllValues(new Date(this.state.timeCreated))} )`\n              })]\n            })]\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            placeholder: \"Title\",\n            className: styles.searchInput,\n            style: {\n              width: '90%',\n              marginTop: '15px'\n            },\n            value: this.state.title,\n            onChange: event => {\n              this.setState({\n                title: event.target.value\n              });\n            }\n          }), /*#__PURE__*/_jsx(\"textarea\", {\n            autoCapitalize: true,\n            type: \"text\",\n            placeholder: \"Details\",\n            className: styles.contactUsContent,\n            style: {\n              width: '90%',\n              marginTop: '15px',\n              fontSize: '100%'\n            },\n            value: this.state.details,\n            onChange: event => {\n              this.setState({\n                details: event.target.value\n              });\n            }\n          })]\n        }) : /*#__PURE__*/_jsx(_Fragment, {}), errorMessage != '' && /*#__PURE__*/_jsx(\"p\", {\n          className: styles.em,\n          style: {\n            textAlign: 'initial'\n          },\n          children: errorMessage\n        })]\n      }), addProcess && /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.enterKilometerDiv,\n        style: {\n          marginTop: '20px',\n          marginBottom: '150px',\n          marginLeft: '2.5%',\n          width: '95%'\n        },\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: styles.button2,\n          style: {\n            backgroundColor: colors.RED\n          },\n          id: styles.buttonBottom,\n          onClick: () => {\n            if (addProcess) this.setState({\n              addProcess: false,\n              isNewProcess: false,\n              userID: '',\n              type: '',\n              mainTopic: '',\n              timeCreated: null,\n              title: '',\n              details: '',\n              errorMessage: ''\n            });\n          },\n          children: /*#__PURE__*/_jsx(\"p\", {\n            className: styles.buttonText1,\n            children: \"Cancel\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.button2,\n          style: {\n            backgroundColor: colors.GREEN\n          },\n          id: styles.buttonBottom,\n          onClick: () => {\n            if (addProcess) {\n              if (isNewProcess) {\n                if (this.stringIsNotEmpty(this.state.userID) && (this.state.type == 'rider' || this.state.type == 'driver') && this.stringIsNotEmpty(this.state.mainTopic) && this.stringIsNotEmpty(this.state.title) && this.stringIsNotEmpty(this.state.details)) pendingProcessesFunction.call(this, {\n                  userID: this.state.userID,\n                  isNewProcess: true,\n                  type: this.state.type,\n                  mainTopic: this.state.mainTopic,\n                  title: this.state.title,\n                  details: this.state.details\n                });else this.setState({\n                  errorMessage: 'Please verify all fields are entered correctly and type is either \"driver\" or \"rider\"'\n                });\n              } else {\n                if (this.stringIsNotEmpty(this.state.title) && this.stringIsNotEmpty(this.state.details)) pendingProcessesFunction.call(this, {\n                  isNewProcess: false,\n                  title: this.state.title,\n                  details: this.state.details\n                });else this.setState({\n                  errorMessage: 'Please verify all fields are entered correctly'\n                });\n              }\n            }\n          },\n          children: this.state.loading ? /*#__PURE__*/_jsx(Loader, {\n            type: \"TailSpin\",\n            color: colors.WHITE,\n            height: '20px',\n            width: '20px'\n          }) : /*#__PURE__*/_jsx(\"p\", {\n            className: styles.buttonText1,\n            children: \"Add Pending Process\"\n          })\n        })]\n      })]\n    });\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/ugo/Documents/Perch_Projects/Perch-Website/functions/panels/adminPanels/pendingProcesses.js"],"names":["firebase","React","colors","formatDateAllValues","pendingProcessesFunction","styles","Loader","PendingProcesses","Component","constructor","props","addProcess","state","result","listOfProcesses","loading","isNewProcess","userID","type","mainTopic","timeCreated","title","details","errorMessage","componentDidMount","stringIsNotEmpty","s","length","render","results","keys","Object","sort","a","b","k","data","push","previousMessageSum","width","height","backgroundColor","GREEN","BLUE","borderRadius","display","justifyContent","alignItems","readOrUnreadText","color","fontFamily","fontSize","GREY","displayDate","sharedLine","marginTop","cont","enterKilometerDiv","marginBottom","marginLeft","button2","maxWidth","buttonBottom","setState","WHITE","buttonText1","container","BLACK","flexDirection","searchInput","event","target","value","toLowerCase","mainText","Date","contactUsContent","em","textAlign","RED","call"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,4CAAP;AACA,OAAO,+DAAP;AACA,SAASC,MAAT,EAAiBC,mBAAjB,EAAsCC,wBAAtC,QAAsE,iBAAtE;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;;AACA,eAAe,MAAMC,gBAAN,SAA+BN,KAAK,CAACO,SAArC,CAA+C;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,oDAyBM,MAAM;AAC3B,YAAM;AAAEC,QAAAA;AAAF,UAAiB,KAAKC,KAA5B;;AACA,UAAID,UAAJ,EAAgB,CAEf;AACJ,KA9BkB;;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,eAAe,EAAE,EAFR;AAITC,MAAAA,OAAO,EAAE,KAJA;AAMTJ,MAAAA,UAAU,EAAE,KANH;AAOTK,MAAAA,YAAY,EAAE,KAPL;AAQTC,MAAAA,MAAM,EAAE,EARC;AASTC,MAAAA,IAAI,EAAE,EATG;AAUTC,MAAAA,SAAS,EAAE,EAVF;AAWTC,MAAAA,WAAW,EAAE,IAXJ;AAYTC,MAAAA,KAAK,EAAE,EAZE;AAaTC,MAAAA,OAAO,EAAE,EAbA;AAeTC,MAAAA,YAAY,EAAE;AAfL,KAAb;AAkBH;;AACDC,EAAAA,iBAAiB,GAAG,CAEnB;;AAODC,EAAAA,gBAAgB,CAACC,CAAD,EAAI;AAChB,WAAQA,CAAC,CAACC,MAAF,IAAY,CAApB;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,QAAIC,OAAO,GAAG,EAAd;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY,KAAKlB,KAAL,CAAWC,MAAvB,EAA+BmB,IAA/B,CAAoC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAGD,CAAlD,CAAb;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACH,MAAzB,EAAiCQ,CAAC,EAAlC,EAAsC;AAClC,YAAMC,IAAI,GAAG,KAAKxB,KAAL,CAAWC,MAAX,CAAkBiB,IAAI,CAACK,CAAD,CAAtB,CAAb;AACAN,MAAAA,OAAO,CAACQ,IAAR,eACI;AAAA,gCACI;AACI,UAAA,SAAS,EAAEhC,MAAM,CAACiC,kBADtB;AAEI,UAAA,OAAO,EAAE,MAAM,CACX;AACH,WAJL;AAAA,kCAKI;AAAK,YAAA,KAAK,EAAE;AAAEC,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,MAAM,EAAE,MAAzB;AAAiCC,cAAAA,eAAe,EAAEL,IAAI,CAAClB,IAAL,IAAa,OAAb,GAAuBhB,MAAM,CAACwC,KAA9B,GAAsCxC,MAAM,CAACyC,IAA/F;AAAqGC,cAAAA,YAAY,EAAE,KAAnH;AAA0HC,cAAAA,OAAO,EAAE,MAAnI;AAA2IC,cAAAA,cAAc,EAAE,QAA3J;AAAqKC,cAAAA,UAAU,EAAE;AAAjL,aAAZ;AAAA,mCACI;AAAG,cAAA,SAAS,EAAE1C,MAAM,CAAC2C,gBAArB;AAAuC,cAAA,KAAK,EAAE;AAAEC,gBAAAA,KAAK,EAAE,SAAT;AAAoBC,gBAAAA,UAAU,EAAE;AAAhC,eAA9C;AAAA,wBAAqGd,IAAI,CAAClB,IAAL,IAAa,OAAb,GAAuB,OAAvB,GAAiC;AAAtI;AADJ,YALJ,eASI;AAAG,YAAA,KAAK,EAAE;AAAEiC,cAAAA,QAAQ,EAAE,MAAZ;AAAoBD,cAAAA,UAAU,EAAE,aAAhC;AAA+CD,cAAAA,KAAK,EAAE/C,MAAM,CAACwC;AAA7D,aAAV;AAAA,mCACI;AAAM,cAAA,KAAK,EAAE;AAAEO,gBAAAA,KAAK,EAAE/C,MAAM,CAACkD;AAAhB,eAAb;AAAA,wBAAsCC;AAAtC;AADJ,YATJ;AAAA,UADJ,EAeQlB,CAAC,IAAIL,IAAI,CAACH,MAAL,GAAc,CAAnB,gBACI,mBADJ,gBAEI;AAAK,UAAA,SAAS,EAAEtB,MAAM,CAACiD,UAAvB;AAAmC,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb;AAA1C,UAjBZ;AAAA,QADJ;AAsBH;;AAAA;AACD,UAAM;AAAE5C,MAAAA,UAAF;AAAcY,MAAAA,YAAd;AAA4BP,MAAAA;AAA5B,QAA6C,KAAKJ,KAAxD;AACA,wBACI;AAAK,MAAA,SAAS,EAAEP,MAAM,CAACmD,IAAvB;AAAA,iBACK,CAAE7C,UAAF,IAAiB,CAAEK,YAAnB,iBACG;AAAK,QAAA,SAAS,EAAEX,MAAM,CAACoD,iBAAvB;AACI,QAAA,KAAK,EAAE;AAAEF,UAAAA,SAAS,EAAE,MAAb;AAAqBG,UAAAA,YAAY,EAAE,KAAnC;AAA0CC,UAAAA,UAAU,EAAE,MAAtD;AAA8DpB,UAAAA,KAAK,EAAE;AAArE,SADX;AAAA,+BAEI;AACI,UAAA,SAAS,EAAElC,MAAM,CAACuD,OADtB;AAEI,UAAA,KAAK,EAAE;AAAEnB,YAAAA,eAAe,EAAEvC,MAAM,CAACwC,KAA1B;AAAiCH,YAAAA,KAAK,EAAE,MAAxC;AAAgDsB,YAAAA,QAAQ,EAAE;AAA1D,WAFX;AAGI,UAAA,EAAE,EAAExD,MAAM,CAACyD,YAHf;AAII,UAAA,OAAO,EAAE,MAAM;AACX,iBAAKC,QAAL,CAAc;AACVpD,cAAAA,UAAU,EAAE,IADF;AAEVK,cAAAA,YAAY,EAAE,IAFJ;AAGVC,cAAAA,MAAM,EAAE,EAHE;AAIVC,cAAAA,IAAI,EAAE,EAJI;AAKVC,cAAAA,SAAS,EAAE,EALD;AAMVE,cAAAA,KAAK,EAAE,EANG;AAOVC,cAAAA,OAAO,EAAE,EAPC;AASVC,cAAAA,YAAY,EAAE;AATJ,aAAd;AAWH,WAhBL;AAAA,oBAiBK,KAAKX,KAAL,CAAWG,OAAX,gBACG,KAAC,MAAD;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,KAAK,EAAEb,MAAM,CAAC8D,KAFlB;AAGI,YAAA,MAAM,EAAE,MAHZ;AAII,YAAA,KAAK,EAAE;AAJX,YADH,gBAMG;AAAG,YAAA,SAAS,EAAE3D,MAAM,CAAC4D,WAArB;AAAA;AAAA;AAvBR;AAFJ,QAFR,eA8BI;AAAK,QAAA,SAAS,EAAE5D,MAAM,CAAC6D,SAAvB;AAAkC,QAAA,KAAK,EAAE;AAAEzB,UAAAA,eAAe,EAAEvC,MAAM,CAAC8D,KAA1B;AAAiCT,UAAAA,SAAS,EAAE;AAA5C,SAAzC;AAAA,gCACI;AAAG,UAAA,SAAS,EAAElD,MAAM,CAACgB,KAArB;AAA4B,UAAA,KAAK,EAAE;AAAE4B,YAAAA,KAAK,EAAE/C,MAAM,CAACiE;AAAhB,WAAnC;AAAA;AAAA,UADJ,EAEKxD,UAAU,gBACP;AAAA,qBACKK,YAAY,gBACT;AAAA,oCACI;AAAK,cAAA,KAAK,EAAE;AAAEuB,gBAAAA,KAAK,EAAE,KAAT;AAAgBM,gBAAAA,OAAO,EAAE,MAAzB;AAAiCuB,gBAAAA,aAAa,EAAE,KAAhD;AAAuDtB,gBAAAA,cAAc,EAAE,eAAvE;AAAwFY,gBAAAA,YAAY,EAAE;AAAtG,eAAZ;AAAA,sCACI;AACI,gBAAA,IAAI,EAAC,MADT;AAEI,gBAAA,WAAW,EAAC,SAFhB;AAGI,gBAAA,SAAS,EAAErD,MAAM,CAACgE,WAHtB;AAII,gBAAA,KAAK,EAAE;AAAE9B,kBAAAA,KAAK,EAAE;AAAT,iBAJX;AAKI,gBAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWK,MALtB;AAMI,gBAAA,QAAQ,EAAEqD,KAAK,IAAI;AACf,uBAAKP,QAAL,CAAc;AAAE9C,oBAAAA,MAAM,EAAEqD,KAAK,CAACC,MAAN,CAAaC;AAAvB,mBAAd;AACH;AARL,gBADJ,eAWI;AACI,gBAAA,IAAI,EAAC,MADT;AAEI,gBAAA,WAAW,EAAC,MAFhB;AAGI,gBAAA,SAAS,EAAEnE,MAAM,CAACgE,WAHtB;AAII,gBAAA,KAAK,EAAE;AAAE9B,kBAAAA,KAAK,EAAE;AAAT,iBAJX;AAKI,gBAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWM,IALtB;AAMI,gBAAA,QAAQ,EAAEoD,KAAK,IAAI;AACf,uBAAKP,QAAL,CAAc;AAAE7C,oBAAAA,IAAI,EAAEoD,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,WAAnB;AAAR,mBAAd;AACH;AARL,gBAXJ;AAAA,cADJ,eAuBI;AACI,cAAA,IAAI,EAAC,MADT;AAEI,cAAA,WAAW,EAAC,YAFhB;AAGI,cAAA,SAAS,EAAEpE,MAAM,CAACgE,WAHtB;AAII,cAAA,KAAK,EAAE;AAAE9B,gBAAAA,KAAK,EAAE,KAAT;AAAgBgB,gBAAAA,SAAS,EAAE;AAA3B,eAJX;AAKI,cAAA,KAAK,EAAE,KAAK3C,KAAL,CAAWO,SALtB;AAMI,cAAA,QAAQ,EAAEmD,KAAK,IAAI;AACf,qBAAKP,QAAL,CAAc;AAAE5C,kBAAAA,SAAS,EAAEmD,KAAK,CAACC,MAAN,CAAaC;AAA1B,iBAAd;AACH;AARL,cAvBJ;AAAA,YADS,gBAmCT;AAAA,oCACI;AAAK,cAAA,KAAK,EAAE;AAAEjC,gBAAAA,KAAK,EAAE,KAAT;AAAgBM,gBAAAA,OAAO,EAAE,MAAzB;AAAiCuB,gBAAAA,aAAa,EAAE,KAAhD;AAAuDtB,gBAAAA,cAAc,EAAE,eAAvE;AAAwFY,gBAAAA,YAAY,EAAE;AAAtG,eAAZ;AAAA,sCACI;AAAG,gBAAA,SAAS,EAAErD,MAAM,CAACqE,QAArB;AAAA,0BAAiC,eAAc,KAAK9D,KAAL,CAAWK,MAAO;AAAjE,gBADJ,eAEI;AAAK,gBAAA,KAAK,EAAE;AAAEsB,kBAAAA,KAAK,EAAE,MAAT;AAAiBC,kBAAAA,MAAM,EAAE,MAAzB;AAAiCC,kBAAAA,eAAe,EAAE,KAAK7B,KAAL,CAAWM,IAAX,IAAmB,OAAnB,GAA6BhB,MAAM,CAACwC,KAApC,GAA4CxC,MAAM,CAACyC,IAArG;AAA2GC,kBAAAA,YAAY,EAAE,KAAzH;AAAgIC,kBAAAA,OAAO,EAAE,MAAzI;AAAiJC,kBAAAA,cAAc,EAAE,QAAjK;AAA2KC,kBAAAA,UAAU,EAAE;AAAvL,iBAAZ;AAAA,uCACI;AAAG,kBAAA,SAAS,EAAE1C,MAAM,CAAC2C,gBAArB;AAAuC,kBAAA,KAAK,EAAE;AAAEC,oBAAAA,KAAK,EAAE,SAAT;AAAoBC,oBAAAA,UAAU,EAAE;AAAhC,mBAA9C;AAAA,4BAAqG,KAAKtC,KAAL,CAAWM,IAAX,IAAmB,OAAnB,GAA6B,OAA7B,GAAuC;AAA5I;AADJ,gBAFJ;AAAA,cADJ,eAOI;AAAK,cAAA,KAAK,EAAE;AAAEqB,gBAAAA,KAAK,EAAE,KAAT;AAAgBM,gBAAAA,OAAO,EAAE,MAAzB;AAAiCuB,gBAAAA,aAAa,EAAE,KAAhD;AAAuDtB,gBAAAA,cAAc,EAAE,eAAvE;AAAwFY,gBAAAA,YAAY,EAAE;AAAtG,eAAZ;AAAA,sCACI;AAAG,gBAAA,SAAS,EAAErD,MAAM,CAACqE,QAArB;AAAA,0BAAiC,aAAY,KAAK9D,KAAL,CAAWO,SAAU;AAAlE,gBADJ,eAEI;AAAG,gBAAA,SAAS,EAAEd,MAAM,CAACqE,QAArB;AAAA,0BAAiC,iBAAgBvE,mBAAmB,CAAC,IAAIwE,IAAJ,CAAS,KAAK/D,KAAL,CAAWQ,WAApB,CAAD,CAAmC;AAAvG,gBAFJ;AAAA,cAPJ;AAAA,YApCR,eAgDI;AACI,YAAA,IAAI,EAAC,MADT;AAEI,YAAA,WAAW,EAAC,OAFhB;AAGI,YAAA,SAAS,EAAEf,MAAM,CAACgE,WAHtB;AAII,YAAA,KAAK,EAAE;AAAE9B,cAAAA,KAAK,EAAE,KAAT;AAAgBgB,cAAAA,SAAS,EAAE;AAA3B,aAJX;AAKI,YAAA,KAAK,EAAE,KAAK3C,KAAL,CAAWS,KALtB;AAMI,YAAA,QAAQ,EAAEiD,KAAK,IAAI;AACf,mBAAKP,QAAL,CAAc;AAAE1C,gBAAAA,KAAK,EAAEiD,KAAK,CAACC,MAAN,CAAaC;AAAtB,eAAd;AACH;AARL,YAhDJ,eA0DI;AACI,YAAA,cAAc,EAAE,IADpB;AAEI,YAAA,IAAI,EAAC,MAFT;AAGI,YAAA,WAAW,EAAC,SAHhB;AAII,YAAA,SAAS,EAAEnE,MAAM,CAACuE,gBAJtB;AAKI,YAAA,KAAK,EAAE;AAAErC,cAAAA,KAAK,EAAE,KAAT;AAAgBgB,cAAAA,SAAS,EAAE,MAA3B;AAAmCJ,cAAAA,QAAQ,EAAE;AAA7C,aALX;AAMI,YAAA,KAAK,EAAE,KAAKvC,KAAL,CAAWU,OANtB;AAOI,YAAA,QAAQ,EAAEgD,KAAK,IAAI;AACf,mBAAKP,QAAL,CAAc;AAAEzC,gBAAAA,OAAO,EAAEgD,KAAK,CAACC,MAAN,CAAaC;AAAxB,eAAd;AACH;AATL,YA1DJ;AAAA,UADO,gBAwEP,mBA1ER,EA8EKjD,YAAY,IAAI,EAAhB,iBAAsB;AACnB,UAAA,SAAS,EAAElB,MAAM,CAACwE,EADC;AAEnB,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAFY;AAAA,oBAEevD;AAFf,UA9E3B;AAAA,QA9BJ,EAiHKZ,UAAU,iBAAI;AAAK,QAAA,SAAS,EAAEN,MAAM,CAACoD,iBAAvB;AACX,QAAA,KAAK,EAAE;AAAEF,UAAAA,SAAS,EAAE,MAAb;AAAqBG,UAAAA,YAAY,EAAE,OAAnC;AAA4CC,UAAAA,UAAU,EAAE,MAAxD;AAAgEpB,UAAAA,KAAK,EAAE;AAAvE,SADI;AAAA,gCAEX;AACI,UAAA,SAAS,EAAElC,MAAM,CAACuD,OADtB;AAEI,UAAA,KAAK,EAAE;AAAEnB,YAAAA,eAAe,EAAEvC,MAAM,CAAC6E;AAA1B,WAFX;AAGI,UAAA,EAAE,EAAE1E,MAAM,CAACyD,YAHf;AAII,UAAA,OAAO,EAAE,MAAM;AACX,gBAAInD,UAAJ,EACI,KAAKoD,QAAL,CAAc;AACVpD,cAAAA,UAAU,EAAE,KADF;AAEVK,cAAAA,YAAY,EAAE,KAFJ;AAGVC,cAAAA,MAAM,EAAE,EAHE;AAIVC,cAAAA,IAAI,EAAE,EAJI;AAKVC,cAAAA,SAAS,EAAE,EALD;AAMVC,cAAAA,WAAW,EAAE,IANH;AAOVC,cAAAA,KAAK,EAAE,EAPG;AAQVC,cAAAA,OAAO,EAAE,EARC;AAUVC,cAAAA,YAAY,EAAE;AAVJ,aAAd;AAYP,WAlBL;AAAA,iCAmBI;AAAG,YAAA,SAAS,EAAElB,MAAM,CAAC4D,WAArB;AAAA;AAAA;AAnBJ,UAFW,eAuBX;AACI,UAAA,SAAS,EAAE5D,MAAM,CAACuD,OADtB;AAEI,UAAA,KAAK,EAAE;AAAEnB,YAAAA,eAAe,EAAEvC,MAAM,CAACwC;AAA1B,WAFX;AAGI,UAAA,EAAE,EAAErC,MAAM,CAACyD,YAHf;AAII,UAAA,OAAO,EAAE,MAAM;AACX,gBAAInD,UAAJ,EAAgB;AACZ,kBAAIK,YAAJ,EAAkB;AACd,oBACI,KAAKS,gBAAL,CAAsB,KAAKb,KAAL,CAAWK,MAAjC,MACC,KAAKL,KAAL,CAAWM,IAAX,IAAmB,OAAnB,IAA8B,KAAKN,KAAL,CAAWM,IAAX,IAAmB,QADlD,KAEA,KAAKO,gBAAL,CAAsB,KAAKb,KAAL,CAAWO,SAAjC,CAFA,IAGA,KAAKM,gBAAL,CAAsB,KAAKb,KAAL,CAAWS,KAAjC,CAHA,IAIA,KAAKI,gBAAL,CAAsB,KAAKb,KAAL,CAAWU,OAAjC,CALJ,EAOIlB,wBAAwB,CAAC4E,IAAzB,CAA8B,IAA9B,EAAoC;AAChC/D,kBAAAA,MAAM,EAAE,KAAKL,KAAL,CAAWK,MADa;AAEhCD,kBAAAA,YAAY,EAAE,IAFkB;AAGhCE,kBAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWM,IAHe;AAIhCC,kBAAAA,SAAS,EAAE,KAAKP,KAAL,CAAWO,SAJU;AAKhCE,kBAAAA,KAAK,EAAE,KAAKT,KAAL,CAAWS,KALc;AAMhCC,kBAAAA,OAAO,EAAE,KAAKV,KAAL,CAAWU;AANY,iBAApC,EAPJ,KAgBI,KAAKyC,QAAL,CAAc;AACVxC,kBAAAA,YAAY,EAAE;AADJ,iBAAd;AAGP,eApBD,MAqBK;AACD,oBACI,KAAKE,gBAAL,CAAsB,KAAKb,KAAL,CAAWS,KAAjC,KACA,KAAKI,gBAAL,CAAsB,KAAKb,KAAL,CAAWU,OAAjC,CAFJ,EAIIlB,wBAAwB,CAAC4E,IAAzB,CAA8B,IAA9B,EAAoC;AAChChE,kBAAAA,YAAY,EAAE,KADkB;AAEhCK,kBAAAA,KAAK,EAAE,KAAKT,KAAL,CAAWS,KAFc;AAGhCC,kBAAAA,OAAO,EAAE,KAAKV,KAAL,CAAWU;AAHY,iBAApC,EAJJ,KAUI,KAAKyC,QAAL,CAAc;AACVxC,kBAAAA,YAAY,EAAE;AADJ,iBAAd;AAGP;AACJ;AACJ,WA3CL;AAAA,oBA4CK,KAAKX,KAAL,CAAWG,OAAX,gBACG,KAAC,MAAD;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,KAAK,EAAEb,MAAM,CAAC8D,KAFlB;AAGI,YAAA,MAAM,EAAE,MAHZ;AAII,YAAA,KAAK,EAAE;AAJX,YADH,gBAMG;AAAG,YAAA,SAAS,EAAE3D,MAAM,CAAC4D,WAArB;AAAA;AAAA;AAlDR,UAvBW;AAAA,QAjHnB;AAAA,MADJ;AAiMH;;AAjQyD;AAkQ7D","sourcesContent":["import firebase from 'firebase';\nimport React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, formatDateAllValues, pendingProcessesFunction } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport Loader from 'react-loader-spinner';\nexport default class PendingProcesses extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            result: {},\n            listOfProcesses: [],\n\n            loading: false,\n\n            addProcess: false,\n            isNewProcess: false,\n            userID: '',\n            type: '',\n            mainTopic: '',\n            timeCreated: null,\n            title: '',\n            details: '',\n\n            errorMessage: '',\n\n        };\n    };\n    componentDidMount() {\n\n    };\n    renderFunctionToSubmit = () => {\n        const { addProcess } = this.state;\n        if (addProcess) {\n\n        }\n    };\n    stringIsNotEmpty(s) {\n        return (s.length >= 4);\n    }\n    render() {\n        let results = [];\n        const keys = Object.keys(this.state.result).sort((a, b) => b - a);\n        for (let k = 0; k < keys.length; k++) {\n            const data = this.state.result[keys[k]];\n            results.push(\n                <>\n                    <div\n                        className={styles.previousMessageSum}\n                        onClick={() => {\n                            //this.setState({ currentData: data, index: k })\n                        }}>\n                        <div style={{ width: '90px', height: '30px', backgroundColor: data.type == 'rider' ? colors.GREEN : colors.BLUE, borderRadius: '5px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                            <p className={styles.readOrUnreadText} style={{ color: '#ffffff', fontFamily: 'Gilroy-ExtraBold' }}>{data.type == 'rider' ? 'Rider' : 'Driver'}</p>\n                        </div>\n\n                        <p style={{ fontSize: '105%', fontFamily: 'Gilroy-Bold', color: colors.GREEN }}>\n                            <span style={{ color: colors.GREY }}>{displayDate}</span>\n                        </p>\n                    </div>\n                    {\n                        k == keys.length - 1 ?\n                            <></> :\n                            <div className={styles.sharedLine} style={{ marginTop: '5px' }}></div>\n                    }\n                </>\n            )\n        };\n        const { addProcess, errorMessage, isNewProcess } = this.state;\n        return (\n            <div className={styles.cont}>\n                {!(addProcess) && !(isNewProcess) &&\n                    <div className={styles.enterKilometerDiv}\n                        style={{ marginTop: '20px', marginBottom: '0px', marginLeft: '2.5%', width: '95%' }}>\n                        <div\n                            className={styles.button2}\n                            style={{ backgroundColor: colors.GREEN, width: '100%', maxWidth: 'initial' }}\n                            id={styles.buttonBottom}\n                            onClick={() => {\n                                this.setState({\n                                    addProcess: true,\n                                    isNewProcess: true,\n                                    userID: '',\n                                    type: '',\n                                    mainTopic: '',\n                                    title: '',\n                                    details: '',\n\n                                    errorMessage: '',\n                                })\n                            }}>\n                            {this.state.loading ?\n                                <Loader\n                                    type=\"TailSpin\"\n                                    color={colors.WHITE}\n                                    height={'20px'}\n                                    width={'20px'} /> :\n                                <p className={styles.buttonText1}>Add New Process</p>}\n                        </div>\n                    </div>}\n                <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                    <p className={styles.title} style={{ color: colors.BLACK }}>List of pending processes</p>\n                    {addProcess ?\n                        <>\n                            {isNewProcess ?\n                                <>\n                                    <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '0px' }}>\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"User ID\"\n                                            className={styles.searchInput}\n                                            style={{ width: '67%' }}\n                                            value={this.state.userID}\n                                            onChange={event => {\n                                                this.setState({ userID: event.target.value });\n                                            }}\n                                        />\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"Type\"\n                                            className={styles.searchInput}\n                                            style={{ width: '32%' }}\n                                            value={this.state.type}\n                                            onChange={event => {\n                                                this.setState({ type: event.target.value.toLowerCase() });\n                                            }}\n                                        />\n                                    </div>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Main topic\"\n                                        className={styles.searchInput}\n                                        style={{ width: '90%', marginTop: '15px' }}\n                                        value={this.state.mainTopic}\n                                        onChange={event => {\n                                            this.setState({ mainTopic: event.target.value });\n                                        }}\n                                    />\n                                </> :\n                                <>\n                                    <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '0px' }}>\n                                        <p className={styles.mainText}>{`• User ID - ${this.state.userID}`}</p>\n                                        <div style={{ width: '90px', height: '30px', backgroundColor: this.state.type == 'rider' ? colors.GREEN : colors.BLUE, borderRadius: '5px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                            <p className={styles.readOrUnreadText} style={{ color: '#ffffff', fontFamily: 'Gilroy-ExtraBold' }}>{this.state.type == 'rider' ? 'Rider' : 'Driver'}</p>\n                                        </div>\n                                    </div>\n                                    <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '0px' }}>\n                                        <p className={styles.mainText}>{`• Topic - ${this.state.mainTopic}`}</p>\n                                        <p className={styles.mainText}>{`Created at  ( ${formatDateAllValues(new Date(this.state.timeCreated))} )`}</p>\n                                    </div>\n                                </>}\n                            <input\n                                type=\"text\"\n                                placeholder=\"Title\"\n                                className={styles.searchInput}\n                                style={{ width: '90%', marginTop: '15px' }}\n                                value={this.state.title}\n                                onChange={event => {\n                                    this.setState({ title: event.target.value });\n                                }}\n                            />\n                            <textarea\n                                autoCapitalize={true}\n                                type=\"text\"\n                                placeholder=\"Details\"\n                                className={styles.contactUsContent}\n                                style={{ width: '90%', marginTop: '15px', fontSize: '100%' }}\n                                value={this.state.details}\n                                onChange={event => {\n                                    this.setState({ details: event.target.value });\n                                }}\n                            />\n                        </>\n                        :\n                        <>\n\n                        </>\n                    }\n                    {errorMessage != '' && <p\n                        className={styles.em}\n                        style={{ textAlign: 'initial' }}>{errorMessage}</p>}\n                </div>\n\n                {addProcess && <div className={styles.enterKilometerDiv}\n                    style={{ marginTop: '20px', marginBottom: '150px', marginLeft: '2.5%', width: '95%' }}>\n                    <div\n                        className={styles.button2}\n                        style={{ backgroundColor: colors.RED }}\n                        id={styles.buttonBottom}\n                        onClick={() => {\n                            if (addProcess)\n                                this.setState({\n                                    addProcess: false,\n                                    isNewProcess: false,\n                                    userID: '',\n                                    type: '',\n                                    mainTopic: '',\n                                    timeCreated: null,\n                                    title: '',\n                                    details: '',\n\n                                    errorMessage: '',\n                                })\n                        }}>\n                        <p className={styles.buttonText1}>Cancel</p>\n                    </div>\n                    <div\n                        className={styles.button2}\n                        style={{ backgroundColor: colors.GREEN }}\n                        id={styles.buttonBottom}\n                        onClick={() => {\n                            if (addProcess) {\n                                if (isNewProcess) {\n                                    if (\n                                        this.stringIsNotEmpty(this.state.userID) &&\n                                        (this.state.type == 'rider' || this.state.type == 'driver') &&\n                                        this.stringIsNotEmpty(this.state.mainTopic) &&\n                                        this.stringIsNotEmpty(this.state.title) &&\n                                        this.stringIsNotEmpty(this.state.details)\n                                    )\n                                        pendingProcessesFunction.call(this, {\n                                            userID: this.state.userID,\n                                            isNewProcess: true,\n                                            type: this.state.type,\n                                            mainTopic: this.state.mainTopic,\n                                            title: this.state.title,\n                                            details: this.state.details,\n                                        });\n                                    else\n                                        this.setState({\n                                            errorMessage: 'Please verify all fields are entered correctly and type is either \"driver\" or \"rider\"'\n                                        });\n                                }\n                                else {\n                                    if (\n                                        this.stringIsNotEmpty(this.state.title) &&\n                                        this.stringIsNotEmpty(this.state.details)\n                                    )\n                                        pendingProcessesFunction.call(this, {\n                                            isNewProcess: false,\n                                            title: this.state.title,\n                                            details: this.state.details,\n                                        });\n                                    else\n                                        this.setState({\n                                            errorMessage: 'Please verify all fields are entered correctly'\n                                        });\n                                }\n                            }\n                        }}>\n                        {this.state.loading ?\n                            <Loader\n                                type=\"TailSpin\"\n                                color={colors.WHITE}\n                                height={'20px'}\n                                width={'20px'} /> :\n                            <p className={styles.buttonText1}>Add Pending Process</p>}\n                    </div>\n                </div>}\n            </div>\n        )\n\n    }\n};"]},"metadata":{},"sourceType":"module"}