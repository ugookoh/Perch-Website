{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { AiOutlineClose, AiOutlineRight } from 'react-icons/ai';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, storeCard, deleteCard, buyKilometers } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport { loadStripe } from '@stripe/stripe-js';\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst stripePromise = loadStripe('pk_test_RjADdW2vGwFAgOOk7ws1juNB002JV727O8');\nexport default class PerchWallet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"loadCards\", () => {\n      const {\n        userID\n      } = this.state.userDetails;\n      firebase.database().ref(`cards/${userID}`).once('value', snapshot => {\n        if (!!snapshot) {\n          let arrayOfLast4 = [],\n              i = 0;\n\n          for (let key in snapshot.val()) {\n            if (key != 'selected') arrayOfLast4[i] = {\n              last4: snapshot.val()[key].card.last4,\n              brand: snapshot.val()[key].card.brand,\n              cardId: snapshot.val()[key].card.cardId\n            };else if (key == 'selected') this.setState({\n              selected: snapshot.val()[key]\n            });\n            i++;\n          }\n\n          this.setState({\n            cards: arrayOfLast4\n          });\n        }\n\n        ;\n      });\n    });\n\n    _defineProperty(this, \"setSelected\", value => {\n      const {\n        userID\n      } = this.state.userDetails;\n      firebase.database().ref(`cards/${userID}`).update({\n        selected: value\n      }).then(() => {\n        this.setState({\n          selected: value\n        });\n      }).catch(error => {\n        this.setState({\n          errorMessage: error.message\n        });\n      });\n    });\n\n    _defineProperty(this, \"removeCard\", index => {\n      let {\n        cards\n      } = this.state;\n      cards.splice(index, 1);\n      this.setState({\n        cards: cards\n      });\n    });\n\n    this.state = {\n      buyKilometers: false,\n      addCard: false,\n      userDetails: this.props.userDetails,\n      quantity: 0,\n      cards: [],\n      selected: null,\n      index: 0,\n      name: '',\n      cardNumber: '',\n      expiryDate: '',\n      ccv: '',\n      errorMessage: '',\n      loading: false,\n      rate: 0,\n      kms: '',\n      cost: 0,\n      paymentLoading: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      userID\n    } = this.state.userDetails;\n    firebase.database().ref(`perchKilometers/${userID}/quantity`).on('value', snapshot => {\n      if (!!snapshot) this.setState({\n        quantity: snapshot.val()\n      });\n    });\n    firebase.database().ref(`costPerPerchKM`).on('value', snapshot => {\n      this.setState({\n        rate: snapshot.val()\n      });\n    });\n    this.loadCards();\n  }\n\n  render() {\n    var _this$state$rate, _this$state$cost;\n\n    let cards = [];\n\n    for (let i = 0; i < this.state.cards.length; i++) cards.push( /*#__PURE__*/_jsx(PaymentCard, {\n      userID: this.state.userDetails.userID,\n      card: this.state.cards[i],\n      index: i,\n      removeCard: this.removeCard,\n      setSelected: this.setSelected,\n      selectedCard: this.state.selected,\n      selected: this.state.selected === this.state.cards[i].last4,\n      type: this.state.buyKilometers ? 'pickPayment' : 'listOfCards'\n    }, this.state.cards[i].last4));\n\n    return /*#__PURE__*/_jsx(Elements, {\n      stripe: stripePromise,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: styles.cont,\n        children: this.state.buyKilometers ? //buy kilometers\n        this.state.paymentLoading ? /*#__PURE__*/_jsx(_Fragment, {\n          children: /*#__PURE__*/_jsx(ProcessPayment, {\n            goBack: () => {\n              this.setState({\n                buyKilometers: false,\n                addCard: false,\n                kms: '',\n                errorMessage: '',\n                paymentLoading: false\n              });\n            },\n            toSend: {\n              cardId: this.state.cards[this.state.index].cardId,\n              customerID: this.state.userDetails.stripeCustomerID,\n              quantity: Number(this.state.kms),\n              userID: this.state.userDetails.userID,\n              timestamp: new Date().getTime(),\n              isAutomatic: true\n            }\n          })\n        }) : /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Enter the amount of kilometers you would like to purchase\"\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter amount of kilometers\",\n              value: this.state.kms,\n              onChange: e => {\n                const value = e.target.value;\n\n                if (value.length <= 3) {\n                  const cost = Number(value) * this.state.rate;\n                  this.setState({\n                    kms: value,\n                    cost: cost\n                  });\n                }\n              },\n              className: styles.inputPaymentPanel\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.enterKilometerDiv,\n              style: {\n                marginTop: '20px'\n              },\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Medium',\n                  color: colors.GREY\n                },\n                className: styles.text,\n                children: \"Cost per kilometer\"\n              }), /*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Medium'\n                },\n                className: styles.text,\n                children: `$ ${(_this$state$rate = this.state.rate) === null || _this$state$rate === void 0 ? void 0 : _this$state$rate.toFixed(2)}`\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.sharedLine,\n              style: {\n                marginTop: '20px',\n                width: '90%'\n              }\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.enterKilometerDiv,\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Bold',\n                  fontSize: '120%'\n                },\n                className: styles.text,\n                children: \"Total\"\n              }), /*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  width: 'initial',\n                  margin: '0px',\n                  fontFamily: 'Gilroy-Bold',\n                  color: colors.GREEN,\n                  fontSize: '120%'\n                },\n                className: styles.text,\n                children: `$ ${(_this$state$cost = this.state.cost) === null || _this$state$cost === void 0 ? void 0 : _this$state$cost.toFixed(2)}`\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Payment Methods\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                marginBottom: '20px'\n              },\n              children: \"List of available payment methods. New payment methods can also be added.\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.paymentCont,\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.paymentItem,\n                children: [cards, /*#__PURE__*/_jsxs(\"div\", {\n                  className: styles.paymentRow,\n                  id: styles.addCardPayment,\n                  children: [/*#__PURE__*/_jsxs(\"div\", {\n                    style: {\n                      flexDirection: 'row',\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"img\", {\n                      src: \"/PayPalLogo.svg\",\n                      alt: \"Perch Payment\",\n                      className: styles.visaIcon,\n                      style: {\n                        marginRight: '15px',\n                        marginLeft: '0px'\n                      }\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: styles.paymentCardNumber,\n                      id: styles.paymentCardNumber_,\n                      children: \"PayPal\"\n                    })]\n                  }), /*#__PURE__*/_jsx(AiOutlineRight, {\n                    color: colors.BLACK\n                  })]\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: styles.sharedLine,\n                  style: {\n                    marginTop: '0px',\n                    width: '100%'\n                  }\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: styles.paymentRow,\n                  id: styles.addCardPayment,\n                  onClick: () => {\n                    this.setState({\n                      addCard: true,\n                      buyKilometers: false,\n                      errorMessage: ''\n                    });\n                  },\n                  children: [/*#__PURE__*/_jsxs(\"div\", {\n                    style: {\n                      flexDirection: 'row',\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"img\", {\n                      src: \"/addPaymentCardIcon.svg\",\n                      alt: \"Perch Payment\",\n                      className: styles.visaIcon,\n                      style: {\n                        marginRight: '15px'\n                      }\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: styles.paymentCardNumber,\n                      id: styles.paymentCardNumber_,\n                      children: \"Add Debit / Credit Card\"\n                    })]\n                  }), /*#__PURE__*/_jsx(AiOutlineRight, {\n                    color: colors.BLACK\n                  })]\n                })]\n              })\n            }), this.state.errorMessage && /*#__PURE__*/_jsx(\"p\", {\n              className: styles.em,\n              style: {\n                textAlign: 'initial'\n              },\n              children: this.state.errorMessage\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.enterKilometerDiv,\n            style: {\n              marginTop: '20px',\n              marginBottom: '150px',\n              marginLeft: '2.5%',\n              width: '95%'\n            },\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.RED\n              },\n              id: styles.buttonBottom,\n              onClick: () => {\n                this.setState({\n                  buyKilometers: false,\n                  addCard: false,\n                  errorMessage: ''\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Cancel\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              onClick: () => {\n                if (this.state.kms < 20) this.setState({\n                  errorMessage: 'You can get a minimum of 20 kilometers'\n                });else if (this.state.kms > 100) this.setState({\n                  errorMessage: 'You can get a maximum of 100 kilometers'\n                });else if (this.state.selected) {\n                  for (let i = 0; i < this.state.cards.length; i++) if (this.state.selected === this.state.cards[i].last4) this.setState({\n                    index: i,\n                    paymentLoading: true\n                  }); // buyKilometers.call(this, {\n                  //     cardId: this.state.cards[i].cardId,\n                  //     customerID: this.state.userDetails.stripeCustomerID,\n                  //     quantity: Number(this.state.kms),\n                  //     userID: this.state.userDetails.userID,\n                  //     timestamp: new Date().getTime(),\n                  // })\n\n                } else this.setState({\n                  errorMessage: 'Please select or add a payment method'\n                });\n              },\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.GREEN\n              },\n              id: styles.buttonBottom,\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Buy Kilometers\"\n              })\n            })]\n          })]\n        }) : this.state.addCard ?\n        /*#__PURE__*/\n        //add card\n        _jsx(_Fragment, {\n          children: /*#__PURE__*/_jsx(AddCardForm, {\n            userID: this.state.userDetails.userID,\n            cancel: () => {\n              this.loadCards();\n              this.setState({\n                errorMessage: '',\n                addCard: false,\n                buyKilometers: false\n              });\n            }\n          })\n        }) :\n        /*#__PURE__*/\n        //main page\n        _jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Kilometers\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY\n              },\n              children: \"You can make kilometer purchases from this panel. Also remeber that sharing your code with friends who book their first ride automatically gives you free kilometers.\"\n            }), /*#__PURE__*/_jsx(\"img\", {\n              src: \"/walletImage.svg\",\n              alt: \"Purchase Perch Kilometers\",\n              className: styles.walletImage\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                width: 'initial',\n                marginTop: '20px'\n              },\n              children: `${this.state.quantity.toFixed(1)} kilometers`\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.button1,\n              style: {},\n              onClick: () => {\n                this.setState({\n                  buyKilometers: true,\n                  addCard: false,\n                  errorMessage: ''\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Buy kilometers\"\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px',\n              marginBottom: '150px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Payment Methods\"\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                marginBottom: '20px'\n              },\n              children: \"List of available payment methods. New payment methods can also be added.\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.paymentCont,\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.paymentItem,\n                children: [cards, /*#__PURE__*/_jsxs(\"div\", {\n                  className: styles.paymentRow,\n                  id: styles.addCardPayment,\n                  onClick: () => {\n                    this.setState({\n                      addCard: true,\n                      buyKilometers: false,\n                      errorMessage: ''\n                    });\n                  },\n                  children: [/*#__PURE__*/_jsxs(\"div\", {\n                    style: {\n                      flexDirection: 'row',\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"img\", {\n                      src: \"/addPaymentCardIcon.svg\",\n                      alt: \"Perch Payment\",\n                      className: styles.visaIcon,\n                      style: {\n                        marginRight: '15px'\n                      }\n                    }), /*#__PURE__*/_jsx(\"p\", {\n                      className: styles.paymentCardNumber,\n                      id: styles.paymentCardNumber_,\n                      children: \"Add Debit / Credit Card\"\n                    })]\n                  }), /*#__PURE__*/_jsx(AiOutlineRight, {\n                    color: colors.BLACK\n                  })]\n                })]\n              })\n            })]\n          })]\n        })\n      })\n    });\n  }\n\n}\n;\n\nclass PaymentCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deleteCard: false,\n      loading: false\n    };\n  }\n\n  render() {\n    const {\n      selected,\n      setSelected,\n      card,\n      userID,\n      removeCard,\n      index,\n      selectedCard\n    } = this.props;\n    const {\n      last4,\n      brand\n    } = card;\n    if (this.props.type == 'listOfCards') return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.paymentRow,\n        id: styles.paymentRow_,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            flexDirection: 'row',\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg',\n            alt: \"Perch Payment\",\n            className: brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            className: styles.paymentCardNumber,\n            id: styles.paymentCardNumber_,\n            children: [\"XXXX XXXX XXXX \", last4]\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          id: styles.paymentRowButton,\n          children: this.state.deleteCard ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.RED,\n                width: '80%'\n              },\n              onClick: () => {\n                deleteCard.call(this, userID, last4, selectedCard);\n                removeCard(index);\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                id: styles.paymentCardNumber_,\n                children: \"Delete this card?\"\n              })\n            }), /*#__PURE__*/_jsx(AiOutlineClose, {\n              className: styles.closeDeletePayment,\n              onClick: () => {\n                this.setState({\n                  deleteCard: false\n                });\n              }\n            })]\n          }) : /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: selected ? styles.buttonSelected : styles.button2,\n              style: {\n                backgroundColor: colors.GREEN\n              },\n              onClick: () => {\n                setSelected(last4);\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                id: styles.paymentCardNumber_,\n                children: selected ? 'Selected' : 'Select card'\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.RED\n              },\n              onClick: () => {\n                this.setState({\n                  deleteCard: true\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                id: styles.paymentCardNumber_,\n                children: \"Delete Card\"\n              })\n            })]\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.sharedLine,\n        style: {\n          marginTop: '20px',\n          width: '100%'\n        }\n      })]\n    });else if (this.props.type == 'pickPayment') return (\n      /*#__PURE__*/\n      //TO MAKE A SELECTED ONE, THE PARENT COMPONENT SHOULD HAVE A SELECTED ITEM ID AND WE COMPARE ID HERE TO SHOW IF IT IS CONFIRMED OR NOT\n      _jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.paymentRow,\n          id: styles.addCardPayment_,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            style: {\n              flexDirection: 'row',\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              src: brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg',\n              alt: \"Perch Payment\",\n              className: brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard\n            }), /*#__PURE__*/_jsxs(\"p\", {\n              className: styles.paymentCardNumber,\n              id: styles.paymentCardNumber_,\n              children: [\"\\u2022\\u2022\\u2022\\u2022 \", last4]\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.pickPaymentSelected,\n            id: selected ? styles.selectedID : styles.selectID,\n            style: {\n              backgroundColor: colors.GREEN\n            },\n            onClick: () => {\n              setSelected(last4);\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              id: styles.paymentCardNumber_,\n              children: selected ? 'Selected' : 'Select'\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.sharedLine,\n          style: {\n            marginTop: '0px',\n            width: '100%'\n          }\n        })]\n      })\n    );\n  }\n\n}\n\n;\n\nconst AddCardForm = ({\n  cancel,\n  userID\n}) => {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const createTokenWithCard = async () => {\n    setLoading(true);\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    ; // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      token\n    } = await stripe.createToken(cardElement);\n\n    if (error) {\n      setErrorMessage(error.message);\n      setLoading(false);\n    } else {\n      storeCard.call(this, userID, token, setLoading, setErrorMessage, cancel);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      style: {\n        backgroundColor: colors.WHITE,\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsx(\"p\", {\n        className: styles.title,\n        style: {\n          color: colors.BLACK\n        },\n        children: \"Add card\"\n      }), /*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        placeholder: \"Name on Card\",\n        className: styles.inputPaymentPanel,\n        id: styles.inputPaymentPanel_ADD,\n        style: {\n          marginTop: '10px'\n        },\n        value: name,\n        onChange: e => {\n          const value = e.target.value;\n          setName(value);\n        }\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.inputPaymentPanel,\n        children: /*#__PURE__*/_jsx(CardElement, {\n          options: {\n            hidePostalCode: true,\n            style: {\n              base: {\n                color: '#303238',\n                fontSize: '16px',\n                fontFamily: '\"Gill Sans\", sans-serif',\n                fontSmoothing: 'antialiased',\n                '::placeholder': {\n                  color: '#757575'\n                }\n              },\n              invalid: {\n                color: '#e5424d',\n                ':focus': {\n                  color: '#303238'\n                }\n              }\n            }\n          }\n        })\n      }), errorMessage && /*#__PURE__*/_jsx(\"p\", {\n        className: styles.em,\n        style: {\n          textAlign: 'initial'\n        },\n        children: errorMessage\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.enterKilometerDiv,\n      style: {\n        marginTop: '20px',\n        marginBottom: '150px',\n        marginLeft: '2.5%',\n        width: '95%'\n      },\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: styles.button2,\n        style: {\n          backgroundColor: colors.RED\n        },\n        id: styles.buttonBottom,\n        onClick: cancel,\n        children: /*#__PURE__*/_jsx(\"p\", {\n          className: styles.buttonText1,\n          children: \"Cancel\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.button2,\n        style: {\n          backgroundColor: colors.GREEN\n        },\n        id: styles.buttonBottom,\n        onClick: () => {\n          if (name.length <= 3) setErrorMessage('Please enter the full name on the card');else createTokenWithCard();\n        },\n        children: loading ? /*#__PURE__*/_jsx(Loader, {\n          type: \"TailSpin\",\n          color: colors.WHITE,\n          height: '20px',\n          width: '20px'\n        }) : /*#__PURE__*/_jsx(\"p\", {\n          className: styles.buttonText1,\n          children: \"Add Card\"\n        })\n      })]\n    })]\n  });\n};\n\nconst ProcessPayment = ({\n  goBack,\n  toSend\n}) => {\n  const {\n    0: paymentError,\n    1: setPaymentError\n  } = useState(false);\n  const {\n    0: paymentCompleted,\n    1: setPaymentCompleted\n  } = useState(false);\n  const {\n    0: paymentErrorMessage,\n    1: setPaymentErrorMessage\n  } = useState('');\n  const stripe = useStripe(); //const elements = useElements();\n\n  const startPayment = async () => {\n    if (!stripe) return;\n    axios.post(`https://us-central1-perch-01.cloudfunctions.net/buyPerchKilometers`, _objectSpread(_objectSpread({}, toSend), {}, {\n      status: 'initial'\n    })).then(result => {\n      const {\n        status,\n        client_secret,\n        id\n      } = result.data;\n      toSend.paymentIntentId = id;\n      toSend.status = 'confirm_payment';\n\n      if (status == 'succeeded') {\n        setPaymentCompleted(true);\n      } else if (status == 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(data => {\n          if (data.paymentIntent.status == 'succeeded') {\n            axios.post(`https://us-central1-perch-01.cloudfunctions.net/buyPerchKilometers`, _objectSpread(_objectSpread({}, toSend), {}, {\n              nativePayType: 'Debit/Credit Card from website',\n              paymentIntentId: id,\n              status: 'payment_completed_on_client'\n            })).then(() => {\n              setPaymentCompleted(true);\n            }).catch(error => {\n              setPaymentError(true);\n              setPaymentErrorMessage(error.message);\n            });\n          }\n        }).catch(error => {\n          setPaymentError(true);\n          setPaymentErrorMessage(error.message);\n        });\n      }\n    }).catch(error => {\n      setPaymentError(true);\n      setPaymentErrorMessage(error.message);\n    });\n  };\n\n  useEffect(() => {\n    startPayment();\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    style: {\n      backgroundColor: colors.WHITE,\n      marginTop: '20px'\n    },\n    children: [!paymentCompleted && !paymentError && /*#__PURE__*/_jsx(Loader, {\n      type: \"TailSpin\",\n      color: colors.GREEN,\n      height: '100px',\n      width: '100px',\n      style: {\n        marginTop: 25\n      }\n    }), /*#__PURE__*/_jsx(\"p\", {\n      className: styles.title,\n      style: {\n        color: colors.GREY,\n        width: 'initial',\n        marginTop: 20,\n        marginBottom: 30,\n        paddingRight: 15,\n        paddingLeft: 15,\n        textAlign: 'center'\n      },\n      children: paymentCompleted ? `Your payment has been processed. Thank you.` : paymentError ? `Your payment failed. Please contact your bank or try again later` : `Your payment is currently processing. Please wait.`\n    }), (paymentCompleted || paymentError) && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.button1,\n      style: {\n        marginTop: 0\n      },\n      onClick: goBack,\n      children: /*#__PURE__*/_jsx(\"p\", {\n        className: styles.buttonText1,\n        children: \"Go back\"\n      })\n    })]\n  });\n};","map":{"version":3,"sources":["/Users/ugo/Documents/Perch_Projects/Perch-Website/functions/panels/userPanels/perchWallet.js"],"names":["React","useEffect","useState","AiOutlineClose","AiOutlineRight","colors","storeCard","deleteCard","buyKilometers","styles","firebase","loadStripe","axios","Loader","CardElement","Elements","useElements","useStripe","stripePromise","PerchWallet","Component","constructor","props","userID","state","userDetails","database","ref","once","snapshot","arrayOfLast4","i","key","val","last4","card","brand","cardId","setState","selected","cards","value","update","then","catch","error","errorMessage","message","index","splice","addCard","quantity","name","cardNumber","expiryDate","ccv","loading","rate","kms","cost","paymentLoading","componentDidMount","on","loadCards","render","length","push","removeCard","setSelected","cont","customerID","stripeCustomerID","Number","timestamp","Date","getTime","isAutomatic","container","backgroundColor","WHITE","marginTop","title","color","BLACK","e","target","inputPaymentPanel","enterKilometerDiv","width","margin","fontFamily","GREY","text","toFixed","sharedLine","fontSize","GREEN","marginBottom","paymentCont","paymentItem","paymentRow","addCardPayment","flexDirection","display","alignItems","visaIcon","marginRight","marginLeft","paymentCardNumber","paymentCardNumber_","em","textAlign","button2","RED","buttonBottom","buttonText1","walletImage","button1","PaymentCard","selectedCard","type","paymentRow_","masterCardIcon","genericCard","paymentRowButton","call","closeDeletePayment","buttonSelected","addCardPayment_","pickPaymentSelected","selectedID","selectID","AddCardForm","cancel","setName","setErrorMessage","setLoading","stripe","elements","createTokenWithCard","cardElement","getElement","token","createToken","inputPaymentPanel_ADD","hidePostalCode","style","base","fontSmoothing","invalid","ProcessPayment","goBack","toSend","paymentError","setPaymentError","paymentCompleted","setPaymentCompleted","paymentErrorMessage","setPaymentErrorMessage","startPayment","post","status","result","client_secret","id","data","paymentIntentId","confirmCardPayment","paymentIntent","nativePayType","paddingRight","paddingLeft"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,4CAAP;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,gBAA/C;AACA,OAAO,+DAAP;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,aAAxC,QAA8D,iBAA9D;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SACIC,WADJ,EAEIC,QAFJ,EAGIC,WAHJ,EAIIC,SAJJ,QAKO,yBALP;;;;AAMA,MAAMC,aAAa,GAAGP,UAAU,CAAC,4CAAD,CAAhC;AAEA,eAAe,MAAMQ,WAAN,SAA0BnB,KAAK,CAACoB,SAAhC,CAA0C;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,uCAwCP,MAAM;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAa,KAAKC,KAAL,CAAWC,WAA9B;AACAf,MAAAA,QAAQ,CAACgB,QAAT,GAAoBC,GAApB,CAAyB,SAAQJ,MAAO,EAAxC,EAA2CK,IAA3C,CAAgD,OAAhD,EAAyDC,QAAQ,IAAI;AACjE,YAAI,CAAC,CAACA,QAAN,EAAgB;AACZ,cAAIC,YAAY,GAAG,EAAnB;AAAA,cAAuBC,CAAC,GAAG,CAA3B;;AACA,eAAK,IAAIC,GAAT,IAAgBH,QAAQ,CAACI,GAAT,EAAhB,EAAgC;AAC5B,gBAAID,GAAG,IAAI,UAAX,EACIF,YAAY,CAACC,CAAD,CAAZ,GAAkB;AACdG,cAAAA,KAAK,EAAEL,QAAQ,CAACI,GAAT,GAAeD,GAAf,EAAoBG,IAApB,CAAyBD,KADlB;AAEdE,cAAAA,KAAK,EAAEP,QAAQ,CAACI,GAAT,GAAeD,GAAf,EAAoBG,IAApB,CAAyBC,KAFlB;AAGdC,cAAAA,MAAM,EAAER,QAAQ,CAACI,GAAT,GAAeD,GAAf,EAAoBG,IAApB,CAAyBE;AAHnB,aAAlB,CADJ,KAMK,IAAIL,GAAG,IAAI,UAAX,EACD,KAAKM,QAAL,CAAc;AAAEC,cAAAA,QAAQ,EAAEV,QAAQ,CAACI,GAAT,GAAeD,GAAf;AAAZ,aAAd;AACJD,YAAAA,CAAC;AACJ;;AACD,eAAKO,QAAL,CAAc;AAAEE,YAAAA,KAAK,EAAEV;AAAT,WAAd;AACH;;AAAA;AACJ,OAhBD;AAiBH,KA3DkB;;AAAA,yCA4DJW,KAAD,IAAW;AACrB,YAAM;AAAElB,QAAAA;AAAF,UAAa,KAAKC,KAAL,CAAWC,WAA9B;AACAf,MAAAA,QAAQ,CAACgB,QAAT,GAAoBC,GAApB,CAAyB,SAAQJ,MAAO,EAAxC,EAA2CmB,MAA3C,CAAkD;AAC9CH,QAAAA,QAAQ,EAAEE;AADoC,OAAlD,EAEGE,IAFH,CAEQ,MAAM;AACV,aAAKL,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAEE;AAAZ,SAAd;AACH,OAJD,EAIGG,KAJH,CAISC,KAAK,IAAI;AAAE,aAAKP,QAAL,CAAc;AAAEQ,UAAAA,YAAY,EAAED,KAAK,CAACE;AAAtB,SAAd;AAAgD,OAJpE;AAKH,KAnEkB;;AAAA,wCAoELC,KAAD,IAAW;AACpB,UAAI;AAAER,QAAAA;AAAF,UAAY,KAAKhB,KAArB;AACAgB,MAAAA,KAAK,CAACS,MAAN,CAAaD,KAAb,EAAoB,CAApB;AACA,WAAKV,QAAL,CAAc;AAAEE,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACH,KAxEkB;;AAGf,SAAKhB,KAAL,GAAa;AACThB,MAAAA,aAAa,EAAE,KADN;AAET0C,MAAAA,OAAO,EAAE,KAFA;AAGTzB,MAAAA,WAAW,EAAE,KAAKH,KAAL,CAAWG,WAHf;AAIT0B,MAAAA,QAAQ,EAAE,CAJD;AAKTX,MAAAA,KAAK,EAAE,EALE;AAMTD,MAAAA,QAAQ,EAAE,IAND;AAQTS,MAAAA,KAAK,EAAE,CARE;AAUTI,MAAAA,IAAI,EAAE,EAVG;AAWTC,MAAAA,UAAU,EAAE,EAXH;AAYTC,MAAAA,UAAU,EAAE,EAZH;AAaTC,MAAAA,GAAG,EAAE,EAbI;AAcTT,MAAAA,YAAY,EAAE,EAdL;AAgBTU,MAAAA,OAAO,EAAE,KAhBA;AAkBTC,MAAAA,IAAI,EAAE,CAlBG;AAmBTC,MAAAA,GAAG,EAAE,EAnBI;AAoBTC,MAAAA,IAAI,EAAE,CApBG;AAsBTC,MAAAA,cAAc,EAAE;AAtBP,KAAb;AAyBH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEtC,MAAAA;AAAF,QAAa,KAAKC,KAAL,CAAWC,WAA9B;AACAf,IAAAA,QAAQ,CAACgB,QAAT,GAAoBC,GAApB,CAAyB,mBAAkBJ,MAAO,WAAlD,EAA8DuC,EAA9D,CAAiE,OAAjE,EAA0EjC,QAAQ,IAAI;AAClF,UAAI,CAAC,CAACA,QAAN,EACI,KAAKS,QAAL,CAAc;AAAEa,QAAAA,QAAQ,EAAEtB,QAAQ,CAACI,GAAT;AAAZ,OAAd;AACP,KAHD;AAIAvB,IAAAA,QAAQ,CAACgB,QAAT,GAAoBC,GAApB,CAAyB,gBAAzB,EAA0CmC,EAA1C,CAA6C,OAA7C,EAAsDjC,QAAQ,IAAI;AAC9D,WAAKS,QAAL,CAAc;AAAEmB,QAAAA,IAAI,EAAE5B,QAAQ,CAACI,GAAT;AAAR,OAAd;AACH,KAFD;AAGA,SAAK8B,SAAL;AACH;;AAkCDC,EAAAA,MAAM,GAAG;AAAA;;AACL,QAAIxB,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,KAAL,CAAWgB,KAAX,CAAiByB,MAArC,EAA6ClC,CAAC,EAA9C,EACIS,KAAK,CAAC0B,IAAN,eACI,KAAC,WAAD;AACI,MAAA,MAAM,EAAE,KAAK1C,KAAL,CAAWC,WAAX,CAAuBF,MADnC;AAGI,MAAA,IAAI,EAAE,KAAKC,KAAL,CAAWgB,KAAX,CAAiBT,CAAjB,CAHV;AAII,MAAA,KAAK,EAAEA,CAJX;AAKI,MAAA,UAAU,EAAE,KAAKoC,UALrB;AAMI,MAAA,WAAW,EAAE,KAAKC,WANtB;AAOI,MAAA,YAAY,EAAE,KAAK5C,KAAL,CAAWe,QAP7B;AAQI,MAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWe,QAAX,KAAwB,KAAKf,KAAL,CAAWgB,KAAX,CAAiBT,CAAjB,EAAoBG,KAR1D;AASI,MAAA,IAAI,EAAE,KAAKV,KAAL,CAAWhB,aAAX,GAA2B,aAA3B,GAA2C;AATrD,OAES,KAAKgB,KAAL,CAAWgB,KAAX,CAAiBT,CAAjB,EAAoBG,KAF7B,CADJ;;AAYJ,wBACI,KAAC,QAAD;AAAU,MAAA,MAAM,EAAEhB,aAAlB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAET,MAAM,CAAC4D,IAAvB;AAAA,kBACK,KAAK7C,KAAL,CAAWhB,aAAX,GAA0B;AAEnB,aAAKgB,KAAL,CAAWoC,cAAX,gBACI;AAAA,iCACI,KAAC,cAAD;AACI,YAAA,MAAM,EAAE,MAAM;AACV,mBAAKtB,QAAL,CAAc;AACV9B,gBAAAA,aAAa,EAAE,KADL;AAEV0C,gBAAAA,OAAO,EAAE,KAFC;AAGVQ,gBAAAA,GAAG,EAAE,EAHK;AAIVZ,gBAAAA,YAAY,EAAE,EAJJ;AAKVc,gBAAAA,cAAc,EAAE;AALN,eAAd;AAOH,aATL;AAUI,YAAA,MAAM,EAAE;AACJvB,cAAAA,MAAM,EAAE,KAAKb,KAAL,CAAWgB,KAAX,CAAiB,KAAKhB,KAAL,CAAWwB,KAA5B,EAAmCX,MADvC;AAEJiC,cAAAA,UAAU,EAAE,KAAK9C,KAAL,CAAWC,WAAX,CAAuB8C,gBAF/B;AAGJpB,cAAAA,QAAQ,EAAEqB,MAAM,CAAC,KAAKhD,KAAL,CAAWkC,GAAZ,CAHZ;AAIJnC,cAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,WAAX,CAAuBF,MAJ3B;AAKJkD,cAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EALP;AAMJC,cAAAA,WAAW,EAAE;AANT;AAVZ;AADJ,UADJ,gBAsBI;AAAA,kCACI;AAAK,YAAA,SAAS,EAAEnE,MAAM,CAACoE,SAAvB;AAAkC,YAAA,KAAK,EAAE;AAAEC,cAAAA,eAAe,EAAEzE,MAAM,CAAC0E,KAA1B;AAAiCC,cAAAA,SAAS,EAAE;AAA5C,aAAzC;AAAA,oCACI;AAAG,cAAA,SAAS,EAAEvE,MAAM,CAACwE,KAArB;AAA4B,cAAA,KAAK,EAAE;AAAEC,gBAAAA,KAAK,EAAE7E,MAAM,CAAC8E;AAAhB,eAAnC;AAAA;AAAA,cADJ,eAEI;AACI,cAAA,IAAI,EAAC,MADT;AAEI,cAAA,WAAW,EAAC,4BAFhB;AAGI,cAAA,KAAK,EAAE,KAAK3D,KAAL,CAAWkC,GAHtB;AAII,cAAA,QAAQ,EAAG0B,CAAD,IAAO;AACb,sBAAM3C,KAAK,GAAG2C,CAAC,CAACC,MAAF,CAAS5C,KAAvB;;AACA,oBAAIA,KAAK,CAACwB,MAAN,IAAgB,CAApB,EAAuB;AACnB,wBAAMN,IAAI,GAAGa,MAAM,CAAC/B,KAAD,CAAN,GAAgB,KAAKjB,KAAL,CAAWiC,IAAxC;AACA,uBAAKnB,QAAL,CAAc;AAAEoB,oBAAAA,GAAG,EAAEjB,KAAP;AAAckB,oBAAAA,IAAI,EAAEA;AAApB,mBAAd;AACH;AACJ,eAVL;AAWI,cAAA,SAAS,EAAElD,MAAM,CAAC6E;AAXtB,cAFJ,eAcI;AAAK,cAAA,SAAS,EAAE7E,MAAM,CAAC8E,iBAAvB;AAA0C,cAAA,KAAK,EAAE;AAAEP,gBAAAA,SAAS,EAAE;AAAb,eAAjD;AAAA,sCACI;AAAG,gBAAA,KAAK,EAAE;AAAEQ,kBAAAA,KAAK,EAAE,SAAT;AAAoBC,kBAAAA,MAAM,EAAE,KAA5B;AAAmCC,kBAAAA,UAAU,EAAE,eAA/C;AAAgER,kBAAAA,KAAK,EAAE7E,MAAM,CAACsF;AAA9E,iBAAV;AAAgG,gBAAA,SAAS,EAAElF,MAAM,CAACmF,IAAlH;AAAA;AAAA,gBADJ,eAEI;AAAG,gBAAA,KAAK,EAAE;AAAEJ,kBAAAA,KAAK,EAAE,SAAT;AAAoBC,kBAAAA,MAAM,EAAE,KAA5B;AAAmCC,kBAAAA,UAAU,EAAE;AAA/C,iBAAV;AAA6E,gBAAA,SAAS,EAAEjF,MAAM,CAACmF,IAA/F;AAAA,0BAAuG,KAAD,oBAAK,KAAKpE,KAAL,CAAWiC,IAAhB,qDAAK,iBAAiBoC,OAAjB,CAAyB,CAAzB,CAA4B;AAAvI,gBAFJ;AAAA,cAdJ,eA0BI;AAAK,cAAA,SAAS,EAAEpF,MAAM,CAACqF,UAAvB;AAAmC,cAAA,KAAK,EAAE;AAAEd,gBAAAA,SAAS,EAAE,MAAb;AAAqBQ,gBAAAA,KAAK,EAAE;AAA5B;AAA1C,cA1BJ,eA2BI;AAAK,cAAA,SAAS,EAAE/E,MAAM,CAAC8E,iBAAvB;AAAA,sCACI;AAAG,gBAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAE,SAAT;AAAoBC,kBAAAA,MAAM,EAAE,KAA5B;AAAmCC,kBAAAA,UAAU,EAAE,aAA/C;AAA8DK,kBAAAA,QAAQ,EAAE;AAAxE,iBAAV;AAA4F,gBAAA,SAAS,EAAEtF,MAAM,CAACmF,IAA9G;AAAA;AAAA,gBADJ,eAEI;AAAG,gBAAA,KAAK,EAAE;AAAEJ,kBAAAA,KAAK,EAAE,SAAT;AAAoBC,kBAAAA,MAAM,EAAE,KAA5B;AAAmCC,kBAAAA,UAAU,EAAE,aAA/C;AAA8DR,kBAAAA,KAAK,EAAE7E,MAAM,CAAC2F,KAA5E;AAAmFD,kBAAAA,QAAQ,EAAE;AAA7F,iBAAV;AAAiH,gBAAA,SAAS,EAAEtF,MAAM,CAACmF,IAAnI;AAAA,0BAA2I,KAAD,oBAAK,KAAKpE,KAAL,CAAWmC,IAAhB,qDAAK,iBAAiBkC,OAAjB,CAAyB,CAAzB,CAA4B;AAA3K,gBAFJ;AAAA,cA3BJ;AAAA,YADJ,eAmCI;AAAK,YAAA,SAAS,EAAEpF,MAAM,CAACoE,SAAvB;AAAkC,YAAA,KAAK,EAAE;AAAEC,cAAAA,eAAe,EAAEzE,MAAM,CAAC0E,KAA1B;AAAiCC,cAAAA,SAAS,EAAE;AAA5C,aAAzC;AAAA,oCACI;AAAG,cAAA,SAAS,EAAEvE,MAAM,CAACwE,KAArB;AAA4B,cAAA,KAAK,EAAE;AAAEC,gBAAAA,KAAK,EAAE7E,MAAM,CAAC8E;AAAhB,eAAnC;AAAA;AAAA,cADJ,eAII;AAAG,cAAA,SAAS,EAAE1E,MAAM,CAACmF,IAArB;AAA2B,cAAA,KAAK,EAAE;AAAEV,gBAAAA,KAAK,EAAE7E,MAAM,CAACsF,IAAhB;AAAsBM,gBAAAA,YAAY,EAAE;AAApC,eAAlC;AAAA;AAAA,cAJJ,eAQI;AAAK,cAAA,SAAS,EAAExF,MAAM,CAACyF,WAAvB;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAEzF,MAAM,CAAC0F,WAAvB;AAAA,2BACK3D,KADL,eAEI;AAAK,kBAAA,SAAS,EAAE/B,MAAM,CAAC2F,UAAvB;AAAmC,kBAAA,EAAE,EAAE3F,MAAM,CAAC4F,cAA9C;AAAA,0CACI;AAAK,oBAAA,KAAK,EAAE;AAAEC,sBAAAA,aAAa,EAAE,KAAjB;AAAwBC,sBAAAA,OAAO,EAAE,MAAjC;AAAyCC,sBAAAA,UAAU,EAAE;AAArD,qBAAZ;AAAA,4CACI;AAAK,sBAAA,GAAG,EAAC,iBAAT;AAA2B,sBAAA,GAAG,EAAC,eAA/B;AAA+C,sBAAA,SAAS,EAAE/F,MAAM,CAACgG,QAAjE;AAA2E,sBAAA,KAAK,EAAE;AAAEC,wBAAAA,WAAW,EAAE,MAAf;AAAuBC,wBAAAA,UAAU,EAAE;AAAnC;AAAlF,sBADJ,eAEI;AAAG,sBAAA,SAAS,EAAElG,MAAM,CAACmG,iBAArB;AAAwC,sBAAA,EAAE,EAAEnG,MAAM,CAACoG,kBAAnD;AAAA;AAAA,sBAFJ;AAAA,oBADJ,eAKI,KAAC,cAAD;AAAgB,oBAAA,KAAK,EAAExG,MAAM,CAAC8E;AAA9B,oBALJ;AAAA,kBAFJ,eASI;AAAK,kBAAA,SAAS,EAAE1E,MAAM,CAACqF,UAAvB;AAAmC,kBAAA,KAAK,EAAE;AAAEd,oBAAAA,SAAS,EAAE,KAAb;AAAoBQ,oBAAAA,KAAK,EAAE;AAA3B;AAA1C,kBATJ,eAUI;AAAK,kBAAA,SAAS,EAAE/E,MAAM,CAAC2F,UAAvB;AAAmC,kBAAA,EAAE,EAAE3F,MAAM,CAAC4F,cAA9C;AAA8D,kBAAA,OAAO,EAAE,MAAM;AAAE,yBAAK/D,QAAL,CAAc;AAAEY,sBAAAA,OAAO,EAAE,IAAX;AAAiB1C,sBAAAA,aAAa,EAAE,KAAhC;AAAuCsC,sBAAAA,YAAY,EAAE;AAArD,qBAAd;AAA0E,mBAAzJ;AAAA,0CACI;AAAK,oBAAA,KAAK,EAAE;AAAEwD,sBAAAA,aAAa,EAAE,KAAjB;AAAwBC,sBAAAA,OAAO,EAAE,MAAjC;AAAyCC,sBAAAA,UAAU,EAAE;AAArD,qBAAZ;AAAA,4CACI;AAAK,sBAAA,GAAG,EAAC,yBAAT;AAAmC,sBAAA,GAAG,EAAC,eAAvC;AAAuD,sBAAA,SAAS,EAAE/F,MAAM,CAACgG,QAAzE;AAAmF,sBAAA,KAAK,EAAE;AAAEC,wBAAAA,WAAW,EAAE;AAAf;AAA1F,sBADJ,eAEI;AAAG,sBAAA,SAAS,EAAEjG,MAAM,CAACmG,iBAArB;AAAwC,sBAAA,EAAE,EAAEnG,MAAM,CAACoG,kBAAnD;AAAA;AAAA,sBAFJ;AAAA,oBADJ,eAKI,KAAC,cAAD;AAAgB,oBAAA,KAAK,EAAExG,MAAM,CAAC8E;AAA9B,oBALJ;AAAA,kBAVJ;AAAA;AADJ,cARJ,EA4BK,KAAK3D,KAAL,CAAWsB,YAAX,iBAA2B;AAAG,cAAA,SAAS,EAAErC,MAAM,CAACqG,EAArB;AAAyB,cAAA,KAAK,EAAE;AAAEC,gBAAAA,SAAS,EAAE;AAAb,eAAhC;AAAA,wBAA2D,KAAKvF,KAAL,CAAWsB;AAAtE,cA5BhC;AAAA,YAnCJ,eAkEI;AAAK,YAAA,SAAS,EAAErC,MAAM,CAAC8E,iBAAvB;AAA0C,YAAA,KAAK,EAAE;AAAEP,cAAAA,SAAS,EAAE,MAAb;AAAqBiB,cAAAA,YAAY,EAAE,OAAnC;AAA4CU,cAAAA,UAAU,EAAE,MAAxD;AAAgEnB,cAAAA,KAAK,EAAE;AAAvE,aAAjD;AAAA,oCACI;AAAK,cAAA,SAAS,EAAE/E,MAAM,CAACuG,OAAvB;AAAgC,cAAA,KAAK,EAAE;AAAElC,gBAAAA,eAAe,EAAEzE,MAAM,CAAC4G;AAA1B,eAAvC;AAAwE,cAAA,EAAE,EAAExG,MAAM,CAACyG,YAAnF;AACI,cAAA,OAAO,EAAE,MAAM;AAAE,qBAAK5E,QAAL,CAAc;AAAE9B,kBAAAA,aAAa,EAAE,KAAjB;AAAwB0C,kBAAAA,OAAO,EAAE,KAAjC;AAAwCJ,kBAAAA,YAAY,EAAE;AAAtD,iBAAd;AAA2E,eADhG;AAAA,qCAEI;AAAG,gBAAA,SAAS,EAAErC,MAAM,CAAC0G,WAArB;AAAA;AAAA;AAFJ,cADJ,eAKI;AACI,cAAA,OAAO,EAAE,MAAM;AACX,oBAAI,KAAK3F,KAAL,CAAWkC,GAAX,GAAiB,EAArB,EACI,KAAKpB,QAAL,CAAc;AAAEQ,kBAAAA,YAAY,EAAE;AAAhB,iBAAd,EADJ,KAEK,IAAI,KAAKtB,KAAL,CAAWkC,GAAX,GAAiB,GAArB,EACD,KAAKpB,QAAL,CAAc;AAAEQ,kBAAAA,YAAY,EAAE;AAAhB,iBAAd,EADC,KAEA,IAAI,KAAKtB,KAAL,CAAWe,QAAf,EAAyB;AAC1B,uBAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,KAAL,CAAWgB,KAAX,CAAiByB,MAArC,EAA6ClC,CAAC,EAA9C,EACI,IAAI,KAAKP,KAAL,CAAWe,QAAX,KAAwB,KAAKf,KAAL,CAAWgB,KAAX,CAAiBT,CAAjB,EAAoBG,KAAhD,EACI,KAAKI,QAAL,CAAc;AAAEU,oBAAAA,KAAK,EAAEjB,CAAT;AAAY6B,oBAAAA,cAAc,EAAE;AAA5B,mBAAd,EAHkB,CAI1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,iBAXI,MAaD,KAAKtB,QAAL,CAAc;AAAEQ,kBAAAA,YAAY,EAAE;AAAhB,iBAAd;AACP,eApBL;AAqBI,cAAA,SAAS,EAAErC,MAAM,CAACuG,OArBtB;AAsBI,cAAA,KAAK,EAAE;AAAElC,gBAAAA,eAAe,EAAEzE,MAAM,CAAC2F;AAA1B,eAtBX;AAuBI,cAAA,EAAE,EAAEvF,MAAM,CAACyG,YAvBf;AAAA,qCAwBI;AAAG,gBAAA,SAAS,EAAEzG,MAAM,CAAC0G,WAArB;AAAA;AAAA;AAxBJ,cALJ;AAAA,YAlEJ;AAAA,UAxBX,GA2HG,KAAK3F,KAAL,CAAW0B,OAAX;AAAA;AAAoB;AAChB;AAAA,iCACI,KAAC,WAAD;AACI,YAAA,MAAM,EAAE,KAAK1B,KAAL,CAAWC,WAAX,CAAuBF,MADnC;AAEI,YAAA,MAAM,EAAE,MAAM;AACV,mBAAKwC,SAAL;AACA,mBAAKzB,QAAL,CAAc;AAAEQ,gBAAAA,YAAY,EAAE,EAAhB;AAAoBI,gBAAAA,OAAO,EAAE,KAA7B;AAAoC1C,gBAAAA,aAAa,EAAE;AAAnD,eAAd;AACH;AALL;AADJ,UADJ;AAAA;AAUK;AACD;AAAA,kCACI;AAAK,YAAA,SAAS,EAAEC,MAAM,CAACoE,SAAvB;AAAkC,YAAA,KAAK,EAAE;AAAEC,cAAAA,eAAe,EAAEzE,MAAM,CAAC0E,KAA1B;AAAiCC,cAAAA,SAAS,EAAE;AAA5C,aAAzC;AAAA,oCACI;AAAG,cAAA,SAAS,EAAEvE,MAAM,CAACwE,KAArB;AAA4B,cAAA,KAAK,EAAE;AAAEC,gBAAAA,KAAK,EAAE7E,MAAM,CAAC8E;AAAhB,eAAnC;AAAA;AAAA,cADJ,eAEI;AAAG,cAAA,SAAS,EAAE1E,MAAM,CAACmF,IAArB;AAA2B,cAAA,KAAK,EAAE;AAAEV,gBAAAA,KAAK,EAAE7E,MAAM,CAACsF;AAAhB,eAAlC;AAAA;AAAA,cAFJ,eAKI;AAAK,cAAA,GAAG,EAAC,kBAAT;AAA4B,cAAA,GAAG,EAAC,2BAAhC;AAA4D,cAAA,SAAS,EAAElF,MAAM,CAAC2G;AAA9E,cALJ,eAMI;AAAG,cAAA,SAAS,EAAE3G,MAAM,CAACwE,KAArB;AAA4B,cAAA,KAAK,EAAE;AAAEO,gBAAAA,KAAK,EAAE,SAAT;AAAoBR,gBAAAA,SAAS,EAAE;AAA/B,eAAnC;AAAA,wBAA8E,GAAE,KAAKxD,KAAL,CAAW2B,QAAX,CAAoB0C,OAApB,CAA4B,CAA5B,CAA+B;AAA/G,cANJ,eAOI;AAAK,cAAA,SAAS,EAAEpF,MAAM,CAAC4G,OAAvB;AAAgC,cAAA,KAAK,EAAE,EAAvC;AAA2C,cAAA,OAAO,EAAE,MAAM;AAAE,qBAAK/E,QAAL,CAAc;AAAE9B,kBAAAA,aAAa,EAAE,IAAjB;AAAuB0C,kBAAAA,OAAO,EAAE,KAAhC;AAAuCJ,kBAAAA,YAAY,EAAE;AAArD,iBAAd;AAA0E,eAAtI;AAAA,qCACI;AAAG,gBAAA,SAAS,EAAErC,MAAM,CAAC0G,WAArB;AAAA;AAAA;AADJ,cAPJ;AAAA,YADJ,eAaI;AAAK,YAAA,SAAS,EAAE1G,MAAM,CAACoE,SAAvB;AAAkC,YAAA,KAAK,EAAE;AAAEC,cAAAA,eAAe,EAAEzE,MAAM,CAAC0E,KAA1B;AAAiCC,cAAAA,SAAS,EAAE,MAA5C;AAAoDiB,cAAAA,YAAY,EAAE;AAAlE,aAAzC;AAAA,oCACI;AAAG,cAAA,SAAS,EAAExF,MAAM,CAACwE,KAArB;AAA4B,cAAA,KAAK,EAAE;AAAEC,gBAAAA,KAAK,EAAE7E,MAAM,CAAC8E;AAAhB,eAAnC;AAAA;AAAA,cADJ,eAII;AAAG,cAAA,SAAS,EAAE1E,MAAM,CAACmF,IAArB;AAA2B,cAAA,KAAK,EAAE;AAAEV,gBAAAA,KAAK,EAAE7E,MAAM,CAACsF,IAAhB;AAAsBM,gBAAAA,YAAY,EAAE;AAApC,eAAlC;AAAA;AAAA,cAJJ,eAQI;AAAK,cAAA,SAAS,EAAExF,MAAM,CAACyF,WAAvB;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAEzF,MAAM,CAAC0F,WAAvB;AAAA,2BACK3D,KADL,eAEI;AAAK,kBAAA,SAAS,EAAE/B,MAAM,CAAC2F,UAAvB;AAAmC,kBAAA,EAAE,EAAE3F,MAAM,CAAC4F,cAA9C;AAA8D,kBAAA,OAAO,EAAE,MAAM;AAAE,yBAAK/D,QAAL,CAAc;AAAEY,sBAAAA,OAAO,EAAE,IAAX;AAAiB1C,sBAAAA,aAAa,EAAE,KAAhC;AAAuCsC,sBAAAA,YAAY,EAAE;AAArD,qBAAd;AAA0E,mBAAzJ;AAAA,0CACI;AAAK,oBAAA,KAAK,EAAE;AAAEwD,sBAAAA,aAAa,EAAE,KAAjB;AAAwBC,sBAAAA,OAAO,EAAE,MAAjC;AAAyCC,sBAAAA,UAAU,EAAE;AAArD,qBAAZ;AAAA,4CACI;AAAK,sBAAA,GAAG,EAAC,yBAAT;AAAmC,sBAAA,GAAG,EAAC,eAAvC;AAAuD,sBAAA,SAAS,EAAE/F,MAAM,CAACgG,QAAzE;AAAmF,sBAAA,KAAK,EAAE;AAAEC,wBAAAA,WAAW,EAAE;AAAf;AAA1F,sBADJ,eAEI;AAAG,sBAAA,SAAS,EAAEjG,MAAM,CAACmG,iBAArB;AAAwC,sBAAA,EAAE,EAAEnG,MAAM,CAACoG,kBAAnD;AAAA;AAAA,sBAFJ;AAAA,oBADJ,eAKI,KAAC,cAAD;AAAgB,oBAAA,KAAK,EAAExG,MAAM,CAAC8E;AAA9B,oBALJ;AAAA,kBAFJ;AAAA;AADJ,cARJ;AAAA,YAbJ;AAAA;AAvIZ;AADJ,MADJ;AAkLH;;AA3QoD;AA4QxD;;AACD,MAAMmC,WAAN,SAA0BtH,KAAK,CAACoB,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKE,KAAL,GAAa;AACTjB,MAAAA,UAAU,EAAE,KADH;AAETiD,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIH;;AACDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEzB,MAAAA,QAAF;AAAY6B,MAAAA,WAAZ;AAAyBjC,MAAAA,IAAzB;AAA+BZ,MAAAA,MAA/B;AAAuC4C,MAAAA,UAAvC;AAAmDnB,MAAAA,KAAnD;AAA0DuE,MAAAA;AAA1D,QAA2E,KAAKjG,KAAtF;AACA,UAAM;AAAEY,MAAAA,KAAF;AAASE,MAAAA;AAAT,QAAmBD,IAAzB;AACA,QAAI,KAAKb,KAAL,CAAWkG,IAAX,IAAmB,aAAvB,EACI,oBACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAE/G,MAAM,CAAC2F,UAAvB;AAAmC,QAAA,EAAE,EAAE3F,MAAM,CAACgH,WAA9C;AAAA,gCACI;AAAK,UAAA,KAAK,EAAE;AAAEnB,YAAAA,aAAa,EAAE,KAAjB;AAAwBC,YAAAA,OAAO,EAAE,MAAjC;AAAyCC,YAAAA,UAAU,EAAE;AAArD,WAAZ;AAAA,kCACI;AACI,YAAA,GAAG,EAAEpE,KAAK,IAAI,MAAT,GAAkB,eAAlB,GAAoCA,KAAK,IAAI,YAAT,GAAwB,qBAAxB,GAAgD,yBAD7F;AACwH,YAAA,GAAG,EAAC,eAD5H;AAEI,YAAA,SAAS,EAAEA,KAAK,IAAI,MAAT,GAAkB3B,MAAM,CAACgG,QAAzB,GAAoCrE,KAAK,IAAI,YAAT,GAAwB3B,MAAM,CAACiH,cAA/B,GAAgDjH,MAAM,CAACkH;AAF1G,YADJ,eAII;AAAG,YAAA,SAAS,EAAElH,MAAM,CAACmG,iBAArB;AAAwC,YAAA,EAAE,EAAEnG,MAAM,CAACoG,kBAAnD;AAAA,0CAAuF3E,KAAvF;AAAA,YAJJ;AAAA,UADJ,eAOI;AAAK,UAAA,EAAE,EAAEzB,MAAM,CAACmH,gBAAhB;AAAA,oBAEQ,KAAKpG,KAAL,CAAWjB,UAAX,gBACI;AAAA,oCACI;AAAK,cAAA,SAAS,EAAEE,MAAM,CAACuG,OAAvB;AAAgC,cAAA,KAAK,EAAE;AAAElC,gBAAAA,eAAe,EAAEzE,MAAM,CAAC4G,GAA1B;AAA+BzB,gBAAAA,KAAK,EAAE;AAAtC,eAAvC;AACI,cAAA,OAAO,EAAE,MAAM;AACXjF,gBAAAA,UAAU,CAACsH,IAAX,CAAgB,IAAhB,EAAsBtG,MAAtB,EAA8BW,KAA9B,EAAqCqF,YAArC;AACApD,gBAAAA,UAAU,CAACnB,KAAD,CAAV;AACH,eAJL;AAAA,qCAMI;AAAG,gBAAA,SAAS,EAAEvC,MAAM,CAAC0G,WAArB;AAAkC,gBAAA,EAAE,EAAE1G,MAAM,CAACoG,kBAA7C;AAAA;AAAA;AANJ,cADJ,eASI,KAAC,cAAD;AAAgB,cAAA,SAAS,EAAEpG,MAAM,CAACqH,kBAAlC;AAAsD,cAAA,OAAO,EAAE,MAAM;AAAE,qBAAKxF,QAAL,CAAc;AAAE/B,kBAAAA,UAAU,EAAE;AAAd,iBAAd;AAAsC;AAA7G,cATJ;AAAA,YADJ,gBAYI;AAAA,oCACI;AACI,cAAA,SAAS,EAAEgC,QAAQ,GAAG9B,MAAM,CAACsH,cAAV,GAA2BtH,MAAM,CAACuG,OADzD;AAEI,cAAA,KAAK,EAAE;AAAElC,gBAAAA,eAAe,EAAEzE,MAAM,CAAC2F;AAA1B,eAFX;AAGI,cAAA,OAAO,EAAE,MAAM;AACX5B,gBAAAA,WAAW,CAAClC,KAAD,CAAX;AACH,eALL;AAAA,qCAMI;AAAG,gBAAA,SAAS,EAAEzB,MAAM,CAAC0G,WAArB;AAAkC,gBAAA,EAAE,EAAE1G,MAAM,CAACoG,kBAA7C;AAAA,0BAAkEtE,QAAQ,GAAG,UAAH,GAAgB;AAA1F;AANJ,cADJ,eASI;AAAK,cAAA,SAAS,EAAE9B,MAAM,CAACuG,OAAvB;AAAgC,cAAA,KAAK,EAAE;AAAElC,gBAAAA,eAAe,EAAEzE,MAAM,CAAC4G;AAA1B,eAAvC;AAAwE,cAAA,OAAO,EAAE,MAAM;AAAE,qBAAK3E,QAAL,CAAc;AAAE/B,kBAAAA,UAAU,EAAE;AAAd,iBAAd;AAAqC,eAA9H;AAAA,qCACI;AAAG,gBAAA,SAAS,EAAEE,MAAM,CAAC0G,WAArB;AAAkC,gBAAA,EAAE,EAAE1G,MAAM,CAACoG,kBAA7C;AAAA;AAAA;AADJ,cATJ;AAAA;AAdZ,UAPJ;AAAA,QADJ,eAqCI;AAAK,QAAA,SAAS,EAAEpG,MAAM,CAACqF,UAAvB;AAAmC,QAAA,KAAK,EAAE;AAAEd,UAAAA,SAAS,EAAE,MAAb;AAAqBQ,UAAAA,KAAK,EAAE;AAA5B;AAA1C,QArCJ;AAAA,MADJ,CADJ,KA0CK,IAAI,KAAKlE,KAAL,CAAWkG,IAAX,IAAmB,aAAvB,EACD;AAAA;AAAQ;AACJ;AAAA,gCACI;AAAK,UAAA,SAAS,EAAE/G,MAAM,CAAC2F,UAAvB;AAAmC,UAAA,EAAE,EAAE3F,MAAM,CAACuH,eAA9C;AAAA,kCACI;AAAK,YAAA,KAAK,EAAE;AAAE1B,cAAAA,aAAa,EAAE,KAAjB;AAAwBC,cAAAA,OAAO,EAAE,MAAjC;AAAyCC,cAAAA,UAAU,EAAE;AAArD,aAAZ;AAAA,oCACI;AACI,cAAA,GAAG,EAAEpE,KAAK,IAAI,MAAT,GAAkB,eAAlB,GAAoCA,KAAK,IAAI,YAAT,GAAwB,qBAAxB,GAAgD,yBAD7F;AACwH,cAAA,GAAG,EAAC,eAD5H;AAEI,cAAA,SAAS,EAAEA,KAAK,IAAI,MAAT,GAAkB3B,MAAM,CAACgG,QAAzB,GAAoCrE,KAAK,IAAI,YAAT,GAAwB3B,MAAM,CAACiH,cAA/B,GAAgDjH,MAAM,CAACkH;AAF1G,cADJ,eAII;AAAG,cAAA,SAAS,EAAElH,MAAM,CAACmG,iBAArB;AAAwC,cAAA,EAAE,EAAEnG,MAAM,CAACoG,kBAAnD;AAAA,sDAA6E3E,KAA7E;AAAA,cAJJ;AAAA,YADJ,eAOI;AAAK,YAAA,SAAS,EAAEzB,MAAM,CAACwH,mBAAvB;AACI,YAAA,EAAE,EAAE1F,QAAQ,GAAG9B,MAAM,CAACyH,UAAV,GAAuBzH,MAAM,CAAC0H,QAD9C;AAEI,YAAA,KAAK,EAAE;AAAErD,cAAAA,eAAe,EAAEzE,MAAM,CAAC2F;AAA1B,aAFX;AAGI,YAAA,OAAO,EAAE,MAAM;AACX5B,cAAAA,WAAW,CAAClC,KAAD,CAAX;AACH,aALL;AAAA,mCAMI;AAAG,cAAA,SAAS,EAAEzB,MAAM,CAAC0G,WAArB;AAAkC,cAAA,EAAE,EAAE1G,MAAM,CAACoG,kBAA7C;AAAA,wBAAkEtE,QAAQ,GAAG,UAAH,GAAgB;AAA1F;AANJ,YAPJ;AAAA,UADJ,eAiBI;AAAK,UAAA,SAAS,EAAE9B,MAAM,CAACqF,UAAvB;AAAmC,UAAA,KAAK,EAAE;AAAEd,YAAAA,SAAS,EAAE,KAAb;AAAoBQ,YAAAA,KAAK,EAAE;AAA3B;AAA1C,UAjBJ;AAAA;AADJ;AAqBP;;AA5EqC;;AA6EzC;;AACD,MAAM4C,WAAW,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAU9G,EAAAA;AAAV,CAAD,KAAwB;AACxC,QAAM;AAAA,OAAC6B,IAAD;AAAA,OAAOkF;AAAP,MAAkBpI,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAAC4C,YAAD;AAAA,OAAeyF;AAAf,MAAkCrI,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACsD,OAAD;AAAA,OAAUgF;AAAV,MAAwBtI,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMuI,MAAM,GAAGxH,SAAS,EAAxB;AACA,QAAMyH,QAAQ,GAAG1H,WAAW,EAA5B;;AAEA,QAAM2H,mBAAmB,GAAG,YAAY;AACpCH,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI,CAACC,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACtB;AACA;AACA;AACH;;AAAA,KANmC,CAQpC;AACA;AACA;;AACA,UAAME,WAAW,GAAGF,QAAQ,CAACG,UAAT,CAAoB/H,WAApB,CAApB,CAXoC,CAYpC;;AACA,UAAM;AAAE+B,MAAAA,KAAF;AAASiG,MAAAA;AAAT,QAAmB,MAAML,MAAM,CAACM,WAAP,CAAmBH,WAAnB,CAA/B;;AAEA,QAAI/F,KAAJ,EAAW;AACP0F,MAAAA,eAAe,CAAC1F,KAAK,CAACE,OAAP,CAAf;AACAyF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHD,MAGO;AACHlI,MAAAA,SAAS,CAACuH,IAAV,CAAe,IAAf,EAAqBtG,MAArB,EAA6BuH,KAA7B,EAAoCN,UAApC,EAAgDD,eAAhD,EAAiEF,MAAjE;AACH;AACJ,GArBD;;AAsBA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAE5H,MAAM,CAACoE,SAAvB;AAAkC,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAEzE,MAAM,CAAC0E,KAA1B;AAAiCC,QAAAA,SAAS,EAAE;AAA5C,OAAzC;AAAA,8BACI;AAAG,QAAA,SAAS,EAAEvE,MAAM,CAACwE,KAArB;AAA4B,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE7E,MAAM,CAAC8E;AAAhB,SAAnC;AAAA;AAAA,QADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACI,QAAA,WAAW,EAAC,cADhB;AAEI,QAAA,SAAS,EAAE1E,MAAM,CAAC6E,iBAFtB;AAGI,QAAA,EAAE,EAAE7E,MAAM,CAACuI,qBAHf;AAII,QAAA,KAAK,EAAE;AAAEhE,UAAAA,SAAS,EAAE;AAAb,SAJX;AAKI,QAAA,KAAK,EAAE5B,IALX;AAMI,QAAA,QAAQ,EAAGgC,CAAD,IAAO;AACb,gBAAM3C,KAAK,GAAG2C,CAAC,CAACC,MAAF,CAAS5C,KAAvB;AACA6F,UAAAA,OAAO,CAAC7F,KAAD,CAAP;AACH;AATL,QAFJ,eAaI;AAAK,QAAA,SAAS,EAAEhC,MAAM,CAAC6E,iBAAvB;AAAA,+BACI,KAAC,WAAD;AACI,UAAA,OAAO,EAAE;AACL2D,YAAAA,cAAc,EAAE,IADX;AAELC,YAAAA,KAAK,EAAE;AACHC,cAAAA,IAAI,EAAE;AACFjE,gBAAAA,KAAK,EAAE,SADL;AAEFa,gBAAAA,QAAQ,EAAE,MAFR;AAGFL,gBAAAA,UAAU,EAAE,yBAHV;AAIF0D,gBAAAA,aAAa,EAAE,aAJb;AAKF,iCAAiB;AACblE,kBAAAA,KAAK,EAAE;AADM;AALf,eADH;AAUHmE,cAAAA,OAAO,EAAE;AACLnE,gBAAAA,KAAK,EAAE,SADF;AAEL,0BAAU;AACNA,kBAAAA,KAAK,EAAE;AADD;AAFL;AAVN;AAFF;AADb;AADJ,QAbJ,EAsCKpC,YAAY,iBAAI;AAAG,QAAA,SAAS,EAAErC,MAAM,CAACqG,EAArB;AAAyB,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAhC;AAAA,kBAA2DjE;AAA3D,QAtCrB;AAAA,MADJ,eAyCI;AAAK,MAAA,SAAS,EAAErC,MAAM,CAAC8E,iBAAvB;AAA0C,MAAA,KAAK,EAAE;AAAEP,QAAAA,SAAS,EAAE,MAAb;AAAqBiB,QAAAA,YAAY,EAAE,OAAnC;AAA4CU,QAAAA,UAAU,EAAE,MAAxD;AAAgEnB,QAAAA,KAAK,EAAE;AAAvE,OAAjD;AAAA,8BACI;AAAK,QAAA,SAAS,EAAE/E,MAAM,CAACuG,OAAvB;AAAgC,QAAA,KAAK,EAAE;AAAElC,UAAAA,eAAe,EAAEzE,MAAM,CAAC4G;AAA1B,SAAvC;AAAwE,QAAA,EAAE,EAAExG,MAAM,CAACyG,YAAnF;AACI,QAAA,OAAO,EAAEmB,MADb;AAAA,+BAEI;AAAG,UAAA,SAAS,EAAE5H,MAAM,CAAC0G,WAArB;AAAA;AAAA;AAFJ,QADJ,eAKI;AACI,QAAA,SAAS,EAAE1G,MAAM,CAACuG,OADtB;AAEI,QAAA,KAAK,EAAE;AAAElC,UAAAA,eAAe,EAAEzE,MAAM,CAAC2F;AAA1B,SAFX;AAGI,QAAA,EAAE,EAAEvF,MAAM,CAACyG,YAHf;AAII,QAAA,OAAO,EAAE,MAAM;AACX,cAAI9D,IAAI,CAACa,MAAL,IAAe,CAAnB,EACIsE,eAAe,CAAC,wCAAD,CAAf,CADJ,KAGII,mBAAmB;AAC1B,SATL;AAAA,kBAUKnF,OAAO,gBACJ,KAAC,MAAD;AACI,UAAA,IAAI,EAAC,UADT;AAEI,UAAA,KAAK,EAAEnD,MAAM,CAAC0E,KAFlB;AAGI,UAAA,MAAM,EAAE,MAHZ;AAII,UAAA,KAAK,EAAE;AAJX,UADI,gBAOJ;AAAG,UAAA,SAAS,EAAEtE,MAAM,CAAC0G,WAArB;AAAA;AAAA;AAjBR,QALJ;AAAA,MAzCJ;AAAA,IADJ;AAqEH,CAlGD;;AAmGA,MAAMmC,cAAc,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAwB;AAC3C,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCxJ,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACyJ,gBAAD;AAAA,OAAmBC;AAAnB,MAA0C1J,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM;AAAA,OAAC2J,mBAAD;AAAA,OAAsBC;AAAtB,MAAgD5J,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAMuI,MAAM,GAAGxH,SAAS,EAAxB,CAJ2C,CAK3C;;AAEA,QAAM8I,YAAY,GAAG,YAAY;AAC7B,QAAI,CAACtB,MAAL,EAAa;AAEb7H,IAAAA,KAAK,CAACoJ,IAAN,CAAY,oEAAZ,kCAAsFR,MAAtF;AAA8FS,MAAAA,MAAM,EAAE;AAAtG,QACKtH,IADL,CACUuH,MAAM,IAAI;AACZ,YAAM;AAAED,QAAAA,MAAF;AAAUE,QAAAA,aAAV;AAAyBC,QAAAA;AAAzB,UAAgCF,MAAM,CAACG,IAA7C;AACAb,MAAAA,MAAM,CAACc,eAAP,GAAyBF,EAAzB;AACAZ,MAAAA,MAAM,CAACS,MAAP,GAAgB,iBAAhB;;AAEA,UAAIA,MAAM,IAAI,WAAd,EAA2B;AACvBL,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,OAFD,MAGK,IAAIK,MAAM,IAAI,iBAAd,EAAiC;AAClCxB,QAAAA,MAAM,CAAC8B,kBAAP,CAA0BJ,aAA1B,EACKxH,IADL,CACU0H,IAAI,IAAI;AACV,cAAIA,IAAI,CAACG,aAAL,CAAmBP,MAAnB,IAA6B,WAAjC,EAA8C;AAC1CrJ,YAAAA,KAAK,CAACoJ,IAAN,CAAY,oEAAZ,kCAAsFR,MAAtF;AAA8FiB,cAAAA,aAAa,EAAE,gCAA7G;AAA+IH,cAAAA,eAAe,EAAEF,EAAhK;AAAoKH,cAAAA,MAAM,EAAE;AAA5K,gBACKtH,IADL,CACU,MAAM;AACRiH,cAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,aAHL,EAIKhH,KAJL,CAIWC,KAAK,IAAI;AACZ6G,cAAAA,eAAe,CAAC,IAAD,CAAf;AACAI,cAAAA,sBAAsB,CAACjH,KAAK,CAACE,OAAP,CAAtB;AACH,aAPL;AAQH;AACJ,SAZL,EAYOH,KAZP,CAYaC,KAAK,IAAI;AACd6G,UAAAA,eAAe,CAAC,IAAD,CAAf;AACAI,UAAAA,sBAAsB,CAACjH,KAAK,CAACE,OAAP,CAAtB;AACH,SAfL;AAgBH;AACJ,KA3BL,EA4BKH,KA5BL,CA4BWC,KAAK,IAAI;AACZ6G,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAI,MAAAA,sBAAsB,CAACjH,KAAK,CAACE,OAAP,CAAtB;AACH,KA/BL;AAiCH,GApCD;;AAqCA9C,EAAAA,SAAS,CAAC,MAAM;AACZ8J,IAAAA,YAAY;AACf,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACI;AAAK,IAAA,SAAS,EAAEtJ,MAAM,CAACoE,SAAvB;AAAkC,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAEzE,MAAM,CAAC0E,KAA1B;AAAiCC,MAAAA,SAAS,EAAE;AAA5C,KAAzC;AAAA,eACK,CAAC2E,gBAAD,IAAqB,CAACF,YAAtB,iBAAsC,KAAC,MAAD;AACnC,MAAA,IAAI,EAAC,UAD8B;AAEnC,MAAA,KAAK,EAAEpJ,MAAM,CAAC2F,KAFqB;AAGnC,MAAA,MAAM,EAAE,OAH2B;AAInC,MAAA,KAAK,EAAE,OAJ4B;AAKnC,MAAA,KAAK,EAAE;AAAEhB,QAAAA,SAAS,EAAE;AAAb;AAL4B,MAD3C,eAQI;AAAG,MAAA,SAAS,EAAEvE,MAAM,CAACwE,KAArB;AACI,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE7E,MAAM,CAACsF,IAAhB;AAAsBH,QAAAA,KAAK,EAAE,SAA7B;AAAwCR,QAAAA,SAAS,EAAE,EAAnD;AAAuDiB,QAAAA,YAAY,EAAE,EAArE;AAAyEyE,QAAAA,YAAY,EAAE,EAAvF;AAA2FC,QAAAA,WAAW,EAAE,EAAxG;AAA4G5D,QAAAA,SAAS,EAAE;AAAvH,OADX;AAAA,gBAEK4C,gBAAgB,GACZ,6CADY,GAEbF,YAAY,GACP,kEADO,GAEP;AANb,MARJ,EAgBK,CAACE,gBAAgB,IAAIF,YAArB,kBAAsC;AACnC,MAAA,SAAS,EAAEhJ,MAAM,CAAC4G,OADiB;AAEnC,MAAA,KAAK,EAAE;AAAErC,QAAAA,SAAS,EAAE;AAAb,OAF4B;AAGnC,MAAA,OAAO,EAAEuE,MAH0B;AAAA,6BAInC;AAAG,QAAA,SAAS,EAAE9I,MAAM,CAAC0G,WAArB;AAAA;AAAA;AAJmC,MAhB3C;AAAA,IADJ;AAyBH,CAxED","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { AiOutlineClose, AiOutlineRight } from 'react-icons/ai';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, storeCard, deleteCard, buyKilometers, } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport { loadStripe } from '@stripe/stripe-js';\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner';\nimport {\n    CardElement,\n    Elements,\n    useElements,\n    useStripe\n} from '@stripe/react-stripe-js';\nconst stripePromise = loadStripe('pk_test_RjADdW2vGwFAgOOk7ws1juNB002JV727O8');\n\nexport default class PerchWallet extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            buyKilometers: false,\n            addCard: false,\n            userDetails: this.props.userDetails,\n            quantity: 0,\n            cards: [],\n            selected: null,\n\n            index: 0,\n\n            name: '',\n            cardNumber: '',\n            expiryDate: '',\n            ccv: '',\n            errorMessage: '',\n\n            loading: false,\n\n            rate: 0,\n            kms: '',\n            cost: 0,\n\n            paymentLoading: false,\n\n        };\n    };\n    componentDidMount() {\n        const { userID } = this.state.userDetails;\n        firebase.database().ref(`perchKilometers/${userID}/quantity`).on('value', snapshot => {\n            if (!!snapshot)\n                this.setState({ quantity: snapshot.val() });\n        });\n        firebase.database().ref(`costPerPerchKM`).on('value', snapshot => {\n            this.setState({ rate: snapshot.val() });\n        });\n        this.loadCards();\n    };\n    loadCards = () => {\n        const { userID } = this.state.userDetails;\n        firebase.database().ref(`cards/${userID}`).once('value', snapshot => {\n            if (!!snapshot) {\n                let arrayOfLast4 = [], i = 0;\n                for (let key in snapshot.val()) {\n                    if (key != 'selected')\n                        arrayOfLast4[i] = {\n                            last4: snapshot.val()[key].card.last4,\n                            brand: snapshot.val()[key].card.brand,\n                            cardId: snapshot.val()[key].card.cardId,\n                        };\n                    else if (key == 'selected')\n                        this.setState({ selected: snapshot.val()[key] })\n                    i++;\n                }\n                this.setState({ cards: arrayOfLast4 });\n            };\n        });\n    };\n    setSelected = (value) => {\n        const { userID } = this.state.userDetails;\n        firebase.database().ref(`cards/${userID}`).update({\n            selected: value\n        }).then(() => {\n            this.setState({ selected: value })\n        }).catch(error => { this.setState({ errorMessage: error.message }) })\n    }\n    removeCard = (index) => {\n        let { cards } = this.state;\n        cards.splice(index, 1);\n        this.setState({ cards: cards })\n    };\n    render() {\n        let cards = [];\n        for (let i = 0; i < this.state.cards.length; i++)\n            cards.push(\n                <PaymentCard\n                    userID={this.state.userDetails.userID}\n                    key={this.state.cards[i].last4}\n                    card={this.state.cards[i]}\n                    index={i}\n                    removeCard={this.removeCard}\n                    setSelected={this.setSelected}\n                    selectedCard={this.state.selected}\n                    selected={this.state.selected === this.state.cards[i].last4}\n                    type={this.state.buyKilometers ? 'pickPayment' : 'listOfCards'} />\n            );\n        return (\n            <Elements stripe={stripePromise}>\n                <div className={styles.cont}>\n                    {this.state.buyKilometers ?//buy kilometers\n                        (\n                            this.state.paymentLoading ?\n                                <>\n                                    <ProcessPayment\n                                        goBack={() => {\n                                            this.setState({\n                                                buyKilometers: false,\n                                                addCard: false,\n                                                kms: '',\n                                                errorMessage: '',\n                                                paymentLoading: false,\n                                            })\n                                        }}\n                                        toSend={{\n                                            cardId: this.state.cards[this.state.index].cardId,\n                                            customerID: this.state.userDetails.stripeCustomerID,\n                                            quantity: Number(this.state.kms),\n                                            userID: this.state.userDetails.userID,\n                                            timestamp: new Date().getTime(),\n                                            isAutomatic: true,\n                                        }}\n                                    />\n                                </> :\n                                <>\n                                    <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                                        <p className={styles.title} style={{ color: colors.BLACK }}>Enter the amount of kilometers you would like to purchase</p>\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"Enter amount of kilometers\"\n                                            value={this.state.kms}\n                                            onChange={(e) => {\n                                                const value = e.target.value;\n                                                if (value.length <= 3) {\n                                                    const cost = Number(value) * this.state.rate;\n                                                    this.setState({ kms: value, cost: cost });\n                                                }\n                                            }}\n                                            className={styles.inputPaymentPanel} />\n                                        <div className={styles.enterKilometerDiv} style={{ marginTop: '20px' }}>\n                                            <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', color: colors.GREY }} className={styles.text}>Cost per kilometer</p>\n                                            <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', }} className={styles.text}>{`$ ${this.state.rate?.toFixed(2)}`}</p>\n                                        </div>\n                                        {/* <div className={styles.enterKilometerDiv}>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', color: colors.GREY }} className={styles.text}>Total cost of kilometers</p>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', }} className={styles.text}>{`$ ${this.state.cost?.toFixed(2)}`}</p>\n                                </div>\n                                 <div className={styles.enterKilometerDiv}>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', color: colors.GREY }} className={styles.text}>Taxes</p>\n                                    <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Medium', }} className={styles.text}>{`$ 1.99`}</p>\n                                </div> */}\n                                        <div className={styles.sharedLine} style={{ marginTop: '20px', width: '90%' }}></div>\n                                        <div className={styles.enterKilometerDiv}>\n                                            <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Bold', fontSize: '120%' }} className={styles.text}>Total</p>\n                                            <p style={{ width: 'initial', margin: '0px', fontFamily: 'Gilroy-Bold', color: colors.GREEN, fontSize: '120%' }} className={styles.text}>{`$ ${this.state.cost?.toFixed(2)}`}</p>\n                                        </div>\n\n                                    </div>\n\n                                    <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px', }}>\n                                        <p className={styles.title} style={{ color: colors.BLACK }}>\n                                            Payment Methods\n                                        </p>\n                                        <p className={styles.text} style={{ color: colors.GREY, marginBottom: '20px' }}>\n                                            List of available payment methods. New payment methods can also be added.\n                                        </p>\n\n                                        <div className={styles.paymentCont}>\n                                            <div className={styles.paymentItem}>\n                                                {cards}\n                                                <div className={styles.paymentRow} id={styles.addCardPayment}>\n                                                    <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                                                        <img src=\"/PayPalLogo.svg\" alt=\"Perch Payment\" className={styles.visaIcon} style={{ marginRight: '15px', marginLeft: '0px' }} />\n                                                        <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>PayPal</p>\n                                                    </div>\n                                                    <AiOutlineRight color={colors.BLACK} />\n                                                </div>\n                                                <div className={styles.sharedLine} style={{ marginTop: '0px', width: '100%' }}></div>\n                                                <div className={styles.paymentRow} id={styles.addCardPayment} onClick={() => { this.setState({ addCard: true, buyKilometers: false, errorMessage: '' }) }}>\n                                                    <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                                                        <img src=\"/addPaymentCardIcon.svg\" alt=\"Perch Payment\" className={styles.visaIcon} style={{ marginRight: '15px' }} />\n                                                        <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>Add Debit / Credit Card</p>\n                                                    </div>\n                                                    <AiOutlineRight color={colors.BLACK} />\n                                                </div>\n                                            </div>\n                                        </div>\n                                        {this.state.errorMessage && <p className={styles.em} style={{ textAlign: 'initial' }}>{this.state.errorMessage}</p>}\n                                    </div>\n\n                                    <div className={styles.enterKilometerDiv} style={{ marginTop: '20px', marginBottom: '150px', marginLeft: '2.5%', width: '95%' }}>\n                                        <div className={styles.button2} style={{ backgroundColor: colors.RED }} id={styles.buttonBottom}\n                                            onClick={() => { this.setState({ buyKilometers: false, addCard: false, errorMessage: '' }) }}>\n                                            <p className={styles.buttonText1}>Cancel</p>\n                                        </div>\n                                        <div\n                                            onClick={() => {\n                                                if (this.state.kms < 20)\n                                                    this.setState({ errorMessage: 'You can get a minimum of 20 kilometers' })\n                                                else if (this.state.kms > 100)\n                                                    this.setState({ errorMessage: 'You can get a maximum of 100 kilometers' })\n                                                else if (this.state.selected) {\n                                                    for (let i = 0; i < this.state.cards.length; i++)\n                                                        if (this.state.selected === this.state.cards[i].last4)\n                                                            this.setState({ index: i, paymentLoading: true })\n                                                    // buyKilometers.call(this, {\n                                                    //     cardId: this.state.cards[i].cardId,\n                                                    //     customerID: this.state.userDetails.stripeCustomerID,\n                                                    //     quantity: Number(this.state.kms),\n                                                    //     userID: this.state.userDetails.userID,\n                                                    //     timestamp: new Date().getTime(),\n                                                    // })\n                                                }\n                                                else\n                                                    this.setState({ errorMessage: 'Please select or add a payment method' })\n                                            }}\n                                            className={styles.button2}\n                                            style={{ backgroundColor: colors.GREEN }}\n                                            id={styles.buttonBottom}>\n                                            <p className={styles.buttonText1}>Buy Kilometers</p>\n                                        </div>\n                                    </div>\n                                </>) :\n                        this.state.addCard ?//add card\n                            <>\n                                <AddCardForm\n                                    userID={this.state.userDetails.userID}\n                                    cancel={() => {\n                                        this.loadCards();\n                                        this.setState({ errorMessage: '', addCard: false, buyKilometers: false, })\n                                    }}\n                                />\n                            </>\n                            ://main page\n                            <>\n                                <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                                    <p className={styles.title} style={{ color: colors.BLACK }}>Kilometers</p>\n                                    <p className={styles.text} style={{ color: colors.GREY }}>\n                                        You can make kilometer purchases from this panel. Also remeber that sharing your code with friends who book their first ride automatically gives you free kilometers.\n                                    </p>\n                                    <img src=\"/walletImage.svg\" alt=\"Purchase Perch Kilometers\" className={styles.walletImage} />\n                                    <p className={styles.title} style={{ width: 'initial', marginTop: '20px' }}>{`${this.state.quantity.toFixed(1)} kilometers`}</p>\n                                    <div className={styles.button1} style={{}} onClick={() => { this.setState({ buyKilometers: true, addCard: false, errorMessage: '' }) }}>\n                                        <p className={styles.buttonText1}>Buy kilometers</p>\n                                    </div>\n                                </div>\n\n                                <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px', marginBottom: '150px' }}>\n                                    <p className={styles.title} style={{ color: colors.BLACK }}>\n                                        Payment Methods\n                                    </p>\n                                    <p className={styles.text} style={{ color: colors.GREY, marginBottom: '20px' }}>\n                                        List of available payment methods. New payment methods can also be added.\n                                    </p>\n\n                                    <div className={styles.paymentCont}>\n                                        <div className={styles.paymentItem}>\n                                            {cards}\n                                            <div className={styles.paymentRow} id={styles.addCardPayment} onClick={() => { this.setState({ addCard: true, buyKilometers: false, errorMessage: '' }) }}>\n                                                <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                                                    <img src=\"/addPaymentCardIcon.svg\" alt=\"Perch Payment\" className={styles.visaIcon} style={{ marginRight: '15px' }} />\n                                                    <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>Add Debit / Credit Card</p>\n                                                </div>\n                                                <AiOutlineRight color={colors.BLACK} />\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </>\n                    }\n                </div >\n            </Elements>\n        )\n\n    }\n};\nclass PaymentCard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deleteCard: false,\n            loading: false,\n        }\n    }\n    render() {\n        const { selected, setSelected, card, userID, removeCard, index, selectedCard } = this.props;\n        const { last4, brand } = card;\n        if (this.props.type == 'listOfCards')\n            return (\n                <>\n                    <div className={styles.paymentRow} id={styles.paymentRow_}>\n                        <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                            <img\n                                src={brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg'} alt=\"Perch Payment\"\n                                className={brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard} />\n                            <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>XXXX XXXX XXXX {last4}</p>\n                        </div>\n                        <div id={styles.paymentRowButton}>\n                            {\n                                this.state.deleteCard ?\n                                    <>\n                                        <div className={styles.button2} style={{ backgroundColor: colors.RED, width: '80%' }}\n                                            onClick={() => {\n                                                deleteCard.call(this, userID, last4, selectedCard);\n                                                removeCard(index);\n                                            }}\n                                        >\n                                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>Delete this card?</p>\n                                        </div>\n                                        <AiOutlineClose className={styles.closeDeletePayment} onClick={() => { this.setState({ deleteCard: false }) }} />\n                                    </> :\n                                    <>\n                                        <div\n                                            className={selected ? styles.buttonSelected : styles.button2}\n                                            style={{ backgroundColor: colors.GREEN }}\n                                            onClick={() => {\n                                                setSelected(last4)\n                                            }}>\n                                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>{selected ? 'Selected' : 'Select card'}</p>\n                                        </div>\n                                        <div className={styles.button2} style={{ backgroundColor: colors.RED }} onClick={() => { this.setState({ deleteCard: true }) }}>\n                                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>Delete Card</p>\n                                        </div>\n                                    </>}\n                        </div>\n                    </div>\n                    <div className={styles.sharedLine} style={{ marginTop: '20px', width: '100%' }}></div>\n                </>\n            );\n        else if (this.props.type == 'pickPayment')\n            return (//TO MAKE A SELECTED ONE, THE PARENT COMPONENT SHOULD HAVE A SELECTED ITEM ID AND WE COMPARE ID HERE TO SHOW IF IT IS CONFIRMED OR NOT\n                <>\n                    <div className={styles.paymentRow} id={styles.addCardPayment_} >\n                        <div style={{ flexDirection: 'row', display: 'flex', alignItems: 'center', }}>\n                            <img\n                                src={brand == 'Visa' ? \"/visaIcon.svg\" : brand == 'Mastercard' ? '/mastercardIcon.svg' : '/addPaymentCardIcon.svg'} alt=\"Perch Payment\"\n                                className={brand == 'Visa' ? styles.visaIcon : brand == 'Mastercard' ? styles.masterCardIcon : styles.genericCard} />\n                            <p className={styles.paymentCardNumber} id={styles.paymentCardNumber_}>•••• {last4}</p>\n                        </div>\n                        <div className={styles.pickPaymentSelected}\n                            id={selected ? styles.selectedID : styles.selectID}\n                            style={{ backgroundColor: colors.GREEN, }}\n                            onClick={() => {\n                                setSelected(last4)\n                            }}>\n                            <p className={styles.buttonText1} id={styles.paymentCardNumber_}>{selected ? 'Selected' : 'Select'}</p>\n                        </div>\n                    </div>\n                    <div className={styles.sharedLine} style={{ marginTop: '0px', width: '100%' }}></div>\n                </>\n            );\n    }\n};\nconst AddCardForm = ({ cancel, userID }) => {\n    const [name, setName] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const [loading, setLoading] = useState(false);\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const createTokenWithCard = async () => {\n        setLoading(true);\n        if (!stripe || !elements) {\n            // Stripe.js has not loaded yet. Make sure to disable\n            // form submission until Stripe.js has loaded.\n            return;\n        };\n\n        // Get a reference to a mounted CardElement. Elements knows how\n        // to find your CardElement because there can only ever be one of\n        // each type of element.\n        const cardElement = elements.getElement(CardElement);\n        // Use your card Element with other Stripe.js APIs\n        const { error, token } = await stripe.createToken(cardElement);\n\n        if (error) {\n            setErrorMessage(error.message);\n            setLoading(false);\n        } else {\n            storeCard.call(this, userID, token, setLoading, setErrorMessage, cancel);\n        }\n    };\n    return (\n        <>\n            <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                <p className={styles.title} style={{ color: colors.BLACK }}>Add card</p>\n                <input type=\"text\"\n                    placeholder=\"Name on Card\"\n                    className={styles.inputPaymentPanel}\n                    id={styles.inputPaymentPanel_ADD}\n                    style={{ marginTop: '10px' }}\n                    value={name}\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        setName(value);\n                    }}\n                />\n                <div className={styles.inputPaymentPanel}>\n                    <CardElement\n                        options={{\n                            hidePostalCode: true,\n                            style: {\n                                base: {\n                                    color: '#303238',\n                                    fontSize: '16px',\n                                    fontFamily: '\"Gill Sans\", sans-serif',\n                                    fontSmoothing: 'antialiased',\n                                    '::placeholder': {\n                                        color: '#757575',\n                                    },\n                                },\n                                invalid: {\n                                    color: '#e5424d',\n                                    ':focus': {\n                                        color: '#303238',\n                                    },\n                                },\n                            }\n                        }}\n                    />\n                </div>\n\n                {errorMessage && <p className={styles.em} style={{ textAlign: 'initial' }}>{errorMessage}</p>}\n            </div>\n            <div className={styles.enterKilometerDiv} style={{ marginTop: '20px', marginBottom: '150px', marginLeft: '2.5%', width: '95%' }}>\n                <div className={styles.button2} style={{ backgroundColor: colors.RED }} id={styles.buttonBottom}\n                    onClick={cancel}>\n                    <p className={styles.buttonText1}>Cancel</p>\n                </div>\n                <div\n                    className={styles.button2}\n                    style={{ backgroundColor: colors.GREEN }}\n                    id={styles.buttonBottom}\n                    onClick={() => {\n                        if (name.length <= 3)\n                            setErrorMessage('Please enter the full name on the card');\n                        else\n                            createTokenWithCard();\n                    }}>\n                    {loading ?\n                        <Loader\n                            type=\"TailSpin\"\n                            color={colors.WHITE}\n                            height={'20px'}\n                            width={'20px'}\n                        /> :\n                        <p className={styles.buttonText1}>Add Card</p>}\n                </div>\n            </div>\n        </>\n    )\n}\nconst ProcessPayment = ({ goBack, toSend }) => {\n    const [paymentError, setPaymentError] = useState(false);\n    const [paymentCompleted, setPaymentCompleted] = useState(false);\n    const [paymentErrorMessage, setPaymentErrorMessage] = useState('');\n    const stripe = useStripe();\n    //const elements = useElements();\n\n    const startPayment = async () => {\n        if (!stripe) return;\n\n        axios.post(`https://us-central1-perch-01.cloudfunctions.net/buyPerchKilometers`, { ...toSend, status: 'initial' })\n            .then(result => {\n                const { status, client_secret, id } = result.data;\n                toSend.paymentIntentId = id;\n                toSend.status = 'confirm_payment';\n\n                if (status == 'succeeded') {\n                    setPaymentCompleted(true)\n                }\n                else if (status == 'requires_action') {\n                    stripe.confirmCardPayment(client_secret)\n                        .then(data => {\n                            if (data.paymentIntent.status == 'succeeded') {\n                                axios.post(`https://us-central1-perch-01.cloudfunctions.net/buyPerchKilometers`, { ...toSend, nativePayType: 'Debit/Credit Card from website', paymentIntentId: id, status: 'payment_completed_on_client' })\n                                    .then(() => {\n                                        setPaymentCompleted(true);\n                                    })\n                                    .catch(error => {\n                                        setPaymentError(true);\n                                        setPaymentErrorMessage(error.message);\n                                    })\n                            }\n                        }).catch(error => {\n                            setPaymentError(true);\n                            setPaymentErrorMessage(error.message);\n                        })\n                }\n            })\n            .catch(error => {\n                setPaymentError(true);\n                setPaymentErrorMessage(error.message);\n            });\n\n    };\n    useEffect(() => {\n        startPayment();\n    }, []);\n    return (\n        <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n            {!paymentCompleted && !paymentError && <Loader\n                type=\"TailSpin\"\n                color={colors.GREEN}\n                height={'100px'}\n                width={'100px'}\n                style={{ marginTop: 25 }}\n            />}\n            <p className={styles.title}\n                style={{ color: colors.GREY, width: 'initial', marginTop: 20, marginBottom: 30, paddingRight: 15, paddingLeft: 15, textAlign: 'center' }}>\n                {paymentCompleted ?\n                    `Your payment has been processed. Thank you.` :\n                    paymentError ?\n                        `Your payment failed. Please contact your bank or try again later` :\n                        `Your payment is currently processing. Please wait.`}\n            </p>\n            {(paymentCompleted || paymentError) && < div\n                className={styles.button1}\n                style={{ marginTop: 0 }}\n                onClick={goBack}>\n                <p className={styles.buttonText1}>Go back</p>\n            </div>}\n        </div >\n    )\n};"]},"metadata":{},"sourceType":"module"}