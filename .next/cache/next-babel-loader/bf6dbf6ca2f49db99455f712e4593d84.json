{"ast":null,"code":"import firebase from 'firebase';\nimport Router from 'next/router';\nimport axios from 'axios';\nexport function signIn(email, password, type) {\n  this.setState({\n    error: false,\n    errorMessage: '',\n    loading: true\n  }, () => {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL).then(() => {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n        if (type == 'user') {\n          const userID = firebase.auth().currentUser.uid;\n          firebase.database().ref(`users/${userID}/summarizedHistory`).once('value', snapshot => {\n            if (snapshot.val().phoneVerified == true) Router.push('/s/db/udash').then(() => window.scrollTo(0, 0));else this.setState({\n              displayVerification: true,\n              loading: false\n            });\n          }).catch(error => {\n            console.log(error.message);\n          });\n        } else if (type == 'driver') {\n          const userID = firebase.auth().currentUser.uid;\n          firebase.database().ref(`users/${userID}/summarizedHistory`).once('value', snapshot => {\n            if (snapshot.val().phoneVerified == true && snapshot.val().emailVerified == true) firebase.database().ref(`users/${userID}/driverVerified`).once('value', snap => {\n              if (snap.val() == 'VERIFIED') Router.push('/s/db/ddash').then(() => window.scrollTo(0, 0));else Router.push('/s/db/d_app_dash').then(() => window.scrollTo(0, 0));\n            }).catch(error => {\n              console.log(error.message);\n            });else this.setState({\n              displayVerification: true,\n              loading: false\n            });\n          }).catch(error => {\n            console.log(error.message);\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          error: true,\n          errorMessage: error.message,\n          loading: false\n        });\n      });\n    }).catch(error => {\n      this.setState({\n        error: true,\n        errorMessage: error.message,\n        loading: false\n      });\n    });\n  });\n}\nexport function signUp(firstName, lastName, email, phoneNumber, password) {\n  this.setState({\n    error: false,\n    errorMessage: '',\n    loading: true\n  }, () => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(() => {\n      const userID = firebase.auth().currentUser.uid;\n      axios.post('https://us-central1-perch-01.cloudfunctions.net/createUserDetails', {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        phoneNumber: phoneNumber,\n        userID: userID\n      }).then(result => {\n        if (result.data == 'COMPLETE') this.setState({\n          displayVerification: true,\n          loading: false\n        });\n      }).catch(error => {\n        this.setState({\n          errorMessage: error.message,\n          loading: false\n        });\n      });\n    }).catch(error => {\n      this.setState({\n        error: true,\n        errorMessage: error.message,\n        loading: false\n      });\n    });\n  });\n}\n;\nexport function signOut(doNotReroute) {\n  firebase.auth().signOut().then(() => {\n    if (!doNotReroute) Router.push('/');\n  }).catch(error => {\n    console.log(error.message);\n  });\n}\nexport function sendFeedback() {\n  if (this.state.topic == 'unselected') this.setState({\n    errorMessage: 'A topic is needed. Please pick a topic to contact us about. If you do not have one, please pick \"Other\"'\n  });else if (this.state.message == '') this.setState({\n    errorMessage: 'Please enter a message'\n  });else {\n    this.setState({\n      loading: true\n    }, () => {\n      if (this.state.userDetails) {\n        const ref = this.state.userDetails.driverID ? `driverFeedback/${this.state.userDetails.driverID}` : `userFeedback/${this.state.userDetails.userID}`;\n        firebase.database().ref(ref).update({\n          [new Date().getTime()]: {\n            body: this.state.message,\n            subject: this.state.topic,\n            status: 'UNPROCESSED',\n            date: getDate()\n          }\n        }).then(() => {\n          this.setState({\n            topic: 'unselected',\n            message: '',\n            loading: false\n          }, () => {\n            this.loadResult();\n          });\n        }).catch(error => {\n          console.log(error.message);\n        });\n      } else firebase.database().ref(`userFeedbackEmail`).update({\n        [makeid(5)]: {\n          body: this.state.message,\n          subject: this.state.topic,\n          status: 'UNPROCESSED',\n          date: getDate(),\n          email: this.state.userEmail\n        }\n      }).then(() => {\n        this.setState({\n          topic: 'unselected',\n          message: '',\n          loading: false\n        });\n      }).catch(error => {\n        console.log(error.message);\n      });\n    });\n  }\n}\n;\nexport function changePassword(email_, oldPassword, newPassword) {\n  this.setState({\n    loading: true\n  }, () => {\n    const email = email_;\n    const password = oldPassword;\n    firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n      firebase.auth().currentUser.updatePassword(newPassword).then(() => {\n        this.setState({\n          loading: false,\n          toShow: 'default',\n          currentPassword: '',\n          newPassword: '',\n          confirmNewPassword: ''\n        });\n      }).catch(error => this.setState({\n        errorMessage: error.message,\n        loading: false,\n        newPassword: '',\n        confirmNewPassword: ''\n      }));\n    }).catch(error => this.setState({\n      errorMessage: error.message,\n      loading: false,\n      newPassword: '',\n      confirmNewPassword: ''\n    }));\n  });\n}\n;\nexport function deleteAccount(email, password) {\n  this.setState({\n    loading: true\n  }, () => {\n    firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\n      const user = firebase.auth().currentUser;\n      const userID = user.uid;\n      user.delete().then(() => {\n        firebase.database().ref(`users/${userID}`).remove().catch(error => {\n          console.log(error.message);\n        });\n        firebase.database().ref(`deletedAccountReasons`).update({\n          [userID]: {\n            reason: this.state.deleteAccountReason,\n            reviewed: false,\n            userDetails: this.state.userDetails\n          }\n        }).catch(error => {\n          console.log(error.message);\n        });\n      }).catch(error => this.setState({\n        errorMessage: error.message,\n        loading: false,\n        password1: ''\n      }));\n    }).catch(error => this.setState({\n      errorMessage: error.message,\n      loading: false,\n      password1: ''\n    }));\n  });\n}\n; //MAKE A RANDOMID\n\nexport function makeid(length) {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return `${new Date().getTime()}${result}`;\n}\n;\nexport function getDate() {\n  const DAY = new Date().getDate();\n  const MONTH = new Date().getMonth();\n  const YEAR = new Date().getFullYear();\n  const HOUR = new Date().getHours();\n  const MIN = new Date().getMinutes();\n  const SECOND = new Date().getSeconds();\n  return `${YEAR}-${MONTH}-${DAY}-${HOUR}-${MIN}-${SECOND}`;\n}\n;\nexport function dateformat(time) {\n  let slash1 = 0,\n      slash2 = 0,\n      slash3 = 0;\n\n  for (let k = 0; k < time.length; k++) {\n    if (time.charAt(k) == '-') slash1 == 0 ? slash1 = k : slash2 == 0 ? slash2 = k : slash3 = k;\n    if (slash3 != 0) break;\n  }\n\n  ;\n  const y = time.substring(0, slash1);\n  const m = time.substring(slash1 + 1, slash2);\n  const d = time.substring(slash2 + 1, slash3);\n  return `${d}/${Number(m) + 1}/${y}`;\n}\n;\nexport function polylineLenght(data) {\n  let distance = 0;\n\n  for (let k = 0; k < data.length - 1; k++) distance += distanceCalculator(data[k][0], data[k][1], data[k + 1][0], data[k + 1][1]);\n\n  return distance;\n}\n;\nexport function distanceCalculator(lat1, lon1, lat2, lon2) {\n  let R = 6371 * 1000; // Radius of the earth in m\n\n  let dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n  let dLon = deg2rad(lon2 - lon1);\n  let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  let d = R * c; // Distance in m\n\n  return d;\n}\n;\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\n;","map":null,"metadata":{},"sourceType":"module"}