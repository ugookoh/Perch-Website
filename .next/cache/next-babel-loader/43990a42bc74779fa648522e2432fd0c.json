{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport firebase from 'firebase';\nimport React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, formatDateAllValues, pendingProcessesFunction } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport Loader from 'react-loader-spinner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar PendingProcesses = /*#__PURE__*/function (_React$Component) {\n  _inherits(PendingProcesses, _React$Component);\n\n  var _super = _createSuper(PendingProcesses);\n\n  function PendingProcesses(props) {\n    var _this;\n\n    _classCallCheck(this, PendingProcesses);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderFunctionToSubmit\", function () {\n      var addProcess = _this.state.addProcess;\n\n      if (addProcess) {}\n    });\n\n    _this.state = {\n      result: {},\n      listOfProcesses: [],\n      loading: false,\n      addProcess: false,\n      isNewProcess: false,\n      userID: '',\n      type: '',\n      mainTopic: '',\n      timeCreated: null,\n      title: '',\n      details: '',\n      errorMessage: ''\n    };\n    return _this;\n  }\n\n  _createClass(PendingProcesses, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.database().ref(\"pendingProcessesList\").once('value', function (snapshot) {\n        _this2.setState({\n          result: snapshot.val()\n        });\n      });\n    }\n  }, {\n    key: \"stringIsNotEmpty\",\n    value: function stringIsNotEmpty(s) {\n      return s.length >= 4;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var results = [];\n      var keys = Object.keys(this.state.result).sort(function (a, b) {\n        return b - a;\n      });\n\n      for (var k = 0; k < keys.length; k++) {\n        var data = this.state.result[keys[k]];\n        console.log(data);\n        var displayDate = formatDateAllValues(new Date(data.timeCreated));\n        results.push( /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.previousMessageSum,\n            onClick: function onClick() {//this.setState({ currentData: data, index: k })\n            },\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                width: '90px',\n                height: '30px',\n                backgroundColor: data.type == 'rider' ? colors.GREEN : colors.BLUE,\n                borderRadius: '5px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.readOrUnreadText,\n                style: {\n                  color: '#ffffff',\n                  fontFamily: 'Gilroy-ExtraBold'\n                },\n                children: data.type == 'rider' ? 'Rider' : 'Driver'\n              })\n            }), /*#__PURE__*/_jsx(\"p\", {\n              style: {\n                fontSize: '105%',\n                fontFamily: 'Gilroy-Bold',\n                color: colors.GREEN\n              },\n              children: /*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  color: colors.GREY\n                },\n                children: displayDate\n              })\n            })]\n          }), k == keys.length - 1 ? /*#__PURE__*/_jsx(_Fragment, {}) : /*#__PURE__*/_jsx(\"div\", {\n            className: styles.sharedLine,\n            style: {\n              marginTop: '5px'\n            }\n          })]\n        }));\n      }\n\n      ;\n      var _this$state = this.state,\n          addProcess = _this$state.addProcess,\n          errorMessage = _this$state.errorMessage,\n          isNewProcess = _this$state.isNewProcess;\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.cont,\n        children: [!addProcess && !isNewProcess && /*#__PURE__*/_jsx(\"div\", {\n          className: styles.enterKilometerDiv,\n          style: {\n            marginTop: '20px',\n            marginBottom: '0px',\n            marginLeft: '2.5%',\n            width: '95%'\n          },\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: styles.button2,\n            style: {\n              backgroundColor: colors.GREEN,\n              width: '100%',\n              maxWidth: 'initial'\n            },\n            id: styles.buttonBottom,\n            onClick: function onClick() {\n              _this3.setState({\n                addProcess: true,\n                isNewProcess: true,\n                userID: '',\n                type: '',\n                mainTopic: '',\n                title: '',\n                details: '',\n                errorMessage: ''\n              });\n            },\n            children: this.state.loading ? /*#__PURE__*/_jsx(Loader, {\n              type: \"TailSpin\",\n              color: colors.WHITE,\n              height: '20px',\n              width: '20px'\n            }) : /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              children: \"Add New Process\"\n            })\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.container,\n          style: {\n            backgroundColor: colors.WHITE,\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            className: styles.title,\n            style: {\n              color: colors.BLACK\n            },\n            children: \"List of pending processes\"\n          }), addProcess ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [isNewProcess ? /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                style: {\n                  width: '90%',\n                  display: 'flex',\n                  flexDirection: 'row',\n                  justifyContent: 'space-between',\n                  marginBottom: '0px'\n                },\n                children: [/*#__PURE__*/_jsx(\"input\", {\n                  type: \"text\",\n                  placeholder: \"User ID\",\n                  className: styles.searchInput,\n                  style: {\n                    width: '67%'\n                  },\n                  value: this.state.userID,\n                  onChange: function onChange(event) {\n                    _this3.setState({\n                      userID: event.target.value\n                    });\n                  }\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Type\",\n                  className: styles.searchInput,\n                  style: {\n                    width: '32%'\n                  },\n                  value: this.state.type,\n                  onChange: function onChange(event) {\n                    _this3.setState({\n                      type: event.target.value.toLowerCase()\n                    });\n                  }\n                })]\n              }), /*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                placeholder: \"Main topic\",\n                className: styles.searchInput,\n                style: {\n                  width: '90%',\n                  marginTop: '15px'\n                },\n                value: this.state.mainTopic,\n                onChange: function onChange(event) {\n                  _this3.setState({\n                    mainTopic: event.target.value\n                  });\n                }\n              })]\n            }) : /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                style: {\n                  width: '90%',\n                  display: 'flex',\n                  flexDirection: 'row',\n                  justifyContent: 'space-between',\n                  marginBottom: '0px'\n                },\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  className: styles.mainText,\n                  children: \"\\u2022 User ID - \".concat(this.state.userID)\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  style: {\n                    width: '90px',\n                    height: '30px',\n                    backgroundColor: this.state.type == 'rider' ? colors.GREEN : colors.BLUE,\n                    borderRadius: '5px',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  },\n                  children: /*#__PURE__*/_jsx(\"p\", {\n                    className: styles.readOrUnreadText,\n                    style: {\n                      color: '#ffffff',\n                      fontFamily: 'Gilroy-ExtraBold'\n                    },\n                    children: this.state.type == 'rider' ? 'Rider' : 'Driver'\n                  })\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                style: {\n                  width: '90%',\n                  display: 'flex',\n                  flexDirection: 'row',\n                  justifyContent: 'space-between',\n                  marginBottom: '0px'\n                },\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  className: styles.mainText,\n                  children: \"\\u2022 Topic - \".concat(this.state.mainTopic)\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  className: styles.mainText,\n                  children: \"Created at  ( \".concat(formatDateAllValues(new Date(this.state.timeCreated)), \" )\")\n                })]\n              })]\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"text\",\n              placeholder: \"Title\",\n              className: styles.searchInput,\n              style: {\n                width: '90%',\n                marginTop: '15px'\n              },\n              value: this.state.title,\n              onChange: function onChange(event) {\n                _this3.setState({\n                  title: event.target.value\n                });\n              }\n            }), /*#__PURE__*/_jsx(\"textarea\", {\n              type: \"text\",\n              placeholder: \"Details\",\n              className: styles.contactUsContent,\n              style: {\n                width: '90%',\n                marginTop: '15px',\n                fontSize: '100%'\n              },\n              value: this.state.details,\n              onChange: function onChange(event) {\n                _this3.setState({\n                  details: event.target.value\n                });\n              }\n            })]\n          }) : /*#__PURE__*/_jsx(_Fragment, {}), errorMessage != '' && /*#__PURE__*/_jsx(\"p\", {\n            className: styles.em,\n            style: {\n              textAlign: 'initial'\n            },\n            children: errorMessage\n          })]\n        }), addProcess && /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.enterKilometerDiv,\n          style: {\n            marginTop: '20px',\n            marginBottom: '150px',\n            marginLeft: '2.5%',\n            width: '95%'\n          },\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: styles.button2,\n            style: {\n              backgroundColor: colors.RED\n            },\n            id: styles.buttonBottom,\n            onClick: function onClick() {\n              if (addProcess) _this3.setState({\n                addProcess: false,\n                isNewProcess: false,\n                userID: '',\n                type: '',\n                mainTopic: '',\n                timeCreated: null,\n                title: '',\n                details: '',\n                errorMessage: ''\n              });\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              children: \"Cancel\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.button2,\n            style: {\n              backgroundColor: colors.GREEN\n            },\n            id: styles.buttonBottom,\n            onClick: function onClick() {\n              if (addProcess) {\n                if (isNewProcess) {\n                  if (_this3.stringIsNotEmpty(_this3.state.userID) && (_this3.state.type == 'rider' || _this3.state.type == 'driver') && _this3.stringIsNotEmpty(_this3.state.mainTopic) && _this3.stringIsNotEmpty(_this3.state.title) && _this3.stringIsNotEmpty(_this3.state.details)) pendingProcessesFunction.call(_this3, {\n                    userID: _this3.state.userID,\n                    isNewProcess: true,\n                    type: _this3.state.type,\n                    mainTopic: _this3.state.mainTopic,\n                    title: _this3.state.title,\n                    details: _this3.state.details\n                  });else _this3.setState({\n                    errorMessage: 'Please verify all fields are entered correctly and type is either \"driver\" or \"rider\"'\n                  });\n                } else {\n                  if (_this3.stringIsNotEmpty(_this3.state.title) && _this3.stringIsNotEmpty(_this3.state.details)) pendingProcessesFunction.call(_this3, {\n                    isNewProcess: false,\n                    title: _this3.state.title,\n                    details: _this3.state.details\n                  });else _this3.setState({\n                    errorMessage: 'Please verify all fields are entered correctly'\n                  });\n                }\n              }\n            },\n            children: this.state.loading ? /*#__PURE__*/_jsx(Loader, {\n              type: \"TailSpin\",\n              color: colors.WHITE,\n              height: '20px',\n              width: '20px'\n            }) : /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              children: \"Add Pending Process\"\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return PendingProcesses;\n}(React.Component);\n\nexport { PendingProcesses as default };\n;","map":{"version":3,"sources":["/Users/ugo/Documents/Perch_Projects/Perch-Website/functions/panels/adminPanels/pendingProcesses.js"],"names":["firebase","React","colors","formatDateAllValues","pendingProcessesFunction","styles","Loader","PendingProcesses","props","addProcess","state","result","listOfProcesses","loading","isNewProcess","userID","type","mainTopic","timeCreated","title","details","errorMessage","database","ref","once","snapshot","setState","val","s","length","results","keys","Object","sort","a","b","k","data","console","log","displayDate","Date","push","previousMessageSum","width","height","backgroundColor","GREEN","BLUE","borderRadius","display","justifyContent","alignItems","readOrUnreadText","color","fontFamily","fontSize","GREY","sharedLine","marginTop","cont","enterKilometerDiv","marginBottom","marginLeft","button2","maxWidth","buttonBottom","WHITE","buttonText1","container","BLACK","flexDirection","searchInput","event","target","value","toLowerCase","mainText","contactUsContent","em","textAlign","RED","stringIsNotEmpty","call","Component"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\nimport React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, formatDateAllValues, pendingProcessesFunction } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport Loader from 'react-loader-spinner';\nexport default class PendingProcesses extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            result: {},\n            listOfProcesses: [],\n\n            loading: false,\n\n            addProcess: false,\n            isNewProcess: false,\n            userID: '',\n            type: '',\n            mainTopic: '',\n            timeCreated: null,\n            title: '',\n            details: '',\n\n            errorMessage: '',\n\n        };\n    };\n    componentDidMount() {\n        firebase.database().ref(`pendingProcessesList`).once('value', snapshot => {\n            this.setState({ result: snapshot.val() })\n        })\n    };\n    renderFunctionToSubmit = () => {\n        const { addProcess } = this.state;\n        if (addProcess) {\n\n        }\n    };\n    stringIsNotEmpty(s) {\n        return (s.length >= 4);\n    }\n    render() {\n        let results = [];\n        const keys = Object.keys(this.state.result).sort((a, b) => b - a);\n        for (let k = 0; k < keys.length; k++) {\n            const data = this.state.result[keys[k]];\n            console.log(data)\n            const displayDate = formatDateAllValues(new Date(data.timeCreated))\n            results.push(\n                <>\n                    <div\n                        className={styles.previousMessageSum}\n                        onClick={() => {\n                            //this.setState({ currentData: data, index: k })\n                        }}>\n                        <div style={{ width: '90px', height: '30px', backgroundColor: data.type == 'rider' ? colors.GREEN : colors.BLUE, borderRadius: '5px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                            <p className={styles.readOrUnreadText} style={{ color: '#ffffff', fontFamily: 'Gilroy-ExtraBold' }}>{data.type == 'rider' ? 'Rider' : 'Driver'}</p>\n                        </div>\n\n                        <p style={{ fontSize: '105%', fontFamily: 'Gilroy-Bold', color: colors.GREEN }}>\n                            <span style={{ color: colors.GREY }}>{displayDate}</span>\n                        </p>\n                    </div>\n                    {\n                        k == keys.length - 1 ?\n                            <></> :\n                            <div className={styles.sharedLine} style={{ marginTop: '5px' }}></div>\n                    }\n                </>\n            )\n        };\n        const { addProcess, errorMessage, isNewProcess } = this.state;\n        return (\n            <div className={styles.cont}>\n                {!(addProcess) && !(isNewProcess) &&\n                    <div className={styles.enterKilometerDiv}\n                        style={{ marginTop: '20px', marginBottom: '0px', marginLeft: '2.5%', width: '95%' }}>\n                        <div\n                            className={styles.button2}\n                            style={{ backgroundColor: colors.GREEN, width: '100%', maxWidth: 'initial' }}\n                            id={styles.buttonBottom}\n                            onClick={() => {\n                                this.setState({\n                                    addProcess: true,\n                                    isNewProcess: true,\n                                    userID: '',\n                                    type: '',\n                                    mainTopic: '',\n                                    title: '',\n                                    details: '',\n\n                                    errorMessage: '',\n                                })\n                            }}>\n                            {this.state.loading ?\n                                <Loader\n                                    type=\"TailSpin\"\n                                    color={colors.WHITE}\n                                    height={'20px'}\n                                    width={'20px'} /> :\n                                <p className={styles.buttonText1}>Add New Process</p>}\n                        </div>\n                    </div>}\n                <div className={styles.container} style={{ backgroundColor: colors.WHITE, marginTop: '20px' }}>\n                    <p className={styles.title} style={{ color: colors.BLACK }}>List of pending processes</p>\n                    {addProcess ?\n                        <>\n                            {isNewProcess ?\n                                <>\n                                    <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '0px' }}>\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"User ID\"\n                                            className={styles.searchInput}\n                                            style={{ width: '67%' }}\n                                            value={this.state.userID}\n                                            onChange={event => {\n                                                this.setState({ userID: event.target.value });\n                                            }}\n                                        />\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"Type\"\n                                            className={styles.searchInput}\n                                            style={{ width: '32%' }}\n                                            value={this.state.type}\n                                            onChange={event => {\n                                                this.setState({ type: event.target.value.toLowerCase() });\n                                            }}\n                                        />\n                                    </div>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Main topic\"\n                                        className={styles.searchInput}\n                                        style={{ width: '90%', marginTop: '15px' }}\n                                        value={this.state.mainTopic}\n                                        onChange={event => {\n                                            this.setState({ mainTopic: event.target.value });\n                                        }}\n                                    />\n                                </> :\n                                <>\n                                    <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '0px' }}>\n                                        <p className={styles.mainText}>{`• User ID - ${this.state.userID}`}</p>\n                                        <div style={{ width: '90px', height: '30px', backgroundColor: this.state.type == 'rider' ? colors.GREEN : colors.BLUE, borderRadius: '5px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                                            <p className={styles.readOrUnreadText} style={{ color: '#ffffff', fontFamily: 'Gilroy-ExtraBold' }}>{this.state.type == 'rider' ? 'Rider' : 'Driver'}</p>\n                                        </div>\n                                    </div>\n                                    <div style={{ width: '90%', display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: '0px' }}>\n                                        <p className={styles.mainText}>{`• Topic - ${this.state.mainTopic}`}</p>\n                                        <p className={styles.mainText}>{`Created at  ( ${formatDateAllValues(new Date(this.state.timeCreated))} )`}</p>\n                                    </div>\n                                </>}\n                            <input\n                                type=\"text\"\n                                placeholder=\"Title\"\n                                className={styles.searchInput}\n                                style={{ width: '90%', marginTop: '15px' }}\n                                value={this.state.title}\n                                onChange={event => {\n                                    this.setState({ title: event.target.value });\n                                }}\n                            />\n                            <textarea\n                                type=\"text\"\n                                placeholder=\"Details\"\n                                className={styles.contactUsContent}\n                                style={{ width: '90%', marginTop: '15px', fontSize: '100%' }}\n                                value={this.state.details}\n                                onChange={event => {\n                                    this.setState({ details: event.target.value });\n                                }}\n                            />\n                        </>\n                        :\n                        <>\n\n                        </>\n                    }\n                    {errorMessage != '' && <p\n                        className={styles.em}\n                        style={{ textAlign: 'initial' }}>{errorMessage}</p>}\n                </div>\n\n                {addProcess && <div className={styles.enterKilometerDiv}\n                    style={{ marginTop: '20px', marginBottom: '150px', marginLeft: '2.5%', width: '95%' }}>\n                    <div\n                        className={styles.button2}\n                        style={{ backgroundColor: colors.RED }}\n                        id={styles.buttonBottom}\n                        onClick={() => {\n                            if (addProcess)\n                                this.setState({\n                                    addProcess: false,\n                                    isNewProcess: false,\n                                    userID: '',\n                                    type: '',\n                                    mainTopic: '',\n                                    timeCreated: null,\n                                    title: '',\n                                    details: '',\n\n                                    errorMessage: '',\n                                })\n                        }}>\n                        <p className={styles.buttonText1}>Cancel</p>\n                    </div>\n                    <div\n                        className={styles.button2}\n                        style={{ backgroundColor: colors.GREEN }}\n                        id={styles.buttonBottom}\n                        onClick={() => {\n                            if (addProcess) {\n                                if (isNewProcess) {\n                                    if (\n                                        this.stringIsNotEmpty(this.state.userID) &&\n                                        (this.state.type == 'rider' || this.state.type == 'driver') &&\n                                        this.stringIsNotEmpty(this.state.mainTopic) &&\n                                        this.stringIsNotEmpty(this.state.title) &&\n                                        this.stringIsNotEmpty(this.state.details)\n                                    )\n                                        pendingProcessesFunction.call(this, {\n                                            userID: this.state.userID,\n                                            isNewProcess: true,\n                                            type: this.state.type,\n                                            mainTopic: this.state.mainTopic,\n                                            title: this.state.title,\n                                            details: this.state.details,\n                                        });\n                                    else\n                                        this.setState({\n                                            errorMessage: 'Please verify all fields are entered correctly and type is either \"driver\" or \"rider\"'\n                                        });\n                                }\n                                else {\n                                    if (\n                                        this.stringIsNotEmpty(this.state.title) &&\n                                        this.stringIsNotEmpty(this.state.details)\n                                    )\n                                        pendingProcessesFunction.call(this, {\n                                            isNewProcess: false,\n                                            title: this.state.title,\n                                            details: this.state.details,\n                                        });\n                                    else\n                                        this.setState({\n                                            errorMessage: 'Please verify all fields are entered correctly'\n                                        });\n                                }\n                            }\n                        }}>\n                        {this.state.loading ?\n                            <Loader\n                                type=\"TailSpin\"\n                                color={colors.WHITE}\n                                height={'20px'}\n                                width={'20px'} /> :\n                            <p className={styles.buttonText1}>Add Pending Process</p>}\n                    </div>\n                </div>}\n            </div>\n        )\n\n    }\n};"]},"metadata":{},"sourceType":"module"}