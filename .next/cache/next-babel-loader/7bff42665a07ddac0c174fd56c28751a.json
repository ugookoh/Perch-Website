{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, distanceCalculator, formatDateAllValues, isNumber, M, millisToMinutesAndSeconds, cancelledTripResolver } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport GoogleMapReact from 'google-map-react';\n\nvar polyline = require(\"@mapbox/polyline\");\n\nimport { BiCurrentLocation } from 'react-icons/bi';\nimport * as turf from '@turf/turf'; //for encoding polylines\n\nimport Loader from 'react-loader-spinner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar CancelledTrips = /*#__PURE__*/function (_React$Component) {\n  _inherits(CancelledTrips, _React$Component);\n\n  var _super = _createSuper(CancelledTrips);\n\n  function CancelledTrips(props) {\n    var _this;\n\n    _classCallCheck(this, CancelledTrips);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"loadResult\", function () {\n      firebase.database().ref(\"cancelled_UNRESOLVED\").once('value', function (snapshot) {\n        _this.setState({\n          result: snapshot.val() ? snapshot.val() : {}\n        });\n      })[\"catch\"](function (error) {\n        alert(error.message);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMapBounds\", function (map, maps, legs) {\n      var bounds = new maps.LatLngBounds();\n\n      var r = _toConsumableArray(legs);\n\n      var line = turf.lineString(r);\n      turf.bboxPolygon(turf.bbox(line)).geometry.coordinates[0].forEach(function (v) {\n        bounds.extend(new maps.LatLng(v[0], v[1]));\n      });\n      map.fitBounds(bounds);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderPolylines\", function (map, maps, fitToBoundsOnly) {\n      function geodesicPolyline(polyline_, m, color) {\n        var poly = polyline.decode(polyline_);\n\n        for (var i = 0; i < poly.length; i++) {\n          m.push({\n            lat: poly[i][0],\n            lng: poly[i][1]\n          });\n        }\n\n        if (!fitToBoundsOnly) {\n          var geodesicPolyliner = new maps.Polyline({\n            path: m,\n            options: {\n              strokeColor: color,\n              strokeOpacity: 1,\n              strokeWeight: 4\n            }\n          });\n          geodesicPolyliner.setMap(map);\n        }\n      }\n\n      ;\n      var polylines = _this.state.currentData.polylines;\n      var markers1 = [],\n          markers2 = [],\n          markers3 = [];\n      if (polylines !== null && polylines !== void 0 && polylines.firstLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.firstLeg, markers1, colors.GREEN);\n      if (polylines !== null && polylines !== void 0 && polylines.secondLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.secondLeg, markers2, colors.BLUE);\n      if (polylines !== null && polylines !== void 0 && polylines.thirdLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.thirdLeg, markers3, colors.PURPLE);\n      var newArray = [].concat(markers1, markers2, markers3);\n\n      _this.getMapBounds(map, maps, newArray.map(function (v) {\n        return [v.lat, v.lng];\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderDriverMarkers\", function (tripDetails) {\n      var driverMarkers = [];\n\n      for (var key in tripDetails) {\n        var image = '';\n\n        switch (key) {\n          case '_1':\n            {\n              image = '/greenCarIcon.svg';\n            }\n            break;\n\n          case '_2':\n            {\n              image = '/blueCarIcon.svg';\n            }\n            break;\n\n          case '_3':\n            {\n              image = '/purpleCarIcon.svg';\n            }\n            break;\n        }\n\n        ;\n        driverMarkers.push( /*#__PURE__*/_jsx(\"img\", {\n          lat: tripDetails[key].location.latitude,\n          lng: tripDetails[key].location.longitude,\n          src: image,\n          className: styles.mapIcon\n        }, key));\n      }\n\n      ;\n      return driverMarkers;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentDataCost\", function (currentData) {\n      var cost = currentData.cost,\n          driverID = currentData.driverID,\n          tripDetails = currentData.tripDetails;\n      var toDrivers = cost.toDrivers,\n          total = cost.total,\n          usedPerchKms = cost.usedPerchKms;\n      var v = [];\n      v.push( /*#__PURE__*/_jsx(_Fragment, {\n        children: !!usedPerchKms && /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 20\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: \"Perch Kilometers paid\"\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: [usedPerchKms.toFixed(2), \"km - $( \", Number(usedPerchKms * _this.state.costPerPerchKM).toFixed(2), \" )\"]\n          })]\n        }, 'second')\n      }));\n      var cut = 0;\n\n      for (var key in toDrivers) {\n        var value = '';\n        var toCkeckIfCanceller = '';\n\n        switch (key) {\n          case 'firstDriverPay':\n            {\n              value = \"First driver's cut\";\n              toCkeckIfCanceller = '_1';\n            }\n            break;\n\n          case 'secondDriverPay':\n            {\n              value = \"Second driver's cut\";\n              toCkeckIfCanceller = '_2';\n            }\n            break;\n\n          case 'thirdDriverPay':\n            {\n              value = \"Third driver's cut\";\n              toCkeckIfCanceller = '_3';\n            }\n            break;\n        }\n\n        ;\n        cut += toDrivers[key];\n        if (toDrivers[key]) v.push( /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: [value, \" \", /*#__PURE__*/_jsx(\"span\", {\n              style: {\n                fontFamily: 'Gilroy-Semibold',\n                color: colors.GREY\n              },\n              children: driverID == tripDetails[toCkeckIfCanceller].driverID ? ' (CANCELLER)' : ''\n            })]\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: [\"$\", toDrivers[key]]\n          })]\n        }, key));\n      }\n\n      cut = Number(total) + Number(usedPerchKms * _this.state.costPerPerchKM) - cut;\n      v.unshift( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Semibold',\n            margin: 0\n          },\n          children: \"Admin's cut\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Bold',\n            margin: 0\n          },\n          children: [\"$\", cut.toFixed(2)]\n        })]\n      }, 'cut'));\n      v.push( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0,\n            color: colors.GREEN\n          },\n          children: \"Total paid\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Medium',\n            margin: 0,\n            color: colors.GREEN\n          },\n          children: [\"$\", total]\n        })]\n      }, 'top'));\n      return v;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCurrentDataRefund\", function (cost) {\n      var toDrivers = cost.toDrivers,\n          total = cost.total,\n          usedPerchKms = cost.usedPerchKms;\n      var v = [];\n      v.push( /*#__PURE__*/_jsx(_Fragment, {\n        children: !!usedPerchKms && /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: \"Refund Rider Perch Kilometers\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            placeholder: \"$\".concat((usedPerchKms * _this.state.costPerPerchKM).toFixed(2)),\n            className: styles.searchInput,\n            style: {\n              width: '20%',\n              height: '40px'\n            },\n            value: _this.state.refundRiderPerchKms,\n            onChange: function onChange(event) {\n              var value = event.target.value;\n              if (isNumber(value) && Number(value) <= Number((usedPerchKms * _this.state.costPerPerchKM).toFixed(2)) || !value) _this.setState({\n                refundRiderPerchKms: value\n              });\n            }\n          })]\n        }, '2')\n      }));\n      var cut = 0;\n\n      var _loop = function _loop(key) {\n        var value = '';\n        var toEdit = '';\n\n        switch (key) {\n          case 'firstDriverPay':\n            {\n              value = \"First driver's payment\";\n              toEdit = 'payFirstDriver';\n            }\n            break;\n\n          case 'secondDriverPay':\n            {\n              value = \"Second driver's payment\";\n              toEdit = 'paySecondDriver';\n            }\n            break;\n\n          case 'thirdDriverPay':\n            {\n              value = \"Third driver's payment\";\n              toEdit = 'payThirdDriver';\n            }\n            break;\n        }\n\n        ;\n        cut += toDrivers[key];\n        if (toDrivers[key]) v.push( /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: value\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            placeholder: \"$\".concat(toDrivers[key]),\n            className: styles.searchInput,\n            style: {\n              width: '20%',\n              height: '40px'\n            },\n            value: _this.state[toEdit],\n            onChange: function onChange(event) {\n              var value = event.target.value;\n              if (isNumber(value) && Number(value) <= toDrivers[key] || !value) _this.setState(_defineProperty({}, toEdit, value));\n            }\n          })]\n        }, key));\n      };\n\n      for (var key in toDrivers) {\n        _loop(key);\n      }\n\n      ;\n      cut = Number(total) + Number(usedPerchKms * _this.state.costPerPerchKM) - cut;\n      v.unshift( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Admin's cut\"\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          placeholder: \"$\".concat(cut.toFixed(2)),\n          className: styles.searchInput,\n          style: {\n            width: '20%',\n            height: '40px'\n          },\n          value: _this.state.adminCut,\n          onChange: function onChange(event) {\n            var value = event.target.value;\n            if (isNumber(value) && Number(value) <= Number(cut.toFixed(2)) || !value) _this.setState({\n              adminCut: value\n            });\n          }\n        })]\n      }, 'cut'));\n      v.push( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Refund Rider Cash\"\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          placeholder: \"$\".concat(total),\n          className: styles.searchInput,\n          style: {\n            width: '20%',\n            height: '40px'\n          },\n          value: _this.state.refundRiderAmount,\n          onChange: function onChange(event) {\n            var value = event.target.value;\n            if (isNumber(value) && Number(value) <= Number(total) || !value) _this.setState({\n              refundRiderAmount: value\n            });\n          }\n        })]\n      }, \"1\"));\n      return v;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"costIsBalanced\", function () {\n      var _this$state = _this.state,\n          refundRiderAmount = _this$state.refundRiderAmount,\n          currentData = _this$state.currentData,\n          payFirstDriver = _this$state.payFirstDriver,\n          paySecondDriver = _this$state.paySecondDriver,\n          payThirdDriver = _this$state.payThirdDriver,\n          adminCut = _this$state.adminCut,\n          refundRiderPerchKms = _this$state.refundRiderPerchKms,\n          costPerPerchKM = _this$state.costPerPerchKM;\n      var refundedCash = Number(Number(refundRiderAmount == \"\" ? 0 : refundRiderAmount).toFixed(2));\n      var refundedPerchCash = Number(Number(refundRiderPerchKms == \"\" ? 0 : refundRiderPerchKms).toFixed(2));\n      var total = Number(currentData.cost.total);\n      var totalTaken = total + currentData.cost.usedPerchKms * costPerPerchKM;\n      var totalGiven = Number(Number(payFirstDriver == \"\" ? 0 : payFirstDriver).toFixed(2)) + Number(Number(paySecondDriver == \"\" ? 0 : paySecondDriver).toFixed(2)) + Number(Number(payThirdDriver == \"\" ? 0 : payThirdDriver).toFixed(2)) + Number(Number(adminCut == \"\" ? 0 : adminCut).toFixed(2)) + (refundedCash + refundedPerchCash);\n\n      function f(s) {\n        return s != '';\n      }\n\n      ;\n      var allFieldsFilled = f(refundRiderAmount) && f(payFirstDriver) && f(adminCut) && (!!currentData.cost.usedPerchKms ? f(refundRiderPerchKms) : true) && (!!currentData.cost.toDrivers.secondDriverPay ? f(paySecondDriver) : true) && (!!currentData.cost.toDrivers.thirdDriverPay ? f(payThirdDriver) : true);\n      return {\n        totalCollected: totalTaken.toFixed(2),\n        totalAllocated: totalGiven.toFixed(2),\n        totalLeft: (totalTaken - totalGiven).toFixed(2),\n        balancedBool: totalGiven.toFixed(2) === totalTaken.toFixed(2) && allFieldsFilled\n      };\n    });\n\n    _this.state = {\n      index: 0,\n      idRiderSearch: '',\n      idDriverSearch: '',\n      result: {},\n      currentData: null,\n      key: \"\",\n      refundRiderAmount: '',\n      refundRiderPerchKms: '',\n      payFirstDriver: '',\n      paySecondDriver: '',\n      payThirdDriver: '',\n      adminCut: '',\n      costPerPerchKM: 0,\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(CancelledTrips, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.loadResult();\n      firebase.database().ref('GOOGLE_KEY').once('value', function (key) {\n        _this2.setState({\n          key: key.val()\n        });\n      })[\"catch\"](function (error) {\n        return console.log(error.message);\n      });\n      firebase.database().ref('costPerPerchKM').once('value', function (cost) {\n        _this2.setState({\n          costPerPerchKM: cost.val()\n        });\n      })[\"catch\"](function (error) {\n        return console.log(error.message);\n      });\n    }\n  }, {\n    key: \"renderCurrentDataTripDetails\",\n    value: function renderCurrentDataTripDetails(currentData) {\n      var tripDetails = currentData.tripDetails,\n          userLocation = currentData.userLocation,\n          driverID = currentData.driverID;\n      var tripDetailsRender = [];\n      var i = 0;\n\n      for (var key in tripDetails) {\n        i++;\n        var distance = '';\n        var status = tripDetails[key].status;\n        var value = '';\n\n        switch (key) {\n          case '_1':\n            {\n              value = 'First Trip';\n            }\n            break;\n\n          case '_2':\n            {\n              value = 'Second Trip';\n            }\n            break;\n\n          case '_3':\n            {\n              value = 'Third Trip';\n            }\n            break;\n        }\n\n        ;\n\n        if (userLocation) {\n          var d = distanceCalculator(userLocation.latitude, userLocation.longitude, tripDetails[key].location.latitude, tripDetails[key].location.longitude);\n          var unit = d > 1000 ? 'km' : 'meters';\n          d = d > 1000 ? d / 1000 : d;\n          distance = \"(\".concat(d.toFixed(2), \" \").concat(unit, \" away)\");\n        }\n\n        tripDetailsRender.push( /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: [value, \" \", /*#__PURE__*/_jsx(\"span\", {\n              style: {\n                fontFamily: 'Gilroy-Semibold',\n                color: colors.GREY\n              },\n              children: driverID == tripDetails[key].driverID ? ' (CANCELLER)' : ''\n            })]\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: [status, \" \", /*#__PURE__*/_jsx(\"span\", {\n              style: {\n                color: colors.GREY,\n                fontFamily: 'Gilroy-Semibold'\n              },\n              children: distance\n            })]\n          })]\n        }, key));\n      }\n\n      ;\n      tripDetailsRender.unshift( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Trip Number\"\n        }), /*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Bold',\n            margin: 0\n          },\n          children: i\n        })]\n      }));\n      return tripDetailsRender;\n    }\n  }, {\n    key: \"renderCurrentDataTripDetailsTime\",\n    value: function renderCurrentDataTripDetailsTime(t1_, startAt) {\n      var t1 = new Date(t1_); //time we ended trip\n\n      var t2 = new Date(startAt.year, M.indexOf(startAt.month), startAt.day, startAt.hour, startAt.min, startAt.sec); //time we started trip\n\n      var difference = t1.getTime() - t2.getTime();\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: \"Time of trip confirmation\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: formatDateAllValues(t2)\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: \"Time of trip cancellation\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: formatDateAllValues(t1)\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: \"Duration before trip cancellation\"\n          }), /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: millisToMinutesAndSeconds(difference)\n          })]\n        })]\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var results = [];\n      var keys = Object.keys(this.state.result).sort(function (a, b) {\n        return b - a;\n      });\n\n      var _loop2 = function _loop2(k) {\n        var data = _this3.state.result[keys[k]];\n        var startAt = data.startAt;\n        var displayDate = formatDateAllValues(new Date(startAt.year, M.indexOf(startAt.month), startAt.day, startAt.hour, startAt.min, startAt.sec));\n        results.push( /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.previousMessageSum,\n            onClick: function onClick() {\n              _this3.setState({\n                currentData: data,\n                index: k\n              });\n            },\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                width: '90px',\n                height: '30px',\n                backgroundColor: data.canceller == 'rider' ? colors.GREEN : colors.BLUE,\n                borderRadius: '5px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.readOrUnreadText,\n                style: {\n                  color: '#ffffff',\n                  fontFamily: 'Gilroy-ExtraBold'\n                },\n                children: data.canceller == 'rider' ? 'Rider' : 'Driver'\n              })\n            }), /*#__PURE__*/_jsx(\"p\", {\n              style: {\n                fontSize: '105%',\n                fontFamily: 'Gilroy-Bold',\n                color: colors.GREEN\n              },\n              children: /*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  color: colors.GREY\n                },\n                children: displayDate\n              })\n            })]\n          }), k == keys.length - 1 ? /*#__PURE__*/_jsx(_Fragment, {}) : /*#__PURE__*/_jsx(\"div\", {\n            className: styles.sharedLine,\n            style: {\n              marginTop: '5px'\n            }\n          })]\n        }));\n      };\n\n      for (var k = 0; k < keys.length; k++) {\n        _loop2(k);\n      }\n\n      ;\n      var defaultProps = {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 11\n      };\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: styles.cont,\n        children: this.state.currentData ? /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.container,\n            style: {\n              backgroundColor: colors.WHITE,\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              className: styles.title,\n              style: {\n                color: colors.BLACK\n              },\n              children: \"Cancelled Trip\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                width: '90%',\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                marginBottom: '20px'\n              }\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.mapBox,\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: styles.mapBoxCenter,\n                onClick: function onClick() {\n                  _this3.renderPolylines(_this3.map.map_, _this3.map.maps_, true);\n                },\n                children: /*#__PURE__*/_jsx(BiCurrentLocation, {\n                  color: colors.GREEN,\n                  size: 25\n                })\n              }), /*#__PURE__*/_jsxs(GoogleMapReact, {\n                ref: function ref(map) {\n                  return _this3.map = map;\n                },\n                bootstrapURLKeys: {\n                  key: this.state.key\n                },\n                defaultCenter: defaultProps.center,\n                defaultZoom: defaultProps.zoom,\n                options: {\n                  fullscreenControl: false,\n                  disableDefaultUI: true\n                },\n                onGoogleApiLoaded: function onGoogleApiLoaded(_ref) {\n                  var map = _ref.map,\n                      maps = _ref.maps;\n                  return _this3.renderPolylines(map, maps);\n                },\n                children: [this.state.currentData.userLocation && /*#__PURE__*/_jsx(\"img\", {\n                  lat: this.state.currentData.userLocation.latitude,\n                  lng: this.state.currentData.userLocation.longitude,\n                  src: '/userIcon.svg',\n                  className: styles.mapIcon\n                }), this.renderDriverMarkers(this.state.currentData.tripDetails)]\n              })]\n            }), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                fontFamily: 'Gilroy-SemiBold',\n                marginTop: '40px'\n              },\n              children: \"Breakdown of trip cancellation\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: '1px',\n                width: '90%',\n                backgroundColor: colors.GREY,\n                marginTop: '5px'\n              }\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.breakdownSpreadApart,\n              style: {\n                marginTop: '20px'\n              },\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                style: {\n                  fontFamily: 'Gilroy-Medium',\n                  margin: 0\n                },\n                children: \"Canceller\"\n              }), /*#__PURE__*/_jsx(\"div\", {\n                style: {\n                  width: '90px',\n                  height: '30px',\n                  backgroundColor: this.state.currentData.canceller == 'rider' ? colors.GREEN : colors.BLUE,\n                  borderRadius: '5px',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center'\n                },\n                children: /*#__PURE__*/_jsx(\"p\", {\n                  className: styles.readOrUnreadText,\n                  style: {\n                    color: '#ffffff',\n                    fontFamily: 'Gilroy-ExtraBold'\n                  },\n                  children: this.state.currentData.canceller == 'rider' ? 'Rider' : 'Driver'\n                })\n              })]\n            }), this.renderCurrentDataTripDetails(this.state.currentData), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                fontFamily: 'Gilroy-SemiBold',\n                marginTop: '50px'\n              },\n              children: \"Time details\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: '1px',\n                width: '90%',\n                backgroundColor: colors.GREY,\n                marginTop: '5px'\n              }\n            }), this.renderCurrentDataTripDetailsTime(this.state.currentData.time, this.state.currentData.startAt), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                fontFamily: 'Gilroy-SemiBold',\n                marginTop: '50px'\n              },\n              children: \"Cost Details\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: '1px',\n                width: '90%',\n                backgroundColor: colors.GREY,\n                marginTop: '5px'\n              }\n            }), this.renderCurrentDataCost(this.state.currentData), /*#__PURE__*/_jsx(\"p\", {\n              className: styles.text,\n              style: {\n                color: colors.GREY,\n                fontFamily: 'Gilroy-SemiBold',\n                marginTop: '50px'\n              },\n              children: \"Refund values\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: '1px',\n                width: '90%',\n                backgroundColor: colors.GREY,\n                marginTop: '5px'\n              }\n            }), this.renderCurrentDataRefund(this.state.currentData.cost), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: '1px',\n                width: '90%',\n                backgroundColor: colors.GREY,\n                marginTop: '25px'\n              }\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.breakdownSpreadApart,\n              style: {\n                marginTop: '10px'\n              },\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                className: styles.breakdownParter,\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  className: styles.breakdownTitle,\n                  children: \"Total Collected\"\n                }), /*#__PURE__*/_jsxs(\"p\", {\n                  className: styles.breakdownCash,\n                  style: {\n                    color: colors.GREY\n                  },\n                  children: [\"$\", this.costIsBalanced().totalCollected]\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.breakdownParter,\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  className: styles.breakdownTitle,\n                  children: \"Total Left\"\n                }), /*#__PURE__*/_jsxs(\"p\", {\n                  className: styles.breakdownCash,\n                  style: {\n                    color: colors.GREY\n                  },\n                  children: [\"$\", this.costIsBalanced().totalLeft]\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: styles.breakdownParter,\n                children: [/*#__PURE__*/_jsx(\"p\", {\n                  className: styles.breakdownTitle,\n                  children: \"Total Allocated\"\n                }), /*#__PURE__*/_jsxs(\"p\", {\n                  className: styles.breakdownCash,\n                  style: {\n                    color: colors.GREEN\n                  },\n                  children: [\"$\", this.costIsBalanced().totalAllocated]\n                })]\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.enterKilometerDiv,\n            style: {\n              marginTop: '20px',\n              marginBottom: '150px',\n              marginLeft: '2.5%',\n              width: '95%'\n            },\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.button2,\n              style: {\n                backgroundColor: colors.RED\n              },\n              id: styles.buttonBottom,\n              onClick: function onClick() {\n                _this3.setState({\n                  currentData: null,\n                  refundRiderAmount: '',\n                  refundRiderPerchKms: '',\n                  payFirstDriver: '',\n                  paySecondDriver: '',\n                  payThirdDriver: '',\n                  adminCut: ''\n                });\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Cancel\"\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: this.costIsBalanced().balancedBool ? styles.button2 : styles.buttonSelected,\n              style: {\n                backgroundColor: colors.GREEN\n              },\n              id: styles.buttonBottom,\n              onClick: function onClick() {\n                if (_this3.costIsBalanced().balancedBool) {\n                  _this3.setState({\n                    loading: true\n                  }, function () {\n                    var driverObjects = [];\n\n                    for (var newKey in _this3.state.currentData.tripDetails) {\n                      var toPay = '';\n\n                      switch (newKey) {\n                        case '_1':\n                          {\n                            toPay = _this3.state.payFirstDriver;\n                          }\n                          break;\n\n                        case '_2':\n                          {\n                            toPay = _this3.state.paySecondDriver;\n                          }\n                          break;\n\n                        case '_3':\n                          {\n                            toPay = _this3.state.payThirdDriver;\n                          }\n                          break;\n                      }\n\n                      ;\n                      driverObjects.push({\n                        driverID: _this3.state.currentData.tripDetails[newKey].driverID,\n                        driverHistoryRef: _this3.state.currentData.tripDetails[newKey].historyRef,\n                        toPay: Number(Number(toPay).toFixed(2))\n                      });\n                    }\n\n                    ;\n                    cancelledTripResolver.call(_this3, {\n                      refundRiderAmount: Number(Number(_this3.state.refundRiderAmount).toFixed(2)),\n                      refundRiderPerchKms: Number(_this3.state.refundRiderPerchKms) / _this3.state.costPerPerchKM,\n                      driverObjects: driverObjects,\n                      //An array of objects containing {driverID,toPay,driverHistoryRef}\n                      userID: _this3.state.currentData.riderID,\n                      historyRef: _this3.state.currentData.historyRef,\n                      paymentIntentId: _this3.state.currentData.cost.paymentIntentId,\n                      cancelled_UNRESOLVED_KEY: keys[_this3.state.index]\n                    });\n                  });\n                }\n              },\n              children: this.state.loading ? /*#__PURE__*/_jsx(Loader, {\n                type: \"TailSpin\",\n                color: colors.WHITE,\n                height: '20px',\n                width: '20px'\n              }) : /*#__PURE__*/_jsx(\"p\", {\n                className: styles.buttonText1,\n                children: \"Refund Amount\"\n              })\n            })]\n          })]\n        }) : /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.container,\n          style: {\n            backgroundColor: colors.WHITE,\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            className: styles.title,\n            style: {\n              color: colors.BLACK\n            },\n            children: \"Cancelled Trips\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              width: '90%',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              marginBottom: '20px'\n            }\n          }), results]\n        })\n      });\n    }\n  }]);\n\n  return CancelledTrips;\n}(React.Component);\n\nexport { CancelledTrips as default };\n;","map":null,"metadata":{},"sourceType":"module"}