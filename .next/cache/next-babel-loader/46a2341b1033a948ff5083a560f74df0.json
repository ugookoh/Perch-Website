{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { colors, distanceCalculator, formatDateAllValues, isNumber, M, millisToMinutesAndSeconds, cancelledTripResolver } from '../../functions';\nimport styles from '../panel_layout.module.css';\nimport firebase from 'firebase';\nimport GoogleMapReact from 'google-map-react';\n\nconst polyline = require(\"@mapbox/polyline\");\n\nimport { BiCurrentLocation } from 'react-icons/bi';\nimport * as turf from '@turf/turf'; //for encoding polylines\n\nimport Loader from 'react-loader-spinner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default class CancelledTrips extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"loadResult\", () => {\n      firebase.database().ref(`cancelled_UNRESOLVED`).once('value', snapshot => {\n        this.setState({\n          result: snapshot.val() ? snapshot.val() : {}\n        });\n      }).catch(error => {\n        alert(error.message);\n      });\n    });\n\n    _defineProperty(this, \"getMapBounds\", (map, maps, legs) => {\n      const bounds = new maps.LatLngBounds();\n      const r = [...legs //[this.props.location.latitude, this.props.location.longitude], //USER LOCATION SHOULD BE HERE\n      //[this.props.destination.latitude, this.props.destination.longitude] //DRIVER LOCATION SHOULD BE HERE\n      ];\n      const line = turf.lineString(r);\n      turf.bboxPolygon(turf.bbox(line)).geometry.coordinates[0].forEach(v => {\n        bounds.extend(new maps.LatLng(v[0], v[1]));\n      });\n      map.fitBounds(bounds);\n    });\n\n    _defineProperty(this, \"renderPolylines\", (map, maps, fitToBoundsOnly) => {\n      function geodesicPolyline(polyline_, m, color) {\n        const poly = polyline.decode(polyline_);\n\n        for (let i = 0; i < poly.length; i++) m.push({\n          lat: poly[i][0],\n          lng: poly[i][1]\n        });\n\n        if (!fitToBoundsOnly) {\n          let geodesicPolyliner = new maps.Polyline({\n            path: m,\n            options: {\n              strokeColor: color,\n              strokeOpacity: 1,\n              strokeWeight: 4\n            }\n          });\n          geodesicPolyliner.setMap(map);\n        }\n      }\n\n      ;\n      const {\n        polylines\n      } = this.state.currentData;\n      let markers1 = [],\n          markers2 = [],\n          markers3 = [];\n      if (polylines !== null && polylines !== void 0 && polylines.firstLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.firstLeg, markers1, colors.GREEN);\n      if (polylines !== null && polylines !== void 0 && polylines.secondLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.secondLeg, markers2, colors.BLUE);\n      if (polylines !== null && polylines !== void 0 && polylines.thirdLeg) geodesicPolyline(polylines === null || polylines === void 0 ? void 0 : polylines.thirdLeg, markers3, colors.PURPLE);\n      let newArray = [...markers1, ...markers2, ...markers3];\n      this.getMapBounds(map, maps, newArray.map(v => {\n        return [v.lat, v.lng];\n      }));\n    });\n\n    _defineProperty(this, \"renderDriverMarkers\", tripDetails => {\n      let driverMarkers = [];\n\n      for (let key in tripDetails) {\n        let image = '';\n\n        switch (key) {\n          case '_1':\n            {\n              image = '/greenCarIcon.svg';\n            }\n            break;\n\n          case '_2':\n            {\n              image = '/blueCarIcon.svg';\n            }\n            break;\n\n          case '_3':\n            {\n              image = '/purpleCarIcon.svg';\n            }\n            break;\n        }\n\n        ;\n        driverMarkers.push( /*#__PURE__*/_jsx(\"img\", {\n          lat: tripDetails[key].location.latitude,\n          lng: tripDetails[key].location.longitude,\n          src: image,\n          className: styles.mapIcon\n        }, key));\n      }\n\n      ;\n      return driverMarkers;\n    });\n\n    _defineProperty(this, \"renderCurrentDataCost\", currentData => {\n      const {\n        cost,\n        driverID,\n        tripDetails\n      } = currentData;\n      const {\n        toDrivers,\n        total,\n        usedPerchKms\n      } = cost;\n      let v = [];\n      v.push( /*#__PURE__*/_jsx(_Fragment, {\n        children: !!usedPerchKms && /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 20\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: \"Perch Kilometers paid\"\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: [usedPerchKms.toFixed(2), \"km - $( \", Number(usedPerchKms * this.state.costPerPerchKM).toFixed(2), \" )\"]\n          })]\n        }, 'second')\n      }));\n      let cut = 0;\n\n      for (let key in toDrivers) {\n        let value = '';\n        let toCkeckIfCanceller = '';\n\n        switch (key) {\n          case 'firstDriverPay':\n            {\n              value = \"First driver's cut\";\n              toCkeckIfCanceller = '_1';\n            }\n            break;\n\n          case 'secondDriverPay':\n            {\n              value = \"Second driver's cut\";\n              toCkeckIfCanceller = '_2';\n            }\n            break;\n\n          case 'thirdDriverPay':\n            {\n              value = \"Third driver's cut\";\n              toCkeckIfCanceller = '_3';\n            }\n            break;\n        }\n\n        ;\n        cut += toDrivers[key];\n        if (toDrivers[key]) v.push( /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: [value, \" \", /*#__PURE__*/_jsx(\"span\", {\n              style: {\n                fontFamily: 'Gilroy-Semibold',\n                color: colors.GREY\n              },\n              children: driverID == tripDetails[toCkeckIfCanceller].driverID ? ' (CANCELLER)' : ''\n            })]\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Medium',\n              margin: 0\n            },\n            children: [\"$\", toDrivers[key]]\n          })]\n        }, key));\n      }\n\n      cut = Number(total) + Number(usedPerchKms * this.state.costPerPerchKM) - cut;\n      v.unshift( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Semibold',\n            margin: 0\n          },\n          children: \"Admin's cut\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Bold',\n            margin: 0\n          },\n          children: [\"$\", cut.toFixed(2)]\n        })]\n      }, 'cut'));\n      v.push( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0,\n            color: colors.GREEN\n          },\n          children: \"Total paid\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Medium',\n            margin: 0,\n            color: colors.GREEN\n          },\n          children: [\"$\", total]\n        })]\n      }, 'top'));\n      return v;\n    });\n\n    _defineProperty(this, \"renderCurrentDataRefund\", cost => {\n      const {\n        toDrivers,\n        total,\n        usedPerchKms\n      } = cost;\n      let v = [];\n      v.push( /*#__PURE__*/_jsx(_Fragment, {\n        children: !!usedPerchKms && /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: \"Refund Rider Perch Kilometers\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            placeholder: `$${(usedPerchKms * this.state.costPerPerchKM).toFixed(2)}`,\n            className: styles.searchInput,\n            style: {\n              width: '20%',\n              height: '40px'\n            },\n            value: this.state.refundRiderPerchKms,\n            onChange: event => {\n              const value = event.target.value;\n              if (isNumber(value) && Number(value) <= Number((usedPerchKms * this.state.costPerPerchKM).toFixed(2)) || !value) this.setState({\n                refundRiderPerchKms: value\n              });\n            }\n          })]\n        }, '2')\n      }));\n      let cut = 0;\n\n      for (let key in toDrivers) {\n        let value = '';\n        let toEdit = '';\n\n        switch (key) {\n          case 'firstDriverPay':\n            {\n              value = \"First driver's payment\";\n              toEdit = 'payFirstDriver';\n            }\n            break;\n\n          case 'secondDriverPay':\n            {\n              value = \"Second driver's payment\";\n              toEdit = 'paySecondDriver';\n            }\n            break;\n\n          case 'thirdDriverPay':\n            {\n              value = \"Third driver's payment\";\n              toEdit = 'payThirdDriver';\n            }\n            break;\n        }\n\n        ;\n        cut += toDrivers[key];\n        if (toDrivers[key]) v.push( /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.breakdownSpreadApart,\n          style: {\n            marginTop: 15\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontFamily: 'Gilroy-Regular',\n              margin: 0\n            },\n            children: value\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            placeholder: `$${toDrivers[key]}`,\n            className: styles.searchInput,\n            style: {\n              width: '20%',\n              height: '40px'\n            },\n            value: this.state[toEdit],\n            onChange: event => {\n              const value = event.target.value;\n              if (isNumber(value) && Number(value) <= toDrivers[key] || !value) this.setState({\n                [toEdit]: value\n              });\n            }\n          })]\n        }, key));\n      }\n\n      ;\n      cut = Number(total) + Number(usedPerchKms * this.state.costPerPerchKM) - cut;\n      v.unshift( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Admin's cut\"\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          placeholder: `$${cut.toFixed(2)}`,\n          className: styles.searchInput,\n          style: {\n            width: '20%',\n            height: '40px'\n          },\n          value: this.state.adminCut,\n          onChange: event => {\n            const value = event.target.value;\n            if (isNumber(value) && Number(value) <= Number(cut.toFixed(2)) || !value) this.setState({\n              adminCut: value\n            });\n          }\n        })]\n      }, 'cut'));\n      v.push( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Refund Rider Cash\"\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          placeholder: `$${total}`,\n          className: styles.searchInput,\n          style: {\n            width: '20%',\n            height: '40px'\n          },\n          value: this.state.refundRiderAmount,\n          onChange: event => {\n            const value = event.target.value;\n            if (isNumber(value) && Number(value) <= Number(total) || !value) this.setState({\n              refundRiderAmount: value\n            });\n          }\n        })]\n      }, `1`));\n      return v;\n    });\n\n    _defineProperty(this, \"costIsBalanced\", () => {\n      const {\n        refundRiderAmount,\n        currentData,\n        payFirstDriver,\n        paySecondDriver,\n        payThirdDriver,\n        adminCut,\n        refundRiderPerchKms,\n        costPerPerchKM\n      } = this.state;\n      const refundedCash = Number(Number(refundRiderAmount == \"\" ? 0 : refundRiderAmount).toFixed(2));\n      const refundedPerchCash = Number(Number(refundRiderPerchKms == \"\" ? 0 : refundRiderPerchKms).toFixed(2));\n      const total = Number(currentData.cost.total);\n      const totalTaken = total + currentData.cost.usedPerchKms * costPerPerchKM;\n      const totalGiven = Number(Number(payFirstDriver == \"\" ? 0 : payFirstDriver).toFixed(2)) + Number(Number(paySecondDriver == \"\" ? 0 : paySecondDriver).toFixed(2)) + Number(Number(payThirdDriver == \"\" ? 0 : payThirdDriver).toFixed(2)) + Number(Number(adminCut == \"\" ? 0 : adminCut).toFixed(2)) + (refundedCash + refundedPerchCash);\n\n      function f(s) {\n        return s != '';\n      }\n\n      ;\n      const allFieldsFilled = f(refundRiderAmount) && f(payFirstDriver) && f(adminCut) && (!!currentData.cost.usedPerchKms ? f(refundRiderPerchKms) : true) && (!!currentData.cost.toDrivers.secondDriverPay ? f(paySecondDriver) : true) && (!!currentData.cost.toDrivers.thirdDriverPay ? f(payThirdDriver) : true);\n      return {\n        totalCollected: totalTaken.toFixed(2),\n        totalAllocated: totalGiven.toFixed(2),\n        totalLeft: (totalTaken - totalGiven).toFixed(2),\n        balancedBool: totalGiven.toFixed(2) === totalTaken.toFixed(2) && allFieldsFilled\n      };\n    });\n\n    this.state = {\n      index: 0,\n      idRiderSearch: '',\n      idDriverSearch: '',\n      result: {},\n      currentData: null,\n      key: \"\",\n      refundRiderAmount: '',\n      refundRiderPerchKms: '',\n      payFirstDriver: '',\n      paySecondDriver: '',\n      payThirdDriver: '',\n      adminCut: '',\n      costPerPerchKM: 0,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.loadResult();\n    firebase.database().ref('GOOGLE_KEY').once('value', key => {\n      this.setState({\n        key: key.val()\n      });\n    }).catch(error => console.log(error.message));\n    firebase.database().ref('costPerPerchKM').once('value', cost => {\n      this.setState({\n        costPerPerchKM: cost.val()\n      });\n    }).catch(error => console.log(error.message));\n  }\n\n  renderCurrentDataTripDetails(currentData) {\n    const {\n      tripDetails,\n      userLocation,\n      driverID\n    } = currentData;\n    let tripDetailsRender = [];\n    let i = 0;\n\n    for (let key in tripDetails) {\n      i++;\n      let distance = '';\n      const {\n        status\n      } = tripDetails[key];\n      let value = '';\n\n      switch (key) {\n        case '_1':\n          {\n            value = 'First Trip';\n          }\n          break;\n\n        case '_2':\n          {\n            value = 'Second Trip';\n          }\n          break;\n\n        case '_3':\n          {\n            value = 'Third Trip';\n          }\n          break;\n      }\n\n      ;\n\n      if (userLocation) {\n        let d = distanceCalculator(userLocation.latitude, userLocation.longitude, tripDetails[key].location.latitude, tripDetails[key].location.longitude);\n        let unit = d > 1000 ? 'km' : 'meters';\n        d = d > 1000 ? d / 1000 : d;\n        distance = `(${d.toFixed(2)} ${unit} away)`;\n      }\n\n      tripDetailsRender.push( /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsxs(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: [value, \" \", /*#__PURE__*/_jsx(\"span\", {\n            style: {\n              fontFamily: 'Gilroy-Semibold',\n              color: colors.GREY\n            },\n            children: driverID == tripDetails[key].driverID ? ' (CANCELLER)' : ''\n          })]\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Medium',\n            margin: 0\n          },\n          children: [status, \" \", /*#__PURE__*/_jsx(\"span\", {\n            style: {\n              color: colors.GREY,\n              fontFamily: 'Gilroy-Semibold'\n            },\n            children: distance\n          })]\n        })]\n      }, key));\n    }\n\n    ;\n    tripDetailsRender.unshift( /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.breakdownSpreadApart,\n      style: {\n        marginTop: 20\n      },\n      children: [/*#__PURE__*/_jsx(\"p\", {\n        style: {\n          fontFamily: 'Gilroy-Regular',\n          margin: 0\n        },\n        children: \"Trip Number\"\n      }), /*#__PURE__*/_jsx(\"p\", {\n        style: {\n          fontFamily: 'Gilroy-Bold',\n          margin: 0\n        },\n        children: i\n      })]\n    }));\n    return tripDetailsRender;\n  }\n\n  renderCurrentDataTripDetailsTime(t1_, startAt) {\n    const t1 = new Date(t1_); //time we ended trip\n\n    const t2 = new Date(startAt.year, M.indexOf(startAt.month), startAt.day, startAt.hour, startAt.min, startAt.sec); //time we started trip\n\n    const difference = t1.getTime() - t2.getTime();\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Time of trip confirmation\"\n        }), /*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Medium',\n            margin: 0\n          },\n          children: formatDateAllValues(t2)\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Time of trip cancellation\"\n        }), /*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Medium',\n            margin: 0\n          },\n          children: formatDateAllValues(t1)\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.breakdownSpreadApart,\n        style: {\n          marginTop: 15\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Regular',\n            margin: 0\n          },\n          children: \"Duration before trip cancellation\"\n        }), /*#__PURE__*/_jsx(\"p\", {\n          style: {\n            fontFamily: 'Gilroy-Medium',\n            margin: 0\n          },\n          children: millisToMinutesAndSeconds(difference)\n        })]\n      })]\n    });\n  }\n\n  render() {\n    let results = [];\n    const keys = Object.keys(this.state.result).sort((a, b) => b - a);\n\n    for (let k = 0; k < keys.length; k++) {\n      const data = this.state.result[keys[k]];\n      const {\n        startAt\n      } = data;\n      const displayDate = formatDateAllValues(new Date(startAt.year, M.indexOf(startAt.month), startAt.day, startAt.hour, startAt.min, startAt.sec));\n      results.push( /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.previousMessageSum,\n          onClick: () => {\n            this.setState({\n              currentData: data,\n              index: k\n            });\n          },\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            style: {\n              width: '90px',\n              height: '30px',\n              backgroundColor: data.canceller == 'rider' ? colors.GREEN : colors.BLUE,\n              borderRadius: '5px',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.readOrUnreadText,\n              style: {\n                color: '#ffffff',\n                fontFamily: 'Gilroy-ExtraBold'\n              },\n              children: data.canceller == 'rider' ? 'Rider' : 'Driver'\n            })\n          }), /*#__PURE__*/_jsx(\"p\", {\n            style: {\n              fontSize: '105%',\n              fontFamily: 'Gilroy-Bold',\n              color: colors.GREEN\n            },\n            children: /*#__PURE__*/_jsx(\"span\", {\n              style: {\n                color: colors.GREY\n              },\n              children: displayDate\n            })\n          })]\n        }), k == keys.length - 1 ? /*#__PURE__*/_jsx(_Fragment, {}) : /*#__PURE__*/_jsx(\"div\", {\n          className: styles.sharedLine,\n          style: {\n            marginTop: '5px'\n          }\n        })]\n      }));\n    }\n\n    ;\n    const defaultProps = {\n      center: {\n        lat: 0,\n        lng: 0\n      },\n      zoom: 11\n    };\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.cont,\n      children: this.state.currentData ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: styles.container,\n          style: {\n            backgroundColor: colors.WHITE,\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsx(\"p\", {\n            className: styles.title,\n            style: {\n              color: colors.BLACK\n            },\n            children: \"Cancelled Trip\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              width: '90%',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              marginBottom: '20px'\n            }\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.mapBox,\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: styles.mapBoxCenter,\n              onClick: () => {\n                this.renderPolylines(this.map.map_, this.map.maps_, true);\n              },\n              children: /*#__PURE__*/_jsx(BiCurrentLocation, {\n                color: colors.GREEN,\n                size: 25\n              })\n            }), /*#__PURE__*/_jsxs(GoogleMapReact, {\n              ref: map => this.map = map,\n              bootstrapURLKeys: {\n                key: this.state.key\n              },\n              defaultCenter: defaultProps.center,\n              defaultZoom: defaultProps.zoom,\n              options: {\n                fullscreenControl: false,\n                disableDefaultUI: true\n              },\n              onGoogleApiLoaded: ({\n                map,\n                maps\n              }) => this.renderPolylines(map, maps),\n              children: [this.state.currentData.userLocation && /*#__PURE__*/_jsx(\"img\", {\n                lat: this.state.currentData.userLocation.latitude,\n                lng: this.state.currentData.userLocation.longitude,\n                src: '/userIcon.svg',\n                className: styles.mapIcon\n              }), this.renderDriverMarkers(this.state.currentData.tripDetails)]\n            })]\n          }), /*#__PURE__*/_jsx(\"p\", {\n            className: styles.text,\n            style: {\n              color: colors.GREY,\n              fontFamily: 'Gilroy-SemiBold',\n              marginTop: '40px'\n            },\n            children: \"Breakdown of trip cancellation\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              height: '1px',\n              width: '90%',\n              backgroundColor: colors.GREY,\n              marginTop: '5px'\n            }\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.breakdownSpreadApart,\n            style: {\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              style: {\n                fontFamily: 'Gilroy-Medium',\n                margin: 0\n              },\n              children: \"Canceller\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                width: '90px',\n                height: '30px',\n                backgroundColor: this.state.currentData.canceller == 'rider' ? colors.GREEN : colors.BLUE,\n                borderRadius: '5px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n              },\n              children: /*#__PURE__*/_jsx(\"p\", {\n                className: styles.readOrUnreadText,\n                style: {\n                  color: '#ffffff',\n                  fontFamily: 'Gilroy-ExtraBold'\n                },\n                children: this.state.currentData.canceller == 'rider' ? 'Rider' : 'Driver'\n              })\n            })]\n          }), this.renderCurrentDataTripDetails(this.state.currentData), /*#__PURE__*/_jsx(\"p\", {\n            className: styles.text,\n            style: {\n              color: colors.GREY,\n              fontFamily: 'Gilroy-SemiBold',\n              marginTop: '50px'\n            },\n            children: \"Time details\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              height: '1px',\n              width: '90%',\n              backgroundColor: colors.GREY,\n              marginTop: '5px'\n            }\n          }), this.renderCurrentDataTripDetailsTime(this.state.currentData.time, this.state.currentData.startAt), /*#__PURE__*/_jsx(\"p\", {\n            className: styles.text,\n            style: {\n              color: colors.GREY,\n              fontFamily: 'Gilroy-SemiBold',\n              marginTop: '50px'\n            },\n            children: \"Cost Details\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              height: '1px',\n              width: '90%',\n              backgroundColor: colors.GREY,\n              marginTop: '5px'\n            }\n          }), this.renderCurrentDataCost(this.state.currentData), /*#__PURE__*/_jsx(\"p\", {\n            className: styles.text,\n            style: {\n              color: colors.GREY,\n              fontFamily: 'Gilroy-SemiBold',\n              marginTop: '50px'\n            },\n            children: \"Refund values\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              height: '1px',\n              width: '90%',\n              backgroundColor: colors.GREY,\n              marginTop: '5px'\n            }\n          }), this.renderCurrentDataRefund(this.state.currentData.cost), /*#__PURE__*/_jsx(\"div\", {\n            style: {\n              height: '1px',\n              width: '90%',\n              backgroundColor: colors.GREY,\n              marginTop: '25px'\n            }\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.breakdownSpreadApart,\n            style: {\n              marginTop: '10px'\n            },\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: styles.breakdownParter,\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                className: styles.breakdownTitle,\n                children: \"Total Collected\"\n              }), /*#__PURE__*/_jsxs(\"p\", {\n                className: styles.breakdownCash,\n                style: {\n                  color: colors.GREY\n                },\n                children: [\"$\", this.costIsBalanced().totalCollected]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.breakdownParter,\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                className: styles.breakdownTitle,\n                children: \"Total Left\"\n              }), /*#__PURE__*/_jsxs(\"p\", {\n                className: styles.breakdownCash,\n                style: {\n                  color: colors.GREY\n                },\n                children: [\"$\", this.costIsBalanced().totalLeft]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.breakdownParter,\n              children: [/*#__PURE__*/_jsx(\"p\", {\n                className: styles.breakdownTitle,\n                children: \"Total Allocated\"\n              }), /*#__PURE__*/_jsxs(\"p\", {\n                className: styles.breakdownCash,\n                style: {\n                  color: colors.GREEN\n                },\n                children: [\"$\", this.costIsBalanced().totalAllocated]\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.enterKilometerDiv,\n          style: {\n            marginTop: '20px',\n            marginBottom: '150px',\n            marginLeft: '2.5%',\n            width: '95%'\n          },\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: styles.button2,\n            style: {\n              backgroundColor: colors.RED\n            },\n            id: styles.buttonBottom,\n            onClick: () => {\n              this.setState({\n                currentData: null,\n                refundRiderAmount: '',\n                refundRiderPerchKms: '',\n                payFirstDriver: '',\n                paySecondDriver: '',\n                payThirdDriver: '',\n                adminCut: ''\n              });\n            },\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              children: \"Cancel\"\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: this.costIsBalanced().balancedBool ? styles.button2 : styles.buttonSelected,\n            style: {\n              backgroundColor: colors.GREEN\n            },\n            id: styles.buttonBottom,\n            onClick: () => {\n              if (this.costIsBalanced().balancedBool) {\n                this.setState({\n                  loading: true\n                }, () => {\n                  let driverObjects = [];\n\n                  for (let newKey in this.state.currentData.tripDetails) {\n                    let toPay = '';\n\n                    switch (newKey) {\n                      case '_1':\n                        {\n                          toPay = this.state.payFirstDriver;\n                        }\n                        break;\n\n                      case '_2':\n                        {\n                          toPay = this.state.paySecondDriver;\n                        }\n                        break;\n\n                      case '_3':\n                        {\n                          toPay = this.state.payThirdDriver;\n                        }\n                        break;\n                    }\n\n                    ;\n                    driverObjects.push({\n                      driverID: this.state.currentData.tripDetails[newKey].driverID,\n                      driverHistoryRef: this.state.currentData.tripDetails[newKey].historyRef,\n                      toPay: Number(Number(toPay).toFixed(2))\n                    });\n                  }\n\n                  ;\n                  cancelledTripResolver.call(this, {\n                    refundRiderAmount: Number(Number(this.state.refundRiderAmount).toFixed(2)),\n                    refundRiderPerchKms: Number(this.state.refundRiderPerchKms) / this.state.costPerPerchKM,\n                    driverObjects: driverObjects,\n                    //An array of objects containing {driverID,toPay,driverHistoryRef}\n                    userID: this.state.currentData.riderID,\n                    historyRef: this.state.currentData.historyRef,\n                    paymentIntentId: this.state.currentData.cost.paymentIntentId,\n                    cancelled_UNRESOLVED_KEY: keys[this.state.index]\n                  });\n                });\n              }\n            },\n            children: this.state.loading ? /*#__PURE__*/_jsx(Loader, {\n              type: \"TailSpin\",\n              color: colors.WHITE,\n              height: '20px',\n              width: '20px'\n            }) : /*#__PURE__*/_jsx(\"p\", {\n              className: styles.buttonText1,\n              children: \"Refund Amount\"\n            })\n          })]\n        })]\n      }) : /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.container,\n        style: {\n          backgroundColor: colors.WHITE,\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          className: styles.title,\n          style: {\n            color: colors.BLACK\n          },\n          children: \"Cancelled Trips\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: '90%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            marginBottom: '20px'\n          }\n        }), results]\n      })\n    });\n  }\n\n}\n;","map":null,"metadata":{},"sourceType":"module"}